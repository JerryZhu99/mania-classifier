/*! For license information please see main.js.LICENSE.txt */
(()=>{var e={615:e=>{"use strict";e.exports=JSON.parse('{"attributes":[{"name":"overallDifficulty","min":0,"max":10},{"name":"hpDrain","min":3.4,"max":9.5},{"name":"length","min":25034,"max":856562},{"name":"noteCount","min":587,"max":14969},{"name":"noteDensity","min":8.216512987442272,"max":35.19255430256078},{"name":"chordDensity","min":5.043881771411278,"max":26.39601819474612},{"name":"lnPercent","min":0,"max":1},{"name":"startDuringLNPercent","min":0,"max":0.8580814717477004},{"name":"endDuringLNPercent","min":0,"max":0.71766472686315},{"name":"jackPercent","min":0.32077676460068566,"max":0.9645531791297651},{"name":"pureJackPercent","min":0.00784009055894445,"max":0.9404531790152},{"name":"chord1Percent","min":0.04387990762124711,"max":0.9637362637362638},{"name":"chord2Percent","min":0.03538536112457586,"max":0.5845410628019324},{"name":"chord3Percent","min":0,"max":0.5727482678983834},{"name":"chord4Percent","min":0,"max":0.6009732360097324}],"categories":["chordjack","stream","chordstream","longjack","minijack","vibro","ln_inverse","ln_release","ln_mixed"]}')},765:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Abs:()=>Ge,Acos:()=>He,Acosh:()=>je,AdadeltaOptimizer:()=>$o,AdagradOptimizer:()=>So,AdamOptimizer:()=>Ao,AdamaxOptimizer:()=>Mo,Add:()=>qe,AddN:()=>Ke,All:()=>Xe,Any:()=>Ye,ArgMax:()=>Je,ArgMin:()=>Ze,Asin:()=>Qe,Asinh:()=>et,Atan:()=>tt,Atan2:()=>rt,Atanh:()=>nt,AvgPool:()=>st,AvgPool3D:()=>it,AvgPool3DBackprop:()=>ot,AvgPoolBackprop:()=>at,BatchMatMul:()=>lt,BatchToSpaceND:()=>ut,BroadcastTo:()=>ct,Callback:()=>tk,CallbackList:()=>sy,Cast:()=>ht,Ceil:()=>pt,ClipByValue:()=>dt,Complex:()=>ft,Concat:()=>mt,Conv2D:()=>gt,Conv2DBackpropFilter:()=>yt,Conv2DBackpropInput:()=>bt,Conv3D:()=>xt,Conv3DBackpropFilterV2:()=>wt,Conv3DBackpropInputV2:()=>vt,Cos:()=>kt,Cosh:()=>Nt,CropAndResize:()=>$t,Cumsum:()=>It,CustomCallback:()=>oy,DataStorage:()=>U,DepthToSpace:()=>Ct,DepthwiseConv2dNative:()=>St,DepthwiseConv2dNativeBackpropFilter:()=>Tt,DepthwiseConv2dNativeBackpropInput:()=>Et,Diag:()=>At,Dilation2D:()=>Rt,Dilation2DBackpropFilter:()=>Ft,Dilation2DBackpropInput:()=>Dt,Div:()=>Ot,ENV:()=>We,EarlyStopping:()=>sk,Elu:()=>_t,EluGrad:()=>Mt,Environment:()=>ze,Equal:()=>zt,Erf:()=>Lt,Exp:()=>Bt,Expm1:()=>Pt,FFT:()=>Wt,Fill:()=>Vt,FlipLeftRight:()=>Ut,Floor:()=>Gt,FloorDiv:()=>Ht,FromPixels:()=>Tr,FusedBatchNorm:()=>jt,FusedConv2D:()=>Rr,FusedDepthwiseConv2D:()=>Dr,GatherNd:()=>Kt,GatherV2:()=>qt,GraphModel:()=>mN,Greater:()=>Xt,GreaterEqual:()=>Yt,History:()=>iy,IFFT:()=>Zt,Identity:()=>Jt,Imag:()=>Qt,InputSpec:()=>Hg,IsFinite:()=>en,IsInf:()=>tn,IsNan:()=>nn,KernelBackend:()=>G,LRN:()=>dn,LRNBackprop:()=>fn,LayerVariable:()=>Vg,LayersModel:()=>pb,Less:()=>rn,LessEqual:()=>sn,LinSpace:()=>an,Log:()=>on,Log1p:()=>ln,LogSoftmax:()=>pn,LogicalAnd:()=>un,LogicalNot:()=>cn,LogicalOr:()=>hn,Max:()=>mn,MaxPool:()=>yn,MaxPool3D:()=>xn,MaxPool3DBackprop:()=>wn,MaxPoolBackprop:()=>bn,MaxPoolWithArgmax:()=>vn,Maximum:()=>gn,Mean:()=>kn,Min:()=>Nn,Minimum:()=>In,MirrorPad:()=>$n,Mod:()=>Cn,MomentumOptimizer:()=>zo,Multiply:()=>Sn,Negate:()=>Tn,NonMaxSuppressionV3:()=>An,NonMaxSuppressionV4:()=>Rn,NonMaxSuppressionV5:()=>Dn,NotEqual:()=>En,OP_SCOPE_SUFFIX:()=>Ms,OneHot:()=>On,OnesLike:()=>Fn,Optimizer:()=>Io,PadV2:()=>_n,Pool:()=>Mn,Pow:()=>Ln,Prelu:()=>zn,Prod:()=>Bn,RMSPropOptimizer:()=>Bo,RNN:()=>gx,Range:()=>Pn,Rank:()=>cs,Real:()=>Wn,Reciprocal:()=>Vn,Reduction:()=>Ip,Relu:()=>Un,Relu6:()=>Xn,Reshape:()=>Gn,ResizeBilinear:()=>qn,ResizeBilinearGrad:()=>Kn,ResizeNearestNeighbor:()=>Hn,ResizeNearestNeighborGrad:()=>jn,Reverse:()=>Yn,RotateWithOffset:()=>Er,Round:()=>Jn,Rsqrt:()=>Zn,SGDOptimizer:()=>Lo,ScatterNd:()=>Qn,SelectV2:()=>er,Selu:()=>tr,Sequential:()=>mb,Sigmoid:()=>ir,Sign:()=>ar,Sin:()=>rr,Sinh:()=>sr,Slice:()=>nr,Softmax:()=>pr,Softplus:()=>or,SpaceToBatchND:()=>cr,SparseToDense:()=>gr,SplitV:()=>hr,Sqrt:()=>lr,Square:()=>fr,SquaredDifference:()=>dr,Step:()=>Sr,StridedSlice:()=>yr,Sub:()=>mr,Sum:()=>ur,SymbolicTensor:()=>jg,Tan:()=>br,Tanh:()=>xr,Tensor:()=>ls,TensorBuffer:()=>ss,Tile:()=>wr,TopK:()=>vr,Transpose:()=>kr,Unique:()=>Nr,Unpack:()=>Ir,UnsortedSegmentSum:()=>$r,Variable:()=>us,ZerosLike:()=>Cr,_FusedMatMul:()=>Ar,abs:()=>Ro,acos:()=>Po,acosh:()=>Wo,add:()=>lo,addN:()=>Vo,addStrict:()=>Nh,all:()=>Jo,any:()=>Zo,argMax:()=>Qo,argMin:()=>el,asin:()=>tl,asinh:()=>nl,atan:()=>rl,atan2:()=>sl,atanh:()=>al,avgPool:()=>xl,avgPool3d:()=>wl,backend:()=>io,backend_util:()=>g,basicLSTMCell:()=>Sl,batchNorm:()=>Al,batchNorm2d:()=>Rl,batchNorm3d:()=>Dl,batchNorm4d:()=>Fl,batchToSpaceND:()=>Tl,booleanMaskAsync:()=>gh,broadcastTo:()=>Ol,browser:()=>l,buffer:()=>Da,callbacks:()=>ak,cast:()=>Fa,ceil:()=>_l,clipByValue:()=>Ml,clone:()=>Oa,complex:()=>zs,concat:()=>Nl,concat1d:()=>Ll,concat2d:()=>zl,concat3d:()=>Bl,concat4d:()=>Pl,constraints:()=>b,conv1d:()=>Vl,conv2d:()=>Wl,conv2dTranspose:()=>Gl,conv3d:()=>Hl,conv3dTranspose:()=>ql,copyRegisteredKernels:()=>Vr,cos:()=>Kl,cosh:()=>Xl,cosineWindow:()=>Ph,cumsum:()=>Yl,customGrad:()=>vo,data:()=>W,deprecationWarn:()=>Gi,depthToSpace:()=>Jl,depthwiseConv2d:()=>Zl,deregisterOp:()=>hk,device_util:()=>a,diag:()=>Ql,dilation2d:()=>eu,disableDeprecationWarnings:()=>Ui,dispose:()=>Yi,disposeVariables:()=>Hi,div:()=>co,divNoNan:()=>ru,divStrict:()=>Ih,dot:()=>su,dropout:()=>zh,elu:()=>au,enableDebugMode:()=>Vi,enableProdMode:()=>Wi,enclosingPowerOfTwo:()=>Bh,engine:()=>ji,env:()=>Be,equal:()=>tu,equalStrict:()=>yh,erf:()=>iu,exp:()=>ou,expandDims:()=>lu,expm1:()=>uu,eye:()=>hu,fft:()=>jc,fill:()=>Co,findBackend:()=>ro,findBackendFactory:()=>so,floor:()=>pu,floorDiv:()=>uo,fused:()=>m,gather:()=>bu,gatherND:()=>Lh,gather_util:()=>u,getBackend:()=>to,getGradient:()=>Mr,getKernel:()=>_r,getKernelsForBackend:()=>Lr,grad:()=>go,grads:()=>yo,greater:()=>xu,greaterEqual:()=>wu,greaterEqualStrict:()=>bh,greaterStrict:()=>xh,ifft:()=>qc,imag:()=>vu,image:()=>Mp,inTopKAsync:()=>Wh,initializers:()=>x,input:()=>xb,io:()=>i,irfft:()=>Kc,isFinite:()=>ku,isInf:()=>Nu,isNaN:()=>Iu,keep:()=>Ji,kernel_impls:()=>y,layers:()=>w,leakyRelu:()=>$u,less:()=>Cu,lessEqual:()=>Su,lessEqualStrict:()=>wh,lessStrict:()=>vh,linalg:()=>Lp,linspace:()=>Tu,loadGraphModel:()=>gN,loadLayersModel:()=>bb,localResponseNormalization:()=>Eu,log:()=>Au,log1p:()=>Ru,logSigmoid:()=>Ou,logSoftmax:()=>Lu,logSumExp:()=>zu,logicalAnd:()=>Bu,logicalNot:()=>Pu,logicalOr:()=>Wu,logicalXor:()=>Vu,losses:()=>zp,matMul:()=>ei,math:()=>o,max:()=>_u,maxPool:()=>Uu,maxPool3d:()=>Gu,maxPoolWithArgmax:()=>Hu,maximum:()=>_o,maximumStrict:()=>$h,mean:()=>Ku,memory:()=>qi,metrics:()=>v,min:()=>Xu,minimum:()=>Yu,minimumStrict:()=>Ch,mirrorPad:()=>Ju,mod:()=>Zu,modStrict:()=>Sh,model:()=>gb,models:()=>k,moments:()=>Qu,movingAverage:()=>Oh,mul:()=>ho,mulStrict:()=>Th,multiRNNCell:()=>ec,multinomial:()=>tc,neg:()=>Du,nextFrame:()=>Vp,norm:()=>Fh,notEqual:()=>nc,notEqualStrict:()=>kh,oneHot:()=>ti,ones:()=>qu,onesLike:()=>sc,op:()=>Ls,outerProduct:()=>ac,pad:()=>ic,pad1d:()=>oc,pad2d:()=>lc,pad3d:()=>uc,pad4d:()=>cc,pool:()=>pc,pow:()=>To,powStrict:()=>Eh,prelu:()=>dc,print:()=>_a,prod:()=>fc,profile:()=>Ki,rand:()=>mc,randomGamma:()=>wc,randomNormal:()=>vc,randomUniform:()=>kc,range:()=>Ic,ready:()=>eo,real:()=>rc,reciprocal:()=>$c,registerBackend:()=>ao,registerCallbackConstructor:()=>wb,registerGradient:()=>Br,registerKernel:()=>zr,registerOp:()=>uk,regularizers:()=>N,relu:()=>Cc,relu6:()=>Sc,removeBackend:()=>no,reshape:()=>Qa,reverse:()=>Tc,reverse1d:()=>Ec,reverse2d:()=>Ac,reverse3d:()=>Rc,reverse4d:()=>Dc,rfft:()=>Jc,round:()=>Fc,rsqrt:()=>Oc,scalar:()=>No,scatterND:()=>_h,scatter_util:()=>c,selu:()=>_c,separableConv2d:()=>Mc,sequential:()=>yb,serialization:()=>p,setBackend:()=>Qi,setPlatform:()=>oo,setdiff1dAsync:()=>Lc,sigmoid:()=>Il,sign:()=>zc,signal:()=>_p,sin:()=>Bc,sinh:()=>Pc,slice:()=>$l,slice1d:()=>Wc,slice2d:()=>Vc,slice3d:()=>Uc,slice4d:()=>Gc,slice_util:()=>h,softmax:()=>Hc,softplus:()=>Fu,spaceToBatchND:()=>hc,sparseToDense:()=>Mh,spectral:()=>Op,split:()=>Yc,sqrt:()=>po,square:()=>fo,squaredDifference:()=>Zc,squaredDifferenceStrict:()=>Ah,squeeze:()=>Qc,stack:()=>eh,step:()=>th,stridedSlice:()=>nh,sub:()=>Eo,subStrict:()=>Rh,sum:()=>Mu,sumOutType:()=>ys,tan:()=>rh,tanh:()=>Cl,tensor:()=>Ps,tensor1d:()=>Nc,tensor2d:()=>sh,tensor3d:()=>si,tensor4d:()=>ah,tensor5d:()=>ih,tensor6d:()=>oh,tensor_util:()=>s,test_util:()=>d,tidy:()=>Xi,tile:()=>cu,time:()=>Zi,topk:()=>lh,train:()=>Pp,transpose:()=>ni,truncatedNormal:()=>uh,unique:()=>ch,unregisterGradient:()=>Wr,unregisterKernel:()=>Pr,unsortedSegmentSum:()=>hh,unstack:()=>ph,upcastType:()=>gs,util:()=>r,valueAndGrad:()=>bo,valueAndGrads:()=>xo,variable:()=>dh,variableGrads:()=>wo,version:()=>zD,version_converter:()=>yN,version_core:()=>Pi,version_layers:()=>Wy,where:()=>nu,whereAsync:()=>mh,zeros:()=>ju,zerosLike:()=>mo});var r={};n.r(r),n.d(r,{arraysEqual:()=>se,assert:()=>Z,assertNonNegativeIntegerDimensions:()=>Oe,assertNonNull:()=>ee,assertShapesMatch:()=>Q,bytesFromStringArray:()=>ve,bytesPerElement:()=>we,checkConversionForErrors:()=>ge,clamp:()=>q,computeStrides:()=>Te,createScalarValue:()=>Zr,createShuffledIndices:()=>le,decodeString:()=>rs,distSquared:()=>J,encodeString:()=>ns,fetch:()=>ts,flatten:()=>te,getArrayFromDType:()=>me,getTypedArrayFromDType:()=>fe,hasEncodingLoss:()=>be,indexToLoc:()=>Me,inferDtype:()=>$e,inferFromImplicitShape:()=>he,isBoolean:()=>Ne,isFunction:()=>Ce,isInt:()=>ae,isNumber:()=>Ie,isPromise:()=>Le,isScalarShape:()=>re,isString:()=>ke,isTypedArray:()=>xe,isValidDtype:()=>ye,locToIndex:()=>_e,makeOnesTypedArray:()=>Re,makeZerosNestedTypedArray:()=>Fe,makeZerosTypedArray:()=>De,nearestDivisor:()=>Se,nearestLargerEven:()=>K,now:()=>es,parseAxisParam:()=>pe,randUniform:()=>Y,repeatedTry:()=>ce,rightPad:()=>ue,shuffle:()=>j,sizeFromShape:()=>ne,sizeToSquarishShape:()=>oe,squeezeShape:()=>de,sum:()=>X,tanh:()=>ie,toNestedArray:()=>Ae,toTypedArray:()=>Qr});var s={};n.r(s),n.d(s,{assertTypesMatch:()=>xs,getTensorsInContainer:()=>vs,isTensorInList:()=>ws,makeTypesMatch:()=>bs});var a={};n.r(a),n.d(a,{isBrowser:()=>Es,isMobile:()=>Ts});var i={};n.r(i),n.d(i,{browserFiles:()=>Ba,browserHTTPRequest:()=>Ka,concatenateArrayBuffers:()=>qs,copyModel:()=>Ta,decodeWeights:()=>Us,encodeWeights:()=>Vs,fromMemory:()=>Ja,getLoadHandlers:()=>ta,getModelArtifactsInfoForJSON:()=>Xs,getSaveHandlers:()=>ea,http:()=>qa,isHTTPScheme:()=>Ha,listModels:()=>Ca,loadWeights:()=>Va,moveModel:()=>Ea,registerLoadRouter:()=>Qs,registerSaveRouter:()=>Zs,removeModel:()=>Sa,weightsLoaderFactory:()=>Ua,withSaveHandler:()=>Za});var o={};n.r(o),n.d(o,{confusionMatrix:()=>ri});var l={};n.r(l),n.d(l,{fromPixels:()=>oi,toPixels:()=>ii});var u={};n.r(u),n.d(u,{prepareAndValidate:()=>li});var c={};n.r(c),n.d(c,{calculateShapes:()=>hi,validateInput:()=>ci,validateUpdateShape:()=>ui});var h={};n.r(h),n.d(h,{assertParamsValid:()=>pi,computeFlatOffset:()=>$i,computeOutShape:()=>fi,getNormalizedAxes:()=>bi,isSliceContinous:()=>Ii,maskToAxes:()=>di,parseSliceParams:()=>Ci,startForAxis:()=>ki,startIndicesWithElidedDims:()=>xi,stopForAxis:()=>Ni,stopIndicesWithElidedDims:()=>wi,stridesForAxis:()=>vi,stridesWithElidedDims:()=>mi});var p={};n.r(p),n.d(p,{Serializable:()=>Si,SerializationMap:()=>Ti,registerClass:()=>Ei});var d={};n.r(d),n.d(d,{TEST_EPSILON_FLOAT16:()=>Ai,expectArrayBuffersEqual:()=>Bi,expectArraysClose:()=>Ri,expectArraysEqual:()=>_i,expectNumbersClose:()=>Mi,expectPromiseToFail:()=>Oi,expectValuesInRange:()=>zi,testEpsilon:()=>Di});var f={};n.r(f),n.d(f,{collectGatherOpShapeInfo:()=>yu,computeOutShape:()=>gu,segOpComputeOptimalWindowSize:()=>mu});var m={};n.r(m),n.d(m,{conv2d:()=>qh,depthwiseConv2d:()=>Yh,matMul:()=>Jh});var g={};n.r(g),n.d(g,{ERF_A1:()=>Zp,ERF_A2:()=>Qp,ERF_A3:()=>ed,ERF_A4:()=>td,ERF_A5:()=>nd,ERF_P:()=>Jp,PARALLELIZE_THRESHOLD:()=>du,SELU_SCALE:()=>Yp,SELU_SCALEALPHA:()=>Xp,applyActivation:()=>Hh,assertAndGetBroadcastShape:()=>Oo,assertAxesAreInnerMostDims:()=>qo,assertParamsConsistent:()=>vl,assignToTypedArray:()=>cd,axesAreInnerMostDims:()=>Uo,calculateShapes:()=>hi,castTensor:()=>dd,combineLocations:()=>Go,complexWithEvenIndex:()=>od,complexWithOddIndex:()=>ld,computeConv2DInfo:()=>ul,computeConv3DInfo:()=>cl,computeDefaultPad:()=>hl,computeDilation2DInfo:()=>il,computeOptimalWindowSize:()=>fu,computeOutAndReduceShapes:()=>Ho,computeOutShape:()=>kl,computePool2DInfo:()=>ol,computePool3DInfo:()=>ll,convertConv2DDataFormat:()=>bl,eitherStridesOrDilationsAreOne:()=>yl,expandShapeToKeepDim:()=>jo,exponent:()=>pd,exponents:()=>hd,getAxesPermutation:()=>Ko,getBroadcastDims:()=>Do,getComplexWithIndex:()=>ud,getFusedBiasGradient:()=>Gh,getFusedDyActivation:()=>Uh,getImageCenter:()=>Up,getInnerMostAxes:()=>Yo,getPermuted:()=>Hp,getReductionAxes:()=>Fo,getReshaped:()=>Gp,getReshapedPermuted:()=>jp,getSliceBeginCoords:()=>qp,getSliceSize:()=>Kp,getUndoAxesPermutation:()=>Xo,linspaceImpl:()=>md,log:()=>sd,mergeRealAndImagArrays:()=>ad,prepareAndValidate:()=>li,prepareSplitSize:()=>Xc,reshapeTensor:()=>fd,segment_util:()=>f,shouldFuse:()=>jh,slice_util:()=>h,splitRealAndImagArrays:()=>id,tupleValuesAreOne:()=>gl,upcastType:()=>gs,validateInput:()=>ci,validateUpdateShape:()=>ui,warn:()=>rd});var y={};n.r(y),n.d(y,{nonMaxSuppressionV3Impl:()=>up,nonMaxSuppressionV4Impl:()=>cp,nonMaxSuppressionV5Impl:()=>hp,split:()=>gd,tile:()=>yd,topkImpl:()=>bd,whereImpl:()=>fh});var b={};n.r(b),n.d(b,{maxNorm:()=>hm,minMaxNorm:()=>fm,nonNeg:()=>dm,unitNorm:()=>pm});var x={};n.r(x),n.d(x,{constant:()=>wg,glorotNormal:()=>Sg,glorotUniform:()=>Cg,heNormal:()=>Tg,heUniform:()=>Eg,identity:()=>Ig,leCunNormal:()=>Ag,leCunUniform:()=>Rg,ones:()=>xg,orthogonal:()=>Dg,randomNormal:()=>kg,randomUniform:()=>vg,truncatedNormal:()=>Ng,varianceScaling:()=>$g,zeros:()=>bg});var w={};n.r(w),n.d(w,{Layer:()=>Yg,RNN:()=>gx,RNNCell:()=>yx,activation:()=>Mw,add:()=>Hw,alphaDropout:()=>_v,average:()=>jw,averagePooling1d:()=>tv,averagePooling2d:()=>sv,averagePooling3d:()=>ov,avgPool1d:()=>nv,avgPool2d:()=>av,avgPool3d:()=>lv,avgPooling1d:()=>rv,avgPooling2d:()=>iv,avgPooling3d:()=>uv,batchNormalization:()=>Zw,bidirectional:()=>Sv,concatenate:()=>qw,conv1d:()=>Tw,conv2d:()=>Ew,conv2dTranspose:()=>Aw,conv3d:()=>Rw,convLstm2d:()=>Nv,convLstm2dCell:()=>Iv,cropping2D:()=>Fw,dense:()=>Lw,depthwiseConv2d:()=>_w,dot:()=>Jw,dropout:()=>zw,elu:()=>kw,embedding:()=>Gw,flatten:()=>Pw,gaussianDropout:()=>Ov,gaussianNoise:()=>Fv,globalAveragePooling1d:()=>cv,globalAveragePooling2d:()=>hv,globalMaxPool1d:()=>Ev,globalMaxPool2d:()=>Av,globalMaxPooling1d:()=>pv,globalMaxPooling2d:()=>dv,gru:()=>yv,gruCell:()=>bv,input:()=>xb,inputLayer:()=>vw,layerNormalization:()=>Qw,leakyReLU:()=>Iw,lstm:()=>xv,lstmCell:()=>wv,masking:()=>Mv,maxPool1d:()=>Rv,maxPool2d:()=>Dv,maxPooling1d:()=>fv,maxPooling2d:()=>mv,maxPooling3d:()=>gv,maximum:()=>Kw,minimum:()=>Xw,multiply:()=>Yw,permute:()=>Uw,prelu:()=>$w,reLU:()=>Nw,repeatVector:()=>Ww,reshape:()=>Vw,rnn:()=>$v,separableConv2d:()=>Dw,simpleRNN:()=>vv,simpleRNNCell:()=>kv,softmax:()=>Cw,spatialDropout1d:()=>Bw,stackedRNNCells:()=>Cv,thresholdedReLU:()=>Sw,timeDistributed:()=>Tv,upSampling2d:()=>Ow,zeroPadding2d:()=>ev});var v={};n.r(v),n.d(v,{MAPE:()=>qv,MSE:()=>Yv,binaryAccuracy:()=>Lv,binaryCrossentropy:()=>zv,categoricalAccuracy:()=>Pv,categoricalCrossentropy:()=>Wv,cosineProximity:()=>Gv,mape:()=>Kv,meanAbsoluteError:()=>Hv,meanAbsolutePercentageError:()=>jv,meanSquaredError:()=>Xv,mse:()=>Jv,precision:()=>Vv,recall:()=>Uv,sparseCategoricalAccuracy:()=>Bv});var k={};n.r(k),n.d(k,{modelFromJSON:()=>fb});var N={};n.r(N),n.d(N,{l1:()=>Qv,l1l2:()=>Zv,l2:()=>ek});var I={};n.r(I),n.d(I,{json:()=>xk});var $={};n.r($),n.d($,{json:()=>wk});var C={};n.r(C),n.d(C,{json:()=>vk});var S={};n.r(S),n.d(S,{json:()=>kk});var T={};n.r(T),n.d(T,{json:()=>Nk});var E={};n.r(E),n.d(E,{json:()=>Ik});var A={};n.r(A),n.d(A,{json:()=>$k});var R={};n.r(R),n.d(R,{json:()=>Ck});var D={};n.r(D),n.d(D,{json:()=>Sk});var F={};n.r(F),n.d(F,{json:()=>Tk});var O={};n.r(O),n.d(O,{json:()=>Ek});var _={};n.r(_),n.d(_,{json:()=>Ak});var M={};n.r(M),n.d(M,{json:()=>Rk});var L={};n.r(L),n.d(L,{json:()=>Dk});var z={};n.r(z),n.d(z,{json:()=>Fk});var B={};n.r(B),n.d(B,{json:()=>Ok});var P={};n.r(P),n.d(P,{json:()=>_k});var W={};n.r(W),n.d(W,{CSVDataset:()=>aI,Dataset:()=>qN,FileDataSource:()=>yI,TextLineDataset:()=>ZN,URLDataSource:()=>bI,array:()=>XN,csv:()=>xI,func:()=>wI,generator:()=>vI,microphone:()=>NI,version_data:()=>II,webcam:()=>kI,zip:()=>YN});var V={};n.r(V),n.d(V,{addImpl:()=>t$,ceilImpl:()=>A$,expImpl:()=>fC,expm1Impl:()=>yC,floorImpl:()=>LC,logImpl:()=>XC,maxImpl:()=>nS,multiplyImpl:()=>wC,notEqualImpl:()=>dS,rsqrtImpl:()=>kS,simpleAbsImpl:()=>c$,sliceImpl:()=>IC,squaredDifferenceImpl:()=>jS,subImpl:()=>SC,transposeImpl:()=>rS,uniqueImpl:()=>eT});class U{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class G{time(e){return H("time")}read(e){return H("read")}readSync(e){return H("readSync")}numDataIds(){return H("numDataIds")}disposeData(e){return H("disposeData")}write(e,t,n){return H("write")}move(e,t,n,r){return H("move")}memory(){return H("memory")}floatPrecision(){return H("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}batchMatMul(e,t,n,r){return H("batchMatMul")}fusedBatchMatMul({a:e,b:t,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:i}){return H("fusedBatchMatMul")}slice(e,t,n){return H("slice")}stridedSlice(e,t,n,r){return H("stridedSlice")}unstack(e,t){return H("unstack")}reverse(e,t){return H("reverse")}concat(e,t){return H("concat")}neg(e){return H("neg")}add(e,t){return H("add")}addN(e){return H("addN")}subtract(e,t){return H("subtract")}multiply(e,t){return H("multiply")}realDivide(e,t){return H("realDivide")}floorDiv(e,t){return H("floorDiv")}sum(e,t){return H("sum")}prod(e,t){return H("prod")}unsortedSegmentSum(e,t,n){return H("unsortedSegmentSum")}argMin(e,t){return H("argMin")}argMax(e,t){return H("argMax")}equal(e,t){return H("equal")}notEqual(e,t){return H("notEqual")}less(e,t){return H("less")}lessEqual(e,t){return H("lessEqual")}greater(e,t){return H("greater")}greaterEqual(e,t){return H("greaterEqual")}logicalNot(e){return H("logicalNot")}logicalAnd(e,t){return H("logicalAnd")}logicalOr(e,t){return H("logicalOr")}where(e){return H("where")}select(e,t,n){return H("select")}topk(e,t,n){return H("topk")}min(e,t){return H("min")}minimum(e,t){return H("minimum")}mod(e,t){return H("mod")}max(e,t){return H("max")}maximum(e,t){return H("maximum")}all(e,t){return H("all")}any(e,t){return H("any")}squaredDifference(e,t){return H("squaredDifference")}ceil(e){return H("ceil")}floor(e){return H("floor")}round(e){return H("round")}sign(e){return H("sign")}isNaN(e){return H("isNaN")}isInf(e){return H("isInf")}isFinite(e){return H("isFinite")}pow(e,t){return H("pow")}exp(e){return H("exp")}expm1(e){return H("expm1")}softmax(e,t){return H("softmax")}log(e){return H("log")}log1p(e){return H("log1p")}sqrt(e){return H("sqrt")}rsqrt(e){return H("rsqrt")}square(e){return H("square")}reciprocal(e){return H("reciprocal")}relu(e){return H("relu")}relu6(e){return H("relu6")}prelu(e,t){return H("prelu")}elu(e){return H("elu")}eluDer(e,t){return H("eluDer")}selu(e){return H("selu")}int(e){return H("int")}clip(e,t,n){return H("clip")}abs(e){return H("abs")}complexAbs(e){return H("complexAbs")}sigmoid(e){return H("sigmoid")}softplus(e){return H("softplus")}sin(e){return H("sin")}cos(e){return H("cos")}tan(e){return H("tan")}asin(e){return H("asin")}acos(e){return H("acos")}atan(e){return H("atan")}atan2(e,t){return H("atan2")}sinh(e){return H("sinh")}cosh(e){return H("cosh")}tanh(e){return H("tanh")}asinh(e){return H("asinh")}acosh(e){return H("acosh")}atanh(e){return H("atanh")}erf(e){return H("erf")}step(e,t){return H("step")}fusedConv2d({input:e,filter:t,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){return H("fusedConv2d")}conv2d(e,t,n){return H("conv2d")}conv2dDerInput(e,t,n){return H("conv2dDerInput")}conv2dDerFilter(e,t,n){return H("conv2dDerFilter")}fusedDepthwiseConv2D({input:e,filter:t,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){return H("fusedDepthwiseConv2D")}depthwiseConv2D(e,t,n){return H("depthwiseConv2D")}depthwiseConv2DDerInput(e,t,n){return H("depthwiseConv2DDerInput")}depthwiseConv2DDerFilter(e,t,n){return H("depthwiseConv2DDerFilter")}conv3d(e,t,n){return H("conv3d")}conv3dDerInput(e,t,n){return H("conv3dDerInput")}conv3dDerFilter(e,t,n){return H("conv3dDerFilter")}maxPool(e,t){return H("maxPool")}maxPoolBackprop(e,t,n,r){return H("maxPoolBackprop")}avgPool(e,t){return H("avgPool")}avgPoolBackprop(e,t,n){return H("avgPoolBackprop")}avgPool3d(e,t){return H("avgPool3d")}avgPool3dBackprop(e,t,n){return H("avgPool3dBackprop")}maxPool3d(e,t){return H("maxPool3d")}maxPool3dBackprop(e,t,n,r){return H("maxPool3dBackprop")}reshape(e,t){return H("reshape")}cast(e,t){return H("cast")}tile(e,t){return H("tile")}pad(e,t,n){return H("pad")}transpose(e,t){return H("transpose")}gather(e,t,n){return H("gather")}gatherND(e,t){return H("gatherND")}scatterND(e,t,n){return H("scatterND")}batchToSpaceND(e,t,n){return H("batchToSpaceND")}spaceToBatchND(e,t,n){return H("spaceToBatchND")}resizeBilinear(e,t,n,r){return H("resizeBilinear")}resizeBilinearBackprop(e,t,n){return H("resizeBilinearBackprop")}resizeNearestNeighbor(e,t,n,r){return H("resizeNearestNeighbor")}resizeNearestNeighborBackprop(e,t,n){return H("resizeNearestNeighborBackprop")}batchNorm(e,t,n,r,s,a){return H("batchNorm")}localResponseNormalization4D(e,t,n,r,s){return H("localResponseNormalization4D")}LRNGrad(e,t,n,r,s,a,i){return H("LRNGrad")}multinomial(e,t,n,r){return H("multinomial")}oneHot(e,t,n,r){return H("oneHot")}cumsum(e,t,n,r){return H("cumsum")}nonMaxSuppression(e,t,n,r,s){return H("nonMaxSuppression")}fft(e){return H("fft")}ifft(e){return H("ifft")}complex(e,t){return H("complex")}real(e){return H("real")}imag(e){return H("imag")}cropAndResize(e,t,n,r,s,a){return H("cropAndResize")}depthToSpace(e,t,n){return H("depthToSpace")}split(e,t,n){return H("split")}sparseToDense(e,t,n,r){return H("sparseToDense")}diag(e){return H("diag")}fill(e,t,n){return H("fill")}onesLike(e){return H("onesLike")}zerosLike(e){return H("zerosLike")}linspace(e,t,n){return H("linspace")}dispose(){return H("dispose")}}function H(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function j(e){let t=e.length,n=0,r=0;for(;t>0;)r=Math.random()*t|0,t--,n=e[t],e[t]=e[r],e[r]=n}function q(e,t,n){return Math.max(e,Math.min(t,n))}function K(e){return e%2==0?e:e+1}function X(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function Y(e,t){const n=Math.random();return t*n+(1-n)*e}function J(e,t){let n=0;for(let r=0;r<e.length;r++){const s=Number(e[r])-Number(t[r]);n+=s*s}return n}function Z(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function Q(e,t,n=""){Z(se(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function ee(e){Z(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function te(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||xe(e)&&!n)for(let r=0;r<e.length;++r)te(e[r],t,n);else t.push(e);return t}function ne(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function re(e){return 0===e.length}function se(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function ae(e){return e%1==0}function ie(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function oe(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function le(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return j(t),t}function ue(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function ce(e,t=(e=>0),n){return new Promise(((r,s)=>{let a=0;const i=()=>{if(e())return void r();a++;const o=t(a);null!=n&&a>=n?s():setTimeout(i,o)};i()}))}function he(e,t){let n=1,r=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`);r=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const s=e.slice();return s[r]=t/n,s}function pe(e,t){const n=t.length;return Z((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),Z(e.every((e=>ae(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function de(e,t){const n=[],r=[],s=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||s?null:pe(t,e).sort();let i=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[i]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[i]||a[i]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),a[i]<=t&&i++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}function fe(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function me(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function ge(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}function ye(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function be(e,t){return!("complex64"===t||"float32"===t&&"complex64"!==e||"int32"===t&&"float32"!==e&&"complex64"!==e||"bool"===t&&"bool"===e)}function xe(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array}function we(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function ve(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function ke(e){return"string"==typeof e||e instanceof String}function Ne(e){return"boolean"==typeof e}function Ie(e){return"number"==typeof e}function $e(e){return Array.isArray(e)?$e(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array?"int32":Ie(e)?"float32":ke(e)?"string":Ne(e)?"bool":"float32"}function Ce(e){return!!(e&&e.constructor&&e.call&&e.apply)}function Se(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function Te(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function Ee(e,t,n){const r=new Array;if(1===t.length){const s=t[0];for(let t=0;t<s;t++)r[t]=n[e+t]}else{const s=t[0],a=t.slice(1),i=a.reduce(((e,t)=>e*t));for(let t=0;t<s;t++)r[t]=Ee(e+t*i,a,n)}return r}function Ae(e,t){if(0===e.length)return t[0];const n=e.reduce(((e,t)=>e*t));if(0===n)return[];if(n!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}.`);return Ee(0,e,t)}function Re(e,t){const n=De(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function De(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function Fe(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return Ae(e,new Float32Array(n));if("int32"===t)return Ae(e,new Int32Array(n));if("bool"===t)return Ae(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function Oe(e){e.forEach((t=>{Z(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function _e(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=n[t]*e[t];return r}function Me(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let t=0;t<r.length-1;++t)r[t]=Math.floor(e/n[t]),e-=r[t]*n[t];return r[r.length-1]=e,r}function Le(e){return e&&e.then&&"function"==typeof e.then}class ze{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(Le(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=function(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}(this.global.location.search);"tfjsflags"in e&&e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}function Be(){return We}let Pe,We=null;function Ve(){if(null==Pe){let e;if("undefined"!=typeof window)e=window;else if(void 0!==n.g)e=n.g;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}Pe=e}return Pe}function Ue(e,t){const n=function(){const e=Ve();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}const Ge="Abs",He="Acos",je="Acosh",qe="Add",Ke="AddN",Xe="All",Ye="Any",Je="ArgMax",Ze="ArgMin",Qe="Asin",et="Asinh",tt="Atan",nt="Atanh",rt="Atan2",st="AvgPool",at="AvgPoolBackprop",it="AvgPool3D",ot="AvgPool3DBackprop",lt="BatchMatMul",ut="BatchToSpaceND",ct="BroadcastTo",ht="Cast",pt="Ceil",dt="ClipByValue",ft="Complex",mt="Concat",gt="Conv2D",yt="Conv2DBackpropFilter",bt="Conv2DBackpropInput",xt="Conv3D",wt="Conv3DBackpropFilterV2",vt="Conv3DBackpropInputV2",kt="Cos",Nt="Cosh",It="Cumsum",$t="CropAndResize",Ct="DepthToSpace",St="DepthwiseConv2dNative",Tt="DepthwiseConv2dNativeBackpropFilter",Et="DepthwiseConv2dNativeBackpropInput",At="Diag",Rt="Dilation2D",Dt="Dilation2DBackpropInput",Ft="Dilation2DBackpropFilter",Ot="Div",_t="Elu",Mt="EluGrad",Lt="Erf",zt="Equal",Bt="Exp",Pt="Expm1",Wt="FFT",Vt="Fill",Ut="FlipLeftRight",Gt="Floor",Ht="FloorDiv",jt="FusedBatchNorm",qt="GatherV2",Kt="GatherNd",Xt="Greater",Yt="GreaterEqual",Jt="Identity",Zt="IFFT",Qt="Imag",en="IsFinite",tn="IsInf",nn="IsNan",rn="Less",sn="LessEqual",an="LinSpace",on="Log",ln="Log1p",un="LogicalAnd",cn="LogicalNot",hn="LogicalOr",pn="LogSoftmax",dn="LRN",fn="LRNBackprop",mn="Max",gn="Maximum",yn="MaxPool",bn="MaxPoolBackprop",xn="MaxPool3D",wn="MaxPool3DBackprop",vn="MaxPoolWithArgmax",kn="Mean",Nn="Min",In="Minimum",$n="MirrorPad",Cn="Mod",Sn="Multiply",Tn="Negate",En="NotEqual",An="NonMaxSuppressionV3",Rn="NonMaxSuppressionV4",Dn="NonMaxSuppressionV5",Fn="OnesLike",On="OneHot",_n="PadV2",Mn="Pool",Ln="Pow",zn="Prelu",Bn="Prod",Pn="Range",Wn="Real",Vn="Reciprocal",Un="Relu",Gn="Reshape",Hn="ResizeNearestNeighbor",jn="ResizeNearestNeighborGrad",qn="ResizeBilinear",Kn="ResizeBilinearGrad",Xn="Relu6",Yn="Reverse",Jn="Round",Zn="Rsqrt",Qn="ScatterNd",er="SelectV2",tr="Selu",nr="Slice",rr="Sin",sr="Sinh",ar="Sign",ir="Sigmoid",or="Softplus",lr="Sqrt",ur="Sum",cr="SpaceToBatchND",hr="SplitV",pr="Softmax",dr="SquaredDifference",fr="Square",mr="Sub",gr="SparseToDense",yr="StridedSlice",br="Tan",xr="Tanh",wr="Tile",vr="TopK",kr="Transpose",Nr="Unique",Ir="Unpack",$r="UnsortedSegmentSum",Cr="ZerosLike",Sr="Step",Tr="FromPixels",Er="RotateWithOffset",Ar="_FusedMatMul",Rr="FusedConv2D",Dr="FusedDepthwiseConv2D",Fr=Ue("kernelRegistry",(()=>new Map)),Or=Ue("gradRegistry",(()=>new Map));function _r(e,t){const n=Ur(e,t);return Fr.get(n)}function Mr(e){return Or.get(e)}function Lr(e){const t=Fr.entries(),n=[];for(;;){const{done:r,value:s}=t.next();if(r)break;const[a,i]=s,[o]=a.split("_");o===e&&n.push(i)}return n}function zr(e){const{kernelName:t,backendName:n}=e,r=Ur(t,n);Fr.has(r)&&console.warn(`The kernel '${t}' for backend '${n}' is already registered`),Fr.set(r,e)}function Br(e){const{kernelName:t}=e;Or.has(t)&&Be().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${t}'`),Or.set(t,e)}function Pr(e,t){const n=Ur(e,t);if(!Fr.has(n))throw new Error(`The kernel '${e}' for backend '${t}' is not registered`);Fr.delete(n)}function Wr(e){if(!Or.has(e))throw new Error(`The gradient '${e}' for backend is not registered`);Or.delete(e)}function Vr(e,t){Lr(e).forEach((e=>{zr(Object.assign({},e,{backendName:t}))}))}function Ur(e,t){return`${t}_${e}`}class Gr{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new jr)}profileKernel(e,t,n){let r;const s=this.backendTimer.time((()=>{r=n()}));for(let t=0;t<r.length;t++){const n=r[t];n.data().then((t=>{Hr(t,n.dtype,e)}))}return{kernelName:e,outputs:r,inputs:t,timeMs:s.then((e=>e.kernelMs)),extraInfo:s.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:s,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),r,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],s,n[2])}))}))}}function Hr(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class jr{logKernelProfile(e,t,n,r,s,a){const i="number"==typeof r?ue(`${r}ms`,9):r.error,o=ue(e,25),l=t.rank,u=t.size,c=ue(t.shape.toString(),14);let h="";for(const e in s){const n=s[e];if(null!=n){const r=n.shape||t.shape,s=r.length;h+=`${e}: ${s}D ${s>0?r:""} `}}console.log(`%c${o}\t%c${i}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function qr(e,t,n,r){const s=Te(t),a=function(e,t,n,r){const s=ne(t),a=r[r.length-1],i=new Array(a).fill(0),o=t.length,l="complex64"===n?Jr(e):e;if(o>1)for(let e=0;e<s/a;e++){const t=e*a;for(let e=0;e<a;e++)i[e]=Math.max(i[e],Kr(l[t+e],0,n).length)}return i}(e,t,n,s),i=t.length,o=Yr(e,t,n,s,a),l=["Tensor"];return r&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${i}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(o.map((e=>"    "+e)).join("\n")),l.join("\n")}function Kr(e,t,n){let r;return r=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:ke(e)?`'${e}'`:"bool"===n?Xr(e):parseFloat(e.toFixed(7)).toString(),ue(r,t)}function Xr(e){return 0===e?"false":"true"}function Yr(e,t,n,r,s,a=!0){const i="complex64"===n?2:1,o=t[0],l=t.length;if(0===l)return"complex64"===n?[Kr(Jr(e)[0],0,n)]:"bool"===n?[Xr(e[0])]:[e[0].toString()];if(1===l){if(o>20){const t=3*i;let r=Array.from(e.slice(0,t)),a=Array.from(e.slice((o-3)*i,o*i));return"complex64"===n&&(r=Jr(r),a=Jr(a)),["["+r.map(((e,t)=>Kr(e,s[t],n))).join(", ")+", ..., "+a.map(((e,t)=>Kr(e,s[o-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?Jr(e):Array.from(e)).map(((e,t)=>Kr(e,s[t],n))).join(", ")+"]"]}const u=t.slice(1),c=r.slice(1),h=r[0]*i,p=[];if(o>20){for(let t=0;t<3;t++){const r=t*h,a=r+h;p.push(...Yr(e.slice(r,a),u,n,c,s,!1))}p.push("...");for(let t=o-3;t<o;t++){const r=t*h,a=r+h;p.push(...Yr(e.slice(r,a),u,n,c,s,t===o-1))}}else for(let t=0;t<o;t++){const r=t*h,a=r+h;p.push(...Yr(e.slice(r,a),u,n,c,s,t===o-1))}const d=2===l?",":"";p[0]="["+p[0]+d;for(let e=1;e<p.length-1;e++)p[e]=" "+p[e]+d;let f=",\n";for(let e=2;e<l;e++)f+="\n";return p[p.length-1]=" "+p[p.length-1]+"]"+(a?"":f),p}function Jr(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}function Zr(e,t){return"string"===t?ns(e):Qr([e],t)}function Qr(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=te(e)),Be().getBool("DEBUG")&&ge(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function es(){return Be().platform.now()}function ts(e,t){return Be().platform.fetch(e,t)}function ns(e,t="utf-8"){return t=t||"utf-8",Be().platform.encode(e,t)}function rs(e,t="utf-8"){return t=t||"utf-8",Be().platform.decode(e,t)}class ss{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=ne(e),null!=n){const e=n.length;Z(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||me(t,this.size),this.strides=Te(e)}set(e,...t){0===t.length&&(t=[0]),Z(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return as().makeTensor(this.values,this.shape,this.dtype)}}let as=null,is=null,os=null;class ls{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=ne(e),this.strides=Te(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return is.buffer(this.shape,this.dtype,e)}bufferSync(){return is.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return Ae(this.shape,e)}arraySync(){return Ae(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const e=as().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>rs(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataSync(){this.throwIfDisposed();const e=as().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>rs(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await as().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(as().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return is.print(this,e)}clone(){return this.throwIfDisposed(),is.clone(this)}toString(e=!1){return qr(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),is.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),as().makeVariable(this,e,t,n)}}Object.defineProperty(ls,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed});class us extends ls{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!se(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);as().disposeTensor(this),this.dataId=e.dataId,as().incRef(this,null)}dispose(){as().disposeVariable(this),this.isDisposedInternal=!0}}var cs,hs,ps,ds,fs;Object.defineProperty(us,Symbol.hasInstance,{value:e=>e instanceof ls&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(cs||(cs={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(hs||(hs={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(ps||(ps={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(ds||(ds={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(fs||(fs={}));const ms={float32:ds,int32:hs,bool:ps,complex64:fs};function gs(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return ms[e][t]}function ys(e){return gs(e,"int32")}function bs(e,t){if(e.dtype===t.dtype)return[e,t];const n=gs(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function xs(e,t){Z(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function ws(e,t){return t.some((t=>t.id===e.id))}function vs(e){const t=[];return ks(e,t,new Set),t}function ks(e,t,n){if(null==e)return;if(e instanceof ls)return void t.push(e);if(r=e,!Array.isArray(r)&&"object"!=typeof r)return;var r;const s=e;for(const e in s){const r=s[e];n.has(r)||(n.add(r),ks(r,t,n))}}class Ns{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class Is{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Ns}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(console.warn(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new Gr(this.backendInstance),!0}setupRegisteredKernels(){Lr(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){Lr(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof G||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then((n=>!(t<this.pendingBackendInitId||(this.registry[e]=n,this.pendingBackendInit=null,0)))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${e} failed`),console.warn(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(t){return console.warn(`Initialization of backend ${e} failed`),console.warn(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,s=this.readSync(t);r.disposeData(t),n.backend=e,e.move(t,s,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return Is.nextTensorId++}nextVariableId(){return Is.nextVariableId++}clone(e){const t=this.makeTensorFromDataId(e.dataId,e.shape,e.dtype),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t="float32",n={x:e},r={dtype:t};return Cs.runKernelFunc((n=>n.cast(e,t)),n,null,ht,r)}})),[],{}),t}runKernel(e,t,n,r,s){return this.runKernelFunc(null,t,null,e,n,r,s)}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let s=0;n.forEach((e=>{s+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=r-t-s-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`)}runKernelFunc(e,t,n,r,s,a,i){let o,l=[];const u=this.isTapeOn();null==r&&(r=null!=this.state.activeScope?this.state.activeScope.name:"");const c=this.state.numBytes,h=this.state.numTensors;let p;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const d=_r(r,this.backendName);let f,m;if(null!=d)p=()=>{const e=this.backend.numDataIds();f=d.kernelFunc({inputs:t,attrs:s,backend:this.backend});const n=Array.isArray(f)?f:[f];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,e,n);const o=n.map((({dataId:e,shape:t,dtype:n})=>this.makeTensorFromDataId(e,t,n)));if(u){let e=this.getTensorsForGradient(r,t,o);if(null==e){null==i&&(i=[]);const t=o.filter(((e,t)=>i[t]));e=(a||[]).slice().concat(t)}l=this.saveTensorsForBackwardMode(e)}return o};else{const t=e=>{u&&(l=e.map((e=>this.keep(this.clone(e)))))};p=()=>{const n=this.backend.numDataIds();f=this.tidy((()=>e(this.backend,t)));const s=Array.isArray(f)?f:[f];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,n,s),s}}return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(m=this.profiler.profileKernel(r,t,(()=>p())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(m),o=m.outputs):o=p()})),u&&this.addTapeNode(r,t,o,n,l,s),this.state.profiling&&this.state.activeProfile.kernels.push({name:r,bytesAdded:this.state.numBytes-c,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-h,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(t).map((e=>null!=t[e]?t[e].shape:null)),outputShapes:o.map((e=>e.shape)),kernelTimeMs:m.timeMs,extraInfo:m.extraInfo}),Array.isArray(f)?o:o[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const r=Mr(e);if(null!=r){const e=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(Z(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const i=n.filter(((e,t)=>s[t]));return a.concat(i)}return null}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=e;"string"===n&&ke(e[0])&&(s=e.map((e=>ns(e))));const a=r.write(s,t,n),i=new ls(t,n,a,this.nextTensorId());if(this.incRef(i,r),"string"===n){const e=this.state.tensorInfo.get(a),t=ve(s);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,r){const s=new ls(t,n=n||"float32",e,this.nextTensorId());return this.incRef(s,r),s}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const s=new us(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}incRef(e,t){const n=this.state.tensorInfo.has(e.dataId)?this.state.tensorInfo.get(e.dataId).refCount:0;if(this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*we(e.dtype)),this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n,refCount:0}),this.state.numBytes+=n}this.state.tensorInfo.get(e.dataId).refCount++,e instanceof us||this.track(e)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;this.state.numTensors--,"string"===e.dtype&&this.state.numStringTensors--;const t=this.state.tensorInfo.get(e.dataId);t.refCount<=1?("complex64"!==e.dtype&&(this.state.numBytes-=t.bytes),this.state.numDataBuffers--,t.backend.disposeData(e.dataId),this.state.tensorInfo.delete(e.dataId)):this.state.tensorInfo.get(e.dataId).refCount--}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,s,a){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:s},o=Mr(e);null!=o&&(r=o.gradFunc),null!=r&&(i.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],r=De(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e})),r(e.length>1?e:e[0],s,a))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=vs(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==r.id||this.track(e)}))}gradients(e,t,n,r=!1){if(Z(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));Z(s instanceof ls,(()=>"The result y returned by f() must be a tensor."));const a=function(e,t,n){const r={},s={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],i=a.inputs;for(const e in i){const n=i[e];let o=!1;for(let e=0;e<t.length;e++)if(r[n.id]){a.outputs.forEach((e=>r[e.id]=!0)),o=!0,s[a.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let t=e.length-1;t>=0;t--){const n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in r)a[r[e].id]=!0,i[n.id]=!0;break}}const o=[];for(let t=0;t<e.length;t++){const n=e[t];if(s[n.id]&&i[n.id]){const e={};for(const t in n.inputs){const s=n.inputs[t];r[s.id]&&(e[t]=s)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,o.push(t)}}return o}(this.state.activeTape,t,s);if(!r&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[s.id]=null==n?function(e){const t=Re(ne(e),"float32");return Cs.makeTensor(t,e,"float32")}(s.shape):n,function(e,t,n,r){for(let s=t.length-1;s>=0;s--){const a=t[s],i=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?i.push(n):i.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const t in a.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const s=n((()=>o[t]()));if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${s.dtype}'`);const i=a.inputs[t];if(!se(s.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${s.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=s;else{const t=e[i.id];e[i.id]=r(t,s),t.dispose()}}}}(e,a,(e=>this.tidy(e)),Ss);const r=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:s,grads:r}}))}customGrad(e){return Z(Ce(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;Z(t.every((e=>e instanceof ls)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};return t.forEach(((e,t)=>{r[t]=e})),this.runKernelFunc(((r,s)=>(n=e(...t,s),Z(n.value instanceof ls,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),Z(Ce(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value)),r,((e,r)=>{const s=n.gradFunc(e,r),a=Array.isArray(s)?s:[s];Z(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),Z(a.every((e=>e instanceof ls)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const i={};return a.forEach(((e,t)=>{i[t]=()=>e})),i}))}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}async time(e){const t=es(),n=await this.backend.time(e);return n.wallMs=es()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Ns;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function $s(){const e=Ve();if(null==e._tfengine){const t=new ze(e);e._tfengine=new Is(t)}var t;return t=e._tfengine.ENV,We=t,as=()=>e._tfengine,e._tfengine}Is.nextTensorId=0,Is.nextVariableId=0;const Cs=$s();function Ss(e,t){const n={a:e,b:t};return Cs.runKernelFunc(((n,r)=>{const s=n.add(e,t);return r([e,t]),s}),n,null,qe)}function Ts(){if("undefined"!=typeof navigator&&null!=navigator){const e=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4))}return!1}function Es(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const As=Be();function Rs(e,t){let n=e;if(xe(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||xe(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&Be().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Ds(e,r,[]),r}function Ds(e,t,n){if(n=n||[],!Array.isArray(e)&&!xe(e))return void Z(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));Z(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),Z(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const r=t.slice(1);for(let t=0;t<e.length;++t)Ds(e[t],r,n.concat(t))}function Fs(e,t,n,r){if(null!=e&&("numeric"!==e&&e!==t||"numeric"===e&&"string"===t))throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}function Os(e,t,n,r="numeric"){if(e instanceof ls)return Fs(r,e.dtype,t,n),e;let s=$e(e);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),Fs(r,s,t,n),null==e||!xe(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const a=Rs(e,s);xe(e)||Array.isArray(e)||(e=[e]);const i="string"!==s?Qr(e,s):te(e,[],!0);return Cs.makeTensor(i,a,s)}function _s(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,r)=>Os(e,`${t}[${r}]`,n)),r)}As.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),As.registerFlag("IS_BROWSER",(()=>Es())),As.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),As.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),As.registerFlag("PROD",(()=>!1)),As.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>As.getBool("DEBUG"))),As.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),As.registerFlag("IS_TEST",(()=>!1));const Ms="__op";function Ls(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=Ms;const s=(...e)=>{Cs.startScope(n);try{const t=r(...e);return Le(t)&&console.error("Cannot return a Promise inside of tidy."),Cs.endScope(t),t}catch(e){throw Cs.endScope(null),e}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const zs=Ls({complex_:function(e,t){const n=Os(e,"real","complex"),r=Os(t,"imag","complex");Q(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:n,imag:r};return Cs.runKernelFunc((e=>e.complex(n,r)),s,null,ft)}});function Bs(e,t,n,r){if(null==r&&(r=$e(e)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!xe(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){Oe(t);const e=ne(t),r=ne(n);Z(e===r,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`));for(let e=0;e<n.length;++e){const r=n[e],s=e!==n.length-1||r!==ne(t.slice(e));Z(n[e]===t[e]||!s,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return xe(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?Qr(e,r):te(e,[],!0),Cs.makeTensor(e,t,r)}function Ps(e,t,n){return Bs(e,t,Rs(e,n),n)}const Ws={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function Vs(e,t){const n=[],r=[],s=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<s.length;++a){const i=s[a],o=Array.isArray(e)?e[a].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const l={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const e=new Promise((async e=>{const t=await o.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,r=new Uint8Array(n);let s=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(a,s),s+=4,r.set(n,s),s+=n.length}e(r)}));r.push(e)}else r.push(o.data());null!=t&&(l.group=t),n.push(l)}return{data:Gs(await Promise.all(r)),specs:n}}function Us(e,t){const n={};let r,s=0;for(const a of t){const t=a.name,i=a.dtype,o=a.shape,l=ne(o);let u;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=Ws[n.dtype],c=e.slice(s,s+l*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){u=new Float32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=Ys()),u=r(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=Math.round(t*n.scale+n.min)}}s+=l*o}else if("string"===i){const t=ne(a.shape);u=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(s,s+4))[0];s+=4;const n=new Uint8Array(e.slice(s,s+t));u.push(n),s+=t}}else{const r=Ws[i],a=e.slice(s,s+l*r);if("float32"===i)u=new Float32Array(a);else if("int32"===i)u=new Int32Array(a);else if("bool"===i)u=new Uint8Array(a);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);{u=new Float32Array(a);const e=new Float32Array(u.length/2),r=new Float32Array(u.length/2);for(let t=0;t<e.length;t++)e[t]=u[2*t],r[t]=u[2*t+1];const s=Ps(e,o,"float32"),i=Ps(r,o,"float32");n[t]=zs(s,i),s.dispose(),i.dispose()}}s+=l*r}"complex64"!==i&&(n[t]=Ps(u,o,i))}return n}function Gs(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const r=new Uint8Array(t);let s=0;return n.forEach((e=>{r.set(new Uint8Array(e.buffer),s),s+=e.byteLength})),r.buffer}const Hs="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function js(e){return Hs?Buffer.byteLength(e):new Blob([e]).size}function qs(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let r=0;return e.forEach((e=>{n.set(new Uint8Array(e),r),r+=e.byteLength})),n.buffer}function Ks(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function Xs(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:js(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:js(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function Ys(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let s=0;s<r.length;s++){const i=r[s],o=e[n[i>>10]+(1023&i)]+t[i>>10];a[s]=o}return new Float32Array(s)}}class Js{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Js.instance&&(Js.instance=new Js),Js.instance}static registerSaveRouter(e){Js.getInstance().saveRouters.push(e)}static registerLoadRouter(e){Js.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return Js.getHandlers(e,"save")}static getLoadHandlers(e,t){return Js.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?Js.getInstance().loadRouters:Js.getInstance().saveRouters).forEach((t=>{const s=t(e,n);null!==s&&r.push(s)})),r}}const Zs=e=>Js.registerSaveRouter(e),Qs=e=>Js.registerLoadRouter(e),ea=e=>Js.getSaveHandlers(e),ta=(e,t)=>Js.getLoadHandlers(e,t),na="tensorflowjs",ra="models_store",sa="model_info_store";function aa(){if(!Be().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function ia(e){const t=e.result;t.createObjectStore(ra,{keyPath:"modelPath"}),t.createObjectStore(sa,{keyPath:"modelPath"})}class oa{constructor(e){if(this.indexedDB=aa(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const r=this.indexedDB.open(na,1);r.onupgradeneeded=()=>ia(r),r.onsuccess=()=>{const s=r.result;if(null==t){const t=s.transaction(ra,"readonly"),r=t.objectStore(ra).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(s.close(),n(r.error)),t.oncomplete=()=>s.close()}else{const r=Xs(t),a=s.transaction(sa,"readwrite");let i=a.objectStore(sa);const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:r});let l;o.onsuccess=()=>{l=s.transaction(ra,"readwrite");const o=l.objectStore(ra).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});o.onsuccess=()=>e({modelArtifactsInfo:r}),o.onerror=e=>{i=a.objectStore(sa);const t=i.delete(this.modelPath);t.onsuccess=()=>(s.close(),n(o.error)),t.onerror=e=>(s.close(),n(o.error))}},o.onerror=e=>(s.close(),n(o.error)),a.oncomplete=()=>{null==l?s.close():l.oncomplete=()=>s.close()}}},r.onerror=e=>n(r.error)}))}}oa.URL_SCHEME="indexeddb://";const la=e=>{return Be().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(oa.URL_SCHEME)?(t=e.slice(oa.URL_SCHEME.length),new oa(t)):null;var t};Js.registerSaveRouter(la),Js.registerLoadRouter(la);class ua{constructor(){this.indexedDB=aa()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(na,1);n.onupgradeneeded=()=>ia(n),n.onsuccess=()=>{const r=n.result,s=r.transaction(sa,"readonly"),a=s.objectStore(sa).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(r.close(),t(a.error)),s.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(oa.URL_SCHEME)?t.slice(oa.URL_SCHEME.length):t,new Promise(((t,n)=>{const r=this.indexedDB.open(na,1);r.onupgradeneeded=()=>ia(r),r.onsuccess=()=>{const s=r.result,a=s.transaction(sa,"readwrite"),i=a.objectStore(sa),o=i.get(e);let l;o.onsuccess=()=>{if(null==o.result)return s.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=i.delete(e),a=()=>{l=s.transaction(ra,"readwrite");const r=l.objectStore(ra).delete(e);r.onsuccess=()=>t(o.result.modelArtifactsInfo),r.onerror=e=>n(o.error)};r.onsuccess=a,r.onerror=e=>(a(),s.close(),n(o.error))}},o.onerror=e=>(s.close(),n(o.error)),a.oncomplete=()=>{null==l?s.close():l.oncomplete=()=>s.close()}},r.onerror=e=>n(r.error)}))}}const ca="/",ha="tensorflowjs_models",pa="info",da="model_topology",fa="weight_specs",ma="weight_data",ga="model_metadata";function ya(e){return{info:[ha,e,pa].join(ca),topology:[ha,e,da].join(ca),weightSpecs:[ha,e,fa].join(ca),weightData:[ha,e,ma].join(ca),modelMetadata:[ha,e,ga].join(ca)}}function ba(e){const t=e.split(ca);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(ca)}class xa{constructor(e){if(!Be().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=ya(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=Xs(e);try{return this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(Hs)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,r=t.length;e<r;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData)),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,userDefinedMetadata:e.userDefinedMetadata})),{modelArtifactsInfo:r}}catch(e){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const e=JSON.parse(s);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,t.userDefinedMetadata=e.userDefinedMetadata}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(Hs){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(a),t}}xa.URL_SCHEME="localstorage://";const wa=e=>{return Be().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(xa.URL_SCHEME)?(t=e.slice(xa.URL_SCHEME.length),new xa(t)):null;var t};Js.registerSaveRouter(wa),Js.registerLoadRouter(wa);class va{constructor(){Z(Be().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),Z("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=ha+ca,n=ca+pa;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);s.startsWith(t)&&s.endsWith(n)&&(e[ba(s)]=JSON.parse(this.LS.getItem(s)))}return e}async removeModel(e){var t;const n=ya(e=(t=e).startsWith(xa.URL_SCHEME)?t.slice(xa.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),r}}const ka="://";class Na{constructor(){this.managers={}}static getInstance(){return null==Na.instance&&(Na.instance=new Na),Na.instance}static registerManager(e,t){Z(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(ka)&&(e=e.slice(0,e.indexOf(ka))),Z(e.length>0,(()=>"scheme must not be an empty string."));const n=Na.getInstance();Z(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}function Ia(e){if(-1===e.indexOf(ka))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Na.getSchemes().join(",")}`);return{scheme:e.split(ka)[0],path:e.split(ka)[1]}}async function $a(e,t,n=!1){Z(e!==t,(()=>`Old path and new path are the same: '${e}'`));const r=Js.getLoadHandlers(e);Z(r.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),Z(r.length<2,(()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`));const s=r[0],a=Js.getSaveHandlers(t);Z(a.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),Z(a.length<2,(()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`));const i=a[0],o=Ia(e).scheme,l=Ia(e).path,u=o===Ia(e).scheme,c=await s.load();n&&u&&await Na.getManager(o).removeModel(l);const h=await i.save(c);return n&&!u&&await Na.getManager(o).removeModel(l),h.modelArtifactsInfo}async function Ca(){const e=Na.getSchemes(),t={};for(const n of e){const e=await Na.getManager(n).listModels();for(const r in e)t[n+ka+r]=e[r]}return t}async function Sa(e){const t=Ia(e);return Na.getManager(t.scheme).removeModel(t.path)}async function Ta(e,t){return $a(e,t,!1)}async function Ea(e,t){return $a(e,t,!0)}class Aa{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}if(Be().get("IS_BROWSER")){Be().setPlatform("browser",new Aa);try{Na.registerManager(xa.URL_SCHEME,new va)}catch(e){}try{Na.registerManager(oa.URL_SCHEME,new ua)}catch(e){}}let Ra;function Da(e,t="float32",n){return t=t||"float32",Oe(e),new ss(e,t,n)}Be().get("IS_NODE")&&Be().setPlatform("node",new class{constructor(){this.util=n(758),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=Be().global.fetch?Be().global.fetch(e,t):(null==Ra&&(Ra=n(352)),Ra(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});const Fa=Ls({cast_:function(e,t){const n=Os(e,"x","cast");if(!ye(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},s={dtype:t};return Cs.runKernelFunc((e=>e.cast(n,t)),r,null,ht,s)}}),Oa=Ls({clone_:function(e){const t=Os(e,"x","clone",null),n={x:t};return Cs.runKernelFunc((()=>Cs.makeTensorFromDataId(t.dataId,t.shape,t.dtype)),n,null,Jt)}});function _a(e,t=!1){console.log(e.toString(t))}function Ma(e){return new Promise((e=>setTimeout(e))).then(e)}$s(),is={buffer:Da,cast:Fa,clone:Oa,print:_a};class La{constructor(e){if(!Be().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(La.URL_SCHEME)&&(e=e.slice(La.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelTopologyFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n},s=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),a=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(a.download=this.modelTopologyFileName,a.href=s,await Ma((()=>a.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Ma((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:Xs(e)}}}}La.URL_SCHEME="downloads://";class za{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.files=e}async load(){const e=this.files[0],t=this.files.slice(1);return new Promise(((n,r)=>{const s=new FileReader;s.onload=s=>{const a=JSON.parse(s.target.result),i=a.modelTopology;if(null==i)return void r(new Error(`modelTopology field is missing from file ${e.name}`));0===t.length&&n({modelTopology:i});const o=a.weightsManifest;if(null==o)return void r(new Error(`weightManifest field is missing from file ${e.name}`));let l;try{l=this.checkManifestAndWeightFiles(o,t)}catch(e){return void r(e)}const u=[],c=[],h=[];o.forEach((e=>{e.paths.forEach((e=>{c.push(e),h.push(null)})),u.push(...e.weights)})),o.forEach((e=>{e.paths.forEach((e=>{const t=new FileReader;t.onload=t=>{const r=t.target.result,s=c.indexOf(e);h[s]=r,-1===h.indexOf(null)&&n({modelTopology:i,weightSpecs:u,weightData:qs(h),format:a.format,generatedBy:a.generatedBy,convertedBy:a.convertedBy,userDefinedMetadata:a.userDefinedMetadata})},t.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),t.readAsArrayBuffer(l[e])}))}))},s.onerror=t=>r(`Failed to read model topology and weights manifest JSON from file '${e.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),s.readAsText(e)}))}checkManifestAndWeightFiles(e,t){const n=[],r=t.map((e=>Ks(e.name))),s={};for(const a of e)a.paths.forEach((e=>{const a=Ks(e);if(-1!==n.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(n.push(a),-1===r.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);s[e]=t[r.indexOf(a)]}));if(n.length!==t.length)throw new Error(`Mismatch in the number of files in weights manifest (${n.length}) and the number of weight files provided (${t.length}).`);return s}}function Ba(e){return new za(e)}function Pa(e,t,n,r){!function(e){Z(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){Z(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),Z(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),Z(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(e.map((a=>(a.then((a=>{const i=n+ ++s/e.length*(r-n);return t(i),a})),a))))}async function Wa(e,t){null==t&&(t={});const n=null==t.fetchFunc?Be().platform.fetch:t.fetchFunc,r=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),s=(null==t.onProgress?await Promise.all(r):await Pa(r,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(s):await Pa(s,t.onProgress,.5,1)}async function Va(e,t="",n,r){return Ua((e=>Wa(e,{requestInit:r})))(e,t,n)}function Ua(e){return async(t,n="",r)=>{const s=t.map((()=>!1)),a={},i=null!=r?r.map((()=>!1)):[],o=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const l="quantization"in e?e.quantization.dtype:e.dtype,u=Ws[l]*ne(e.shape),c=()=>{s[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:u})};null!=r?r.forEach(((t,n)=>{t===e.name&&(c(),i[n]=!0)})):c(),o.push(e.name),n+=u}))})),!i.every((e=>e))){const e=r.filter(((e,t)=>!i[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${o.join(", ")}.`)}const l=s.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),u=[];l.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;u.push(t)}))}));const c=await e(u),h={};let p=0;return l.forEach((e=>{const n=t[e].paths.length;let r=0;for(let e=0;e<n;e++)r+=c[p+e].byteLength;const s=new ArrayBuffer(r),i=new Uint8Array(s);let o=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[p+e]);i.set(t,o),o+=t.byteLength}a[e].forEach((e=>{const t=Us(s.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)h[e]=t[e]})),p+=n})),h}}Js.registerSaveRouter((e=>Be().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(La.URL_SCHEME)?function(e="model"){return new La(e)}(e.slice(La.URL_SCHEME.length)):null));class Ga{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(Z("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=Be().platform.fetch,Z(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&Z(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,userDefinedMetadata:e.userDefinedMetadata,weightsManifest:n};t.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const s=await this.fetch(this.path,t);if(s.ok)return{modelArtifactsInfo:Xs(e),responses:[s]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${s.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,r=t.weightsManifest,s=t.generatedBy,a=t.convertedBy,i=t.format,o=t.userDefinedMetadata;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let l,u;if(null!=r){const e=await this.loadWeights(r);[l,u]=e}const c={modelTopology:n,weightSpecs:l,weightData:u,userDefinedMetadata:o,generatedBy:s,convertedBy:a,format:i},h=t.modelInitializer;return h&&(c.modelInitializer=h),c}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(t),s=this.weightPathPrefix||n,a=[];for(const t of e)a.push(...t.weights);const i=[],o=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(e)):i.push(s+e+r);return this.weightUrlConverter&&i.push(...await Promise.all(o)),[a,qs(await Wa(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Ha(e){return null!=e.match(Ga.URL_SCHEME_REGEX)}Ga.URL_SCHEME_REGEX=/^https?:\/\//;const ja=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>Ha(e))):Ha(e),n)return qa(e,t)}return null};function qa(e,t){return new Ga(e,t)}function Ka(e,t){return qa(e,t)}Js.registerSaveRouter(ja),Js.registerLoadRouter(ja);class Xa{constructor(e){this.modelArtifacts=e}async load(){return this.modelArtifacts}}class Ya{constructor(e){this.saveHandler=e}async save(e){return this.saveHandler(e)}}function Ja(e,t,n,r){return 1===arguments.length?null!=e.modelTopology||null!=e.weightSpecs?new Xa(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Xa({modelTopology:e})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Xa({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r}))}function Za(e){return new Ya(e)}const Qa=Ls({reshape_:function(e,t){const n=Os(e,"x","reshape",null),r={x:n},s={shape:t};return Cs.runKernelFunc(((e,r)=>(t=he(t,n.size),Z(n.size===ne(t),(()=>"new shape and old shape must have the same number of elements.")),r([n]),e.reshape(n,t))),r,null,Gn,s)}}),ei=Ls({matMul_:function(e,t,n=!1,r=!1){let s=Os(e,"a","matMul"),a=Os(t,"b","matMul");[s,a]=bs(s,a);const i={a:s,b:a},o={transposeA:n,transposeB:r};return Cs.runKernelFunc(((e,t)=>{t([s,a]);const i=n?s.shape[s.rank-2]:s.shape[s.rank-1],o=r?a.shape[a.rank-1]:a.shape[a.rank-2],l=n?s.shape[s.rank-1]:s.shape[s.rank-2],u=r?a.shape[a.rank-2]:a.shape[a.rank-1],c=s.shape.slice(0,-2),h=a.shape.slice(0,-2),p=ne(c),d=ne(h),f=p===d||1===p||1===d;Z(s.rank>=2&&a.rank>=2&&f,(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${c}) and (${h}).`)),Z(i===o,(()=>`Error in matMul: inner shapes (${i}) and (${o}) of Tensors with shapes ${s.shape} and ${a.shape} and transposeA=${n} and transposeB=${r} must match.`));const m=(p>d?c:h).concat([l,u]),g=Qa(s,n?[p,i,l]:[p,l,i]),y=Qa(a,r?[d,u,o]:[d,o,u]),b=e.batchMatMul(g,y,n,r);return Qa(b,m)}),i,null,lt,o)}}),ti=Ls({oneHot_:function(e,t,n=1,r=0){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const s=Os(e,"indices","oneHot","int32"),a=[...s.shape,t],i={indices:s},o={depth:t,onValue:n,offValue:r};return Cs.runKernelFunc(((e,i)=>(i([s]),Qa(e.oneHot(Qa(s,[s.size]),t,n,r),a))),i,null,On,o)}}),ni=Ls({transpose_:function(e,t){const n=Os(e,"x","transpose");if(null==t&&(t=n.shape.map(((e,t)=>t)).reverse()),Z(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`)),t.forEach((e=>{Z(e>=0&&e<n.rank,(()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+` but got ${t}`))})),n.rank<=1)return n.clone();const r={x:n},s={perm:t};return Cs.runKernelFunc((e=>e.transpose(n,t)),r,null,kr,s)}}),ri=Ls({confusionMatrix_:function(e,t,n){const r=Os(e,"labels","confusionMatrix"),s=Os(t,"predictions","confusionMatrix");Z(null==n||n>0&&Number.isInteger(n),(()=>`If provided, numClasses must be a positive integer, but got ${n}`)),Z(1===r.rank,(()=>`Expected the rank of labels to be 1, but got ${r.rank}`)),Z(1===s.rank,(()=>`Expected the rank of predictions to be 1, but got ${s.rank}`)),Z(r.shape[0]===s.shape[0],(()=>`Mismatch in the number of examples: ${r.shape[0]} vs. ${s.shape[0]}. Labels and predictions should have the same number of elements.`)),Z(n>0&&Number.isInteger(n),(()=>`numClasses is required to be a positive integer, but got ${n}`));const a=ti(Fa(r,"int32"),n),i=ti(Fa(s,"int32"),n),o=ni(a),l=ei(o,i);return Fa(l,"int32")}});function si(e,t,n){if(ee(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=Rs(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Bs(e,t,r,n)}let ai;async function ii(e,t){let n=Os(e,"img","toPixels");if(!(e instanceof ls)){const e=n;n=Fa(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[r,s]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${a}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const i=await n.data(),o="float32"===n.dtype?255:1,l=new Uint8ClampedArray(s*r*4);for(let e=0;e<r*s;++e){const t=[0,0,0,255];for(let r=0;r<a;r++){const s=i[e*a+r];if("float32"===n.dtype){if(s<0||s>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${s}.`)}else if("int32"===n.dtype&&(s<0||s>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${s}.`);1===a?(t[0]=s*o,t[1]=s*o,t[2]=s*o):t[r]=s*o}const r=4*e;l[r+0]=Math.round(t[0]),l[r+1]=Math.round(t[1]),l[r+2]=Math.round(t[2]),l[r+3]=Math.round(t[3])}if(null!=t){t.width=s,t.height=r;const e=t.getContext("2d"),n=new ImageData(l,s,r);e.putImageData(n,0,0)}return n!==e&&n.dispose(),l}const oi=Ls({fromPixels_:function(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,s=!1,a=!1,i=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)s=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else{if(null==e.getContext)throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);i=!0}if(s){const t=2;if(s&&e.readyState<t)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=_r(Tr,Cs.backendName)){const n={pixels:e},r={numChannels:t};return Cs.runKernel(Tr,n,r)}const[o,l]=s?[e.videoWidth,e.videoHeight]:[e.width,e.height];let u,c;if(i?u=e.getContext("2d").getImageData(0,0,o,l).data:r||n?u=e.data:(a||s)&&(null==ai&&(ai=document.createElement("canvas").getContext("2d")),ai.canvas.width=o,ai.canvas.height=l,ai.drawImage(e,0,0,o,l),u=ai.getImageData(0,0,o,l).data),4===t)c=new Int32Array(u);else{const e=o*l;c=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)c[n*t+e]=u[4*n+e]}return si(c,[l,o,t],"int32")}});function li(e,t){if(e.rank<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${e.rank}.`);if(t.rank<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[t.rank-1]>e.rank)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[t.rank-1]} vs. ${e.rank}`);if(0===e.size)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const n=t.shape,r=n[n.length-1];let s=1;for(let e=0;e<n.length-1;++e)s*=n[e];const a=e.shape,i=n.slice();i.pop();let o=1;for(let t=r;t<e.rank;++t)o*=a[t],i.push(a[t]);const l=[...Te(e.shape).map((e=>e/o)),1].slice(0,r);return[i,s,o,l]}function ui(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,s=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(e.length<r+(n.rank-s))throw new Error(a+` Output shape length < ${r+(n.rank-s)}`);if(n.rank!==s+e.length-r)throw new Error(a+" update.rank != "+(s+e.length-r));for(let e=0;e<s;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-s;++t)if(n.shape[t+s]!==e[t+r])throw new Error(a+` updates.shape[${t+s}] (${n.shape[t+s]}) != shape[${t+s}] (${e[t+s]})`)}function ci(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}ui(n,t,e)}function hi(e,t,n){const r=t.shape.length,s=r>1?t.shape[r-1]:1,a=n.length;let i=1;for(let e=s;e<a;++e)i*=n[e];const o=s<1?1:s;return{sliceRank:s,numUpdates:ne(t.shape)/o,sliceSize:i,strides:[...Te(n.slice(0,s)),1],outputSize:ne(n)}}function pi(e,t,n){const r=e.shape.length;Z(r===t.length,(()=>`Error in slice${r}D: Length of begin ${t} must match the rank of the array (${r}).`)),Z(r===n.length,(()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`));for(let s=0;s<r;++s)Z(t[s]+n[s]<=e.shape[s],(()=>`Error in slice${r}D: begin[${s}] + size[${s}] (${t[s]+n[s]}) would overflow input.shape[${s}] (${e.shape[s]})`))}function di(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function fi(e,t,n){const r=[];for(let s=0;s<e.length;s++)r[s]=Math.ceil((t[s]-e[s])/n[s]);return r}function mi(e,t,n,r){const s=[...e];for(let e=s.length;e<r.length;e++)s.push(1);for(let e=0;e<n;e++)0===e?s[t]=1:(s.splice(t,0,1),s.pop());return s}function gi(e,t,n){return n<=e?n:n-(t-1)}function yi(e,t){const n=[];for(let r=0;r<e;r++)n.push(t+r);return n}function bi(e,t,n,r,s,a,i,o,l){const u=e.length;let c=new Array(u),h=new Array(u),p=new Array(u);if(t.length&&n>0){const l=t[0],u=n+1;c=xi(i,l,u,r,e),h=wi(o,l,u,s,e),p=mi(a,l,u,e)}else for(let t=0;t<u;t++)c[t]=ki(i,r,a,e,t,l),h[t]=Ni(o,s,a,e,t,l),p[t]=vi(a,t,l);return{begin:c,end:h,strides:p}}function xi(e,t,n,r,s){const a=[...s],i=yi(n,t);for(let s=0;s<a.length;s++)if(i.indexOf(s)>-1)a[s]=0;else{const i=gi(t,n,s);let o=r[i];e&1<<i&&(o=0),a[s]=o}return a}function wi(e,t,n,r,s){const a=[...s],i=yi(n,t);for(let s=0;s<a.length;s++)if(i.indexOf(s)>-1)a[s]=Number.MAX_SAFE_INTEGER;else{const i=gi(t,n,s);let o=r[i];e&1<<i&&(o=Number.MAX_SAFE_INTEGER),a[s]=o}for(let e=0;e<a.length;e++){const t=s[e];a[e]<0&&(a[e]+=t),a[e]=q(0,a[e],s[e])}return a}function vi(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function ki(e,t,n,r,s,a){let i=t[s];const o=n[s]||1;(e&1<<s||a&1<<s||null==i)&&(i=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=r[s];return i<0&&(i+=l),i=q(0,i,l-1),i}function Ni(e,t,n,r,s,a){let i=t[s];const o=n[s]||1;(e&1<<s||a&1<<s||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=r[s];return i<0&&(i+=l),i=o>0?q(0,i,l):q(-1,i,l-1),i}function Ii(e,t,n){let r=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){r=e;break}for(let s=r+1;s<n.length;s++)if(t[s]>0||n[s]!==e[s])return!1;return!0}function $i(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}function Ci(e,t,n){let r;const s=e.shape.length;let a;return r="number"==typeof t?[t,...new Array(s-1).fill(0)]:t.length<s?t.concat(new Array(s-t.length).fill(0)):t.slice(),r.forEach((e=>{Z(-1!==e,(()=>"slice() does not support negative begin indexing."))})),a=null==n?new Array(s).fill(-1):"number"==typeof n?[n,...new Array(s-1).fill(-1)]:n.length<s?n.concat(new Array(s-n.length).fill(-1)):n,a=a.map(((t,n)=>t>=0?t:(Z(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-r[n]))),[r,a]}class Si{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class Ti{constructor(){this.classNameMap={}}static getMap(){return null==Ti.instance&&(Ti.instance=new Ti),Ti.instance}static register(e){Ti.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function Ei(e){Z(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),Z("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),Z(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),Ti.register(e)}const Ai=.1;function Ri(e,t,n){return null==n&&(n=Di()),Fi(e,t,((e,t)=>Li(e,t,n)))}function Di(){return 32===Cs.backend.floatPrecision()?.001:Ai}function Fi(e,t,n){let r=!0;if((xe(e)||xe(t))&&(r=!1),xe(e)&&xe(t)&&(r=!0),r){const n=e.constructor.name,r=t.constructor.name;if(n!==r)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: ${r}`)}if(Array.isArray(e)&&Array.isArray(t)){const n=Rs(e),r=Rs(t);if(!se(n,r))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${r}]`)}const s=xe(e)?e:te(e),a=xe(t)?t:te(t);if(s.length!==a.length)throw new Error(`Arrays have different lengths actual: ${s.length} vs expected: ${a.length}.\nActual:   ${s}.\nExpected: ${a}.`);for(let e=0;e<a.length;++e){const t=s[e],r=a[e];if(!n(t,r))throw new Error(`Arrays differ: actual[${e}] = ${t}, expected[${e}] = ${r}.\nActual:   ${s}.\nExpected: ${a}.`)}}function Oi(e,t){e().then((()=>t.fail()),(()=>t()))}function _i(e,t){const n="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return ke(e)||ke(e[0])||ke(t)||ke(t[0])?Fi(e,n,((e,t)=>e==t)):Fi(e,t,((e,t)=>Li(e,t,0)))}function Mi(e,t,n){if(null==n&&(n=Di()),!Li(e,t,n))throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`)}function Li(e,t,n){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}function zi(e,t,n){for(let r=0;r<e.length;r++)if(e[r]<t||e[r]>n)throw new Error(`Value out of range:${e[r]} low: ${t}, high: ${n}`)}function Bi(e,t){expect(new Float32Array(e)).toEqual(new Float32Array(t))}const Pi="2.7.0";function Wi(){Be().set("PROD",!0)}function Vi(){Be().set("DEBUG",!0)}function Ui(){Be().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function Gi(e){Be().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function Hi(){Cs.disposeVariables()}function ji(){return Cs}function qi(){return Cs.memory()}function Ki(e){return Cs.profile(e)}function Xi(e,t){return Cs.tidy(e,t)}function Yi(e){vs(e).forEach((e=>e.dispose()))}function Ji(e){return Cs.keep(e)}function Zi(e){return Cs.time(e)}function Qi(e){return Cs.setBackend(e)}function eo(){return Cs.ready()}function to(){return Cs.backendName}function no(e){Cs.removeBackend(e)}function ro(e){return Cs.findBackend(e)}function so(e){return Cs.findBackendFactory(e)}function ao(e,t,n=1){return Cs.registerBackend(e,t,n)}function io(){return Cs.backend}function oo(e,t){Be().setPlatform(e,t)}os=Gi;const lo=Ls({add_:function(e,t){let n=Os(e,"a","add"),r=Os(t,"b","add");[n,r]=bs(n,r);const s={a:n,b:r};return Cs.runKernelFunc(((e,t)=>{const s=e.add(n,r);return t([n,r]),s}),s,null,qe)}}),uo=Ls({floorDiv_:function(e,t){let n=Os(e,"a","floorDiv"),r=Os(t,"b","floorDiv");[n,r]=bs(n,r);const s={a:n,b:r};return Cs.runKernelFunc(((e,t)=>{const s=e.floorDiv(n,r);return t([n,r]),s}),s,null,Ht)}}),co=Ls({div_:function(e,t){let n=Os(e,"a","div"),r=Os(t,"b","div");if([n,r]=bs(n,r),"int32"===n.dtype&&"int32"===r.dtype)return uo(n,r);const s={a:n,b:r};return Cs.runKernelFunc(((e,t)=>{const s=e.realDivide(n,r);return t([n,r]),s}),s,null,Ot,{})}}),ho=Ls({mul_:function(e,t){let n=Os(e,"a","mul"),r=Os(t,"b","mul");[n,r]=bs(n,r);const s={a:n,b:r};return Cs.runKernelFunc(((e,t)=>{const s=e.multiply(n,r);return t([n,r]),s}),s,null,Sn)}}),po=Ls({sqrt_:function(e){const t=Os(e,"x","sqrt"),n={x:t};return Cs.runKernelFunc(((e,n)=>{const r=e.sqrt(t);return n([t]),r}),n,null,lr)}}),fo=Ls({square_:function(e){const t=Os(e,"x","square"),n=[t];return Cs.runKernelFunc(((e,n)=>(n([t]),e.square(t))),{x:t},null,"Square",{},n,[])}}),mo=Ls({zerosLike_:function(e){const t=Os(e,"x","zerosLike"),n={x:t};return Cs.runKernelFunc((e=>e.zerosLike(t)),n,null,Cr)}});function go(e){return Z(Ce(e),(()=>"The f passed in grad(f) must be a function")),(t,n)=>{const r=Os(t,"x","tf.grad",null),s=null!=n?Os(n,"dy","tf.grad"):null;return Cs.tidy((()=>{const{value:t,grads:n}=Cs.gradients((()=>e(r)),[r],s);return null!=s&&Q(t.shape,s.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),ko(n),n[0]}))}}function yo(e){return Z(Ce(e),(()=>"The f passed in grads(f) must be a function")),(t,n)=>{Z(Array.isArray(t),(()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"));const r=_s(t,"args","tf.grads",null),s=null!=n?Os(n,"dy","tf.grads"):null;return Cs.tidy((()=>{const{value:t,grads:n}=Cs.gradients((()=>e(...r)),r,s);return null!=s&&Q(t.shape,s.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),ko(n),n}))}}function bo(e){return Z(Ce(e),(()=>"The f passed in valueAndGrad(f) must be a function")),(t,n)=>{Z(t instanceof ls,(()=>"The x passed in valueAndGrad(f)(x) must be a tensor")),Z(null==n||n instanceof ls,(()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"));const{grads:r,value:s}=Cs.gradients((()=>e(t)),[t],n);return ko(r),{grad:r[0],value:s}}}function xo(e){return Z(Ce(e),(()=>"The f passed in valueAndGrads(f) must be a function")),(t,n)=>{Z(Array.isArray(t)&&t.every((e=>e instanceof ls)),(()=>"The args passed in valueAndGrads(f)(args) must be array of tensors")),Z(null==n||n instanceof ls,(()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"));const r=Cs.gradients((()=>e(...t)),t,n);return null!=n&&Q(r.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),ko(r.grads),r}}function wo(e,t){Z(Ce(e),(()=>"The f passed in variableGrads(f) must be a function")),Z(null==t||Array.isArray(t)&&t.every((e=>e instanceof us)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in Cs.registeredVariables)t.push(Cs.registeredVariables[e])}const r=n?t.filter((e=>!e.trainable)):null,s=t.length;Z((t=t.filter((e=>e.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`));const{value:a,grads:i}=Cs.gradients(e,t,null,!0);Z(i.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),Z(0===a.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`));const o={};return t.forEach(((e,t)=>{null!=i[t]&&(o[e.name]=i[t])})),null!=r&&r.forEach((e=>o[e.name]=null)),{value:a,grads:o}}function vo(e){return Cs.customGrad(e)}function ko(e){if(e.filter((e=>null==e)).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}function No(e,t){if((xe(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&xe(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Bs(e,[],[],t)}class Io extends Si{minimize(e,t=!1,n){const{value:r,grads:s}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:s[e.name]})));this.applyGradients(e)}else this.applyGradients(s);return Yi(s),t?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return wo(e,t)}dispose(){null!=this.iterations_&&Yi(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:No(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Io,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class $o extends Io{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Cs.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Cs.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:Xi((()=>mo(r).variable(!1)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:Xi((()=>mo(r).variable(!1)))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;Xi((()=>{const e=lo(ho(a,this.rho),ho(fo(s),1-this.rho)),t=ho(co(po(lo(i,this.epsilon)),po(lo(a,this.epsilon))),s),n=lo(ho(i,this.rho),ho(fo(t),1-this.rho));a.assign(e),i.assign(n);const o=lo(ho(t,-this.learningRate),r);r.assign(o)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Yi(this.accumulatedGrads.map((e=>e.variable))),Yi(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}function Co(e,t,n){const r={shape:e,value:t,dtype:n};return Cs.runKernelFunc((r=>r.fill(e,t,n)),{},null,Vt,r)}$o.className="Adadelta",Ei($o);class So extends Io{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Cs.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:Xi((()=>Co(r.shape,this.initialAccumulatorValue).variable(e)))}}const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable;Xi((()=>{const e=lo(a,fo(s));a.assign(e);const t=lo(ho(co(s,po(lo(e,Cs.backend.epsilon()))),-this.learningRate),r);r.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Yi(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}So.className="Adagrad",Ei(So);const To=Ls({pow_:function(e,t){let n=Os(e,"base","pow"),r=Os(t,"exp","pow");[n,r]=bs(n,r);const s={a:n,b:r};return Cs.runKernelFunc(((e,t)=>{const s=e.pow(n,r);return t([n,r,s]),s}),s,null,Ln)}}),Eo=Ls({sub_:function(e,t){let n=Os(e,"a","sub"),r=Os(t,"b","sub");[n,r]=bs(n,r);const s={a:n,b:r};return Cs.runKernelFunc(((e,t)=>{const s=e.subtract(n,r);return t([n,r]),s}),s,null,mr)}});class Ao extends Io{constructor(e,t,n,r=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],Xi((()=>{this.accBeta1=No(t).variable(),this.accBeta2=No(n).variable()})),null==r&&(this.epsilon=Cs.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);Xi((()=>{const n=Eo(1,this.accBeta1),r=Eo(1,this.accBeta2);t.forEach(((t,s)=>{const a=Cs.registeredVariables[t];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${t}/m`,variable:Xi((()=>mo(a).variable(!1)))}),null==this.accumulatedSecondMoment[s]&&(this.accumulatedSecondMoment[s]={originalName:`${t}/v`,variable:Xi((()=>mo(a).variable(!1)))});const i=Array.isArray(e)?e[s].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,l=this.accumulatedSecondMoment[s].variable,u=lo(ho(o,this.beta1),ho(i,1-this.beta1)),c=lo(ho(l,this.beta2),ho(fo(i),1-this.beta2)),h=co(u,n),p=co(c,r);o.assign(u),l.assign(c);const d=lo(ho(co(h,lo(po(p),this.epsilon)),-this.learningRate),a);a.assign(d)})),this.accBeta1.assign(ho(this.accBeta1,this.beta1)),this.accBeta2.assign(ho(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Yi(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&Yi(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),Xi((()=>{this.accBeta1.assign(To(this.beta1,this.iterations_+1)),this.accBeta2.assign(To(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}Ao.className="Adam",Ei(Ao);const Ro=Ls({abs_:function(e){const t=Os(e,"x","abs"),n={x:t};return Cs.runKernelFunc(((e,n)=>(n([t]),"complex64"===t.dtype?e.complexAbs(t):e.abs(t))),n,null,Ge)}});function Do(e,t){const n=e.length,r=[];for(let s=0;s<n;s++){const a=n-1-s,i=e[a]||1;(t[t.length-1-s]||1)>1&&1===i&&r.unshift(a)}return r}function Fo(e,t){const n=[];for(let r=0;r<t.length;r++){const s=e[e.length-r-1],a=t.length-r-1,i=t[a];(null==s||1===s&&i>1)&&n.unshift(a)}return n}function Oo(e,t){const n=[],r=Math.max(e.length,t.length);for(let s=0;s<r;s++){let r=e[e.length-s-1];null==r&&(r=1);let a=t[t.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);n.unshift(r)}}return n}const _o=Ls({maximum_:function(e,t){let n=Os(e,"a","maximum"),r=Os(t,"b","maximum");[n,r]=bs(n,r),"bool"===n.dtype&&(n=Fa(n,"int32"),r=Fa(r,"int32")),Oo(n.shape,r.shape);const s={a:n,b:r};return Cs.runKernelFunc(((e,t)=>{const s=e.maximum(n,r);return t([n,r]),s}),s,null,gn)}});class Mo extends Io{constructor(e,t,n,r=null,s=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],Xi((()=>{this.iteration=No(0).variable(),this.accBeta1=No(t).variable()})),null==r&&(this.epsilon=Cs.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);Xi((()=>{const n=Eo(1,this.accBeta1),r=co(-this.learningRate,lo(ho(this.iteration,this.decay),1));t.forEach(((t,s)=>{const a=Cs.registeredVariables[t];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${t}/m`,variable:mo(a).variable(!1)}),null==this.accumulatedWeightedInfNorm[s]&&(this.accumulatedWeightedInfNorm[s]={originalName:`${t}/v`,variable:mo(a).variable(!1)});const i=Array.isArray(e)?e[s].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,l=this.accumulatedWeightedInfNorm[s].variable,u=lo(ho(o,this.beta1),ho(i,1-this.beta1)),c=ho(l,this.beta2),h=Ro(i),p=_o(c,h);o.assign(u),l.assign(p);const d=lo(ho(co(r,n),co(u,lo(p,this.epsilon))),a);a.assign(d)})),this.iteration.assign(lo(this.iteration,1)),this.accBeta1.assign(ho(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Yi(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&Yi(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}Mo.className="Adamax",Ei(Mo);class Lo extends Io{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const s=Cs.registeredVariables[t];Xi((()=>{const e=lo(ho(this.c,r),s);s.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=Ji(No(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}Lo.className="SGD",Ei(Lo);class zo extends Lo{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=No(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Cs.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:Xi((()=>mo(r).variable(e)))}}const s=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&Xi((()=>{let e;const t=lo(ho(this.m,s),a);e=this.useNesterov?lo(ho(this.c,lo(a,ho(t,this.m))),r):lo(ho(this.c,t),r),s.assign(t),r.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Yi(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}zo.className="Momentum",Ei(zo);class Bo extends Io{constructor(e,t=.9,n=0,r=null,s=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,null==r&&(this.epsilon=Cs.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Cs.registeredVariables[t],s=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:Xi((()=>mo(r).variable(s)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:Xi((()=>mo(r).variable(s)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:Xi((()=>mo(r).variable(s)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;Xi((()=>{const e=lo(ho(i,this.decay),ho(fo(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,s=lo(ho(t,this.decay),ho(a,1-this.decay)),l=co(ho(a,this.learningRate),po(Eo(e,lo(fo(s),this.epsilon)))),u=lo(ho(o,this.momentum),l);i.assign(e),t.assign(s),o.assign(u);const c=Eo(r,u);r.assign(c)}else{const e=lo(ho(i,this.decay),ho(fo(a),1-this.decay)),t=lo(ho(o,this.momentum),co(ho(a,this.learningRate),po(lo(e,this.epsilon))));i.assign(e),o.assign(t);const n=Eo(r,t);r.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Yi(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&Yi(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&Yi(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}Bo.className="RMSProp",Ei(Bo);const Po=Ls({acos_:function(e){const t=Os(e,"x","acos"),n={x:t};return Cs.runKernelFunc(((e,n)=>{const r=e.acos(t);return n([t]),r}),n,null,He)}}),Wo=Ls({acosh_:function(e){const t=Os(e,"x","acosh"),n={x:t};return Cs.runKernelFunc(((e,n)=>{const r=e.acosh(t);return n([t]),r}),n,null,je)}}),Vo=Ls({addN_:function(e){Z(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),Z(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>Os(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!se(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=t;return Cs.runKernelFunc(((e,n)=>{const r=e.addN(t);return n(t),r}),r,null,Ke)}});function Uo(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function Go(e,t,n){const r=e.length+t.length,s=[];let a=0,i=0;for(let o=0;o<r;o++)-1===n.indexOf(o)?s.push(e[a++]):s.push(t[i++]);return s}function Ho(e,t){const n=[],r=e.length;for(let s=0;s<r;s++)-1===t.indexOf(s)&&n.push(e[s]);return[n,t.map((t=>e[t]))]}function jo(e,t){return Go(e,t.map((e=>1)),t)}function qo(e,t,n){Z(Uo(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function Ko(e,t){if(Uo(e,t))return null;const n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach((e=>n.push(e))),n}function Xo(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function Yo(e,t){const n=[];for(let r=t-e;r<t;++r)n.push(r);return n}const Jo=Ls({all_:function(e,t=null,n=!1){let r=Os(e,"x","all","bool");const s={x:r},a={axis:t,keepDims:n};return Cs.runKernelFunc((e=>{const s=pe(t,r.shape);let a=s;const i=Ko(a,r.rank);null!=i&&(r=ni(r,i),a=Yo(a.length,r.rank));const o=e.all(r,a);if(n){const e=jo(o.shape,s);return Qa(o,e)}return o}),s,null,Xe,a)}}),Zo=Ls({any_:function(e,t=null,n=!1){let r=Os(e,"x","any","bool");const s={x:r},a={axis:t,keepDims:n};return Cs.runKernelFunc((e=>{const s=pe(t,r.shape);let a=s;const i=Ko(a,r.rank);null!=i&&(r=ni(r,i),a=Yo(a.length,r.rank));const o=e.any(r,a);if(n){const e=jo(o.shape,s);return Qa(o,e)}return o}),s,null,Ye,a)}}),Qo=Ls({argMax_:function(e,t=0){let n=Os(e,"x","argMax");const r={x:n},s={axis:t};return Cs.runKernelFunc(((e,r)=>{r([n]);let s=pe(t,n.shape);const a=Ko(s,n.rank);return null!=a&&(n=ni(n,a),s=Yo(s.length,n.rank)),e.argMax(n,s[0])}),r,null,Je,s)}}),el=Ls({argMin_:function(e,t=0){let n=Os(e,"x","argMin");const r={x:n},s={axis:t};return Cs.runKernelFunc(((e,r)=>{r([n]),null==t&&(t=0);let s=pe(t,n.shape);const a=Ko(s,n.rank);return null!=a&&(n=ni(n,a),s=Yo(s.length,n.rank)),e.argMin(n,s[0])}),r,null,Ze,s)}}),tl=Ls({asin_:function(e){const t=Os(e,"x","asin"),n={x:t};return Cs.runKernelFunc(((e,n)=>{const r=e.asin(t);return n([t]),r}),n,null,Qe)}}),nl=Ls({asinh_:function(e){const t=Os(e,"x","asinh"),n={x:t};return Cs.runKernelFunc(((e,n)=>{const r=e.asinh(t);return n([t]),r}),n,null,et)}}),rl=Ls({atan_:function(e){const t=Os(e,"x","atan"),n={x:t};return Cs.runKernelFunc(((e,n)=>{const r=e.atan(t);return n([t]),r}),n,null,tt)}}),sl=Ls({atan2_:function(e,t){let n=Os(e,"a","atan2"),r=Os(t,"b","atan2");[n,r]=bs(n,r);const s={a:n,b:r};return Cs.runKernelFunc(((e,t)=>{const s=e.atan2(n,r);return t([n,r]),s}),s,null,rt)}}),al=Ls({atanh_:function(e){const t=Os(e,"x","atanh"),n={x:t};return Cs.runKernelFunc(((e,n)=>{const r=e.atanh(t);return n([t]),r}),n,null,nt)}});function il(e,t,n,r,s="NHWC",a){return ul(e,[...t,e[3]],n,a,r,null,null,bl(s))}function ol(e,t,n,r,s,a,i="channelsLast"){const[o,l]=pl(t);let u;if("channelsLast"===i)u=[o,l,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);u=[o,l,e[1],e[1]]}return ul(e,u,n,r,s,a,!1,i)}function ll(e,t,n,r,s,a,i="NDHWC"){const[o,l,u]=dl(t);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,l,u,e[4],e[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);h="channelsFirst",c=[o,l,u,e[1],e[1]]}return cl(e,c,n,r,s,!1,h,a)}function ul(e,t,n,r,s,a,i=!1,o="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,h,u,c]=e}const[p,d,,f]=t,[m,g]=pl(n),[y,b]=pl(r),x=fl(p,y),w=fl(d,b),{padInfo:v,outHeight:k,outWidth:N}=function(e,t,n,r,s,a,i,o,l){let u,c,h;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,s){null==r&&(r=hl(e,t,n));const a=e[1],i=ml((e[0]-t+2*r)/n+1,s);Z(ae(i),(()=>`The output # of rows (${i}) must be an integer. Change the stride and/or zero pad parameters`));const o=ml((a-t+2*r)/n+1,s);return Z(ae(o),(()=>`The output # of columns (${o}) must be an integer. Change the stride and/or zero pad parameters`)),[i,o]}([t,n],a,r,e,o);c=s[0],h=s[1]}else if("same"===e){c=Math.ceil(t/r),h=Math.ceil(n/s);const e=Math.max(0,(c-1)*r+a-t),o=Math.max(0,(h-1)*s+i-n),l=Math.floor(e/2),p=e-l,d=Math.floor(o/2);u={top:l,bottom:p,left:d,right:o-d,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/r),h=Math.ceil((n-i+1)/s);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const p="channelsLast"===l?e[1][0]:e[2][0],d="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:p,bottom:d,left:f,right:m,type:0===p&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=ml((t-a+p+d)/r+1,o),h=ml((n-i+f+m)/s+1,o)}}return{padInfo:u,outHeight:c,outWidth:h}}(s,u,c,m,g,x,w,a,o),I=i?f*h:f;let $;return"channelsFirst"===o?$=[l,I,k,N]:"channelsLast"===o&&($=[l,k,N,I]),{batchSize:l,dataFormat:o,inHeight:u,inWidth:c,inChannels:h,outHeight:k,outWidth:N,outChannels:I,padInfo:v,strideHeight:m,strideWidth:g,filterHeight:p,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:$,filterShape:t}}function cl(e,t,n,r,s,a=!1,i="channelsLast",o){let[l,u,c,h,p]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,p,u,c,h]=e}const[d,f,m,,g]=t,[y,b,x]=dl(n),[w,v,k]=dl(r),N=fl(d,w),I=fl(f,v),$=fl(m,k),{padInfo:C,outDepth:S,outHeight:T,outWidth:E}=function(e,t,n,r,s,a,i,o,l,u,c){let h,p,d,f;if("number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,r,s,a){null==s&&(s=hl(e,t,r));const i=e[1],o=e[2],l=ml((e[0]-t+2*s)/r+1,a);Z(ae(l),(()=>`The output # of depths (${l}) must be an integer. Change the stride and/or zero pad parameters`));const u=ml((i-t+2*s)/r+1,a);Z(ae(u),(()=>`The output # of rows (${u}) must be an integer. Change the stride and/or zero pad parameters`));const c=ml((o-t+2*s)/r+1,a);return Z(ae(c),(()=>`The output # of columns (${c}) must be an integer. Change the stride and/or zero pad parameters`)),[l,u,c,1]}([t,n,r,1],o,0,s,e,c);p=a[0],d=a[1],f=a[2]}else if("same"===e){p=Math.ceil(t/s),d=Math.ceil(n/a),f=Math.ceil(r/i);const e=(p-1)*s+o-t,c=(d-1)*a+l-n,m=(f-1)*i+u-r,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},p=Math.ceil((t-o+1)/s),d=Math.ceil((n-l+1)/a),f=Math.ceil((r-u+1)/i)}return{padInfo:h,outDepth:p,outHeight:d,outWidth:f}}(s,u,c,h,y,b,x,N,I,$,o),A=a?g*p:g;let R;return"channelsFirst"===i?R=[l,A,S,T,E]:"channelsLast"===i&&(R=[l,S,T,E,A]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:h,inChannels:p,outDepth:S,outHeight:T,outWidth:E,outChannels:A,padInfo:C,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:N,effectiveFilterHeight:I,effectiveFilterWidth:$,dilationDepth:w,dilationHeight:v,dilationWidth:k,inShape:e,outShape:R,filterShape:t}}function hl(e,t,n,r=1){const s=fl(t,r);return Math.floor((e[0]*(n-1)-n+s)/2)}function pl(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function dl(e){return"number"==typeof e?[e,e,e]:e}function fl(e,t){return t<=1?e:e+(e-1)*(t-1)}function ml(e,t){if(!t)return e;switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function gl(e){const[t,n,r]=pl(e);return 1===t&&1===n&&1===r}function yl(e,t){return gl(e)||gl(t)}function bl(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}const xl=Ls({avgPool_:function(e,t,n,r,s){const a=Os(e,"x","avgPool","float32");Z(yl(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let i=a,o=!1;3===a.rank&&(o=!0,i=Qa(a,[1,a.shape[0],a.shape[1],a.shape[2]])),Z(4===i.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`)),null!=s&&Z(ae(r),(()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const l={x:i},u={filterSize:t,strides:n,pad:r,dimRoundingMode:s};let c=Cs.runKernelFunc(((e,a)=>{const o=ol(i.shape,t,n,1,r,s);return a([i]),1===o.filterWidth&&1===o.filterHeight&&se(o.inShape,o.outShape)?i.clone():e.avgPool(i,o)}),l,null,st,u);return c=Fa(c,a.dtype),o?Qa(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),wl=Ls({avgPool3d_:function(e,t,n,r,s,a="NDHWC",i){null==i?i=[1,1,1]:Gi("dilations is deprecated, this field will be gone in v3.0.0.");const o=Os(e,"x","avgPool3d","float32");let l=o,u=!1;4===o.rank&&(u=!0,l=Qa(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),Z(5===l.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${l.rank}.`)),Z("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),Z(yl(n,i),(()=>`Error in avgPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`)),null!=s&&Z(ae(r),(()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const c={x:l},h={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a,dilations:i};let p=Cs.runKernelFunc(((e,o)=>{null==i&&(i=[1,1,1]);const u=ll(l.shape,t,n,i,r,s,a);return o([l]),e.avgPool3d(l,u)}),c,null,it,h);return p=Fa(p,l.dtype),u?Qa(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});function vl(e,t){const n=e[0].length;e.forEach(((e,t)=>{Z(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),Z(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const r=e[0];e.forEach(((e,s)=>{for(let a=0;a<n;a++)Z(a===t||e[a]===r[a],(()=>`Error in concat${n}D: Shape of tensors[${s}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${s}.`))}))}function kl(e,t){const n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}const Nl=Ls({concat_:function(e,t=0){Z(e.length>=1,(()=>"Pass at least one tensor to concat"));let n=_s(e,"tensors","concat");"complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)}));const r=n,s={axis:t};return Cs.runKernelFunc(((e,r)=>{const s=pe(t,n[0].shape)[0],a=kl(n.map((e=>e.shape)),s);if(0===ne(a))return Ps([],a);if(n=n.filter((e=>e.size>0)),1===n.length)return n[0];vl(n.map((e=>e.shape)),s);const i=e.concat(n,s);return r(n),i}),r,null,mt,s)}}),Il=Ls({sigmoid_:function(e){const t=Os(e,"x","sigmoid"),n={x:t};return Cs.runKernelFunc(((e,n)=>{const r=e.sigmoid(t);return n([r]),r}),n,null,ir)}}),$l=Ls({slice_:function(e,t,n){const r=Os(e,"x","slice");if(0===r.rank)throw new Error("Slicing scalar is not possible");const s={x:r},a={begin:t,size:n};return Cs.runKernelFunc(((e,s)=>{const[a,i]=Ci(r,t,n);return pi(r,a,i),s([r]),e.slice(r,a,i)}),s,null,nr,a)}}),Cl=Ls({tanh_:function(e){const t=Os(e,"x","tanh"),n={x:t};return Cs.runKernelFunc(((e,n)=>{const r=e.tanh(t);return n([r]),r}),n,null,xr)}}),Sl=Ls({basicLSTMCell_:function(e,t,n,r,s,a){const i=Os(e,"forgetBias","basicLSTMCell"),o=Os(t,"lstmKernel","basicLSTMCell"),l=Os(n,"lstmBias","basicLSTMCell"),u=Os(r,"data","basicLSTMCell"),c=Os(s,"c","basicLSTMCell"),h=Os(a,"h","basicLSTMCell"),p=Nl([u,h],1),d=ei(p,o),f=lo(d,l),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=$l(f,[0,0],y),x=$l(f,[0,g],y),w=$l(f,[0,2*g],y),v=$l(f,[0,3*g],y),k=lo(ho(Il(b),Cl(x)),ho(c,Il(lo(i,w))));return[k,ho(Cl(k),Il(v))]}}),Tl=Ls({batchToSpaceND_:function(e,t,n){const r=Os(e,"x","batchToSpaceND"),s=t.reduce(((e,t)=>e*t));Z(r.rank>=1+t.length,(()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`)),Z(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),Z(r.shape[0]%s==0,(()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${s}`));const a={x:r},i={blockShape:t,crops:n};return Cs.runKernelFunc((e=>e.batchToSpaceND(r,t,n)),a,null,ut,i)}});function El(e){return null==e?null:0===e.rank?Qa(e,[e.size]):1===e.rank?e:2===e.rank?Qa(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?Qa(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e}const Al=Ls({batchNorm_:function(e,t,n,r,s,a){null==a&&(a=.001);const i=Os(e,"x","batchNorm"),o=Os(t,"mean","batchNorm"),l=Os(n,"variance","batchNorm");let u,c;null!=s&&(u=Os(s,"scale","batchNorm")),null!=r&&(c=Os(r,"offset","batchNorm")),Z(o.rank===l.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),Z(null==c||o.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),Z(null==u||o.rank===u.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const h=function(e){let t;return t=0===e.rank||1===e.rank?Qa(e,[1,1,1,e.size]):2===e.rank?Qa(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?Qa(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(i),p={x:h,scale:u,offset:c,mean:o,variance:l},d={varianceEpsilon:a},f=Cs.runKernelFunc(((e,t)=>(t([h,o,l,u]),e.batchNorm(h,El(o),El(l),El(c),El(u),a))),p,null,jt,d);return Qa(f,i.shape)}}),Rl=Ls({batchNorm2d_:function(e,t,n,r,s,a){const i=Os(e,"x","batchNorm"),o=Os(t,"mean","batchNorm"),l=Os(n,"variance","batchNorm");let u,c;return null!=s&&(u=Os(s,"scale","batchNorm")),null!=r&&(c=Os(r,"offset","batchNorm")),Z(2===i.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`)),Z(2===o.rank||1===o.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`)),Z(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=u&&Z(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&Z(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),Al(i,o,l,c,u,a)}}),Dl=Ls({batchNorm3d_:function(e,t,n,r,s,a){const i=Os(e,"x","batchNorm"),o=Os(t,"mean","batchNorm"),l=Os(n,"variance","batchNorm");let u,c;return null!=s&&(u=Os(s,"scale","batchNorm")),null!=r&&(c=Os(r,"offset","batchNorm")),Z(3===i.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`)),Z(3===o.rank||1===o.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`)),Z(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=u&&Z(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&Z(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),Al(i,o,l,c,u,a)}}),Fl=Ls({batchNorm4d_:function(e,t,n,r,s,a){const i=Os(e,"x","batchNorm"),o=Os(t,"mean","batchNorm"),l=Os(n,"variance","batchNorm");let u,c;return null!=s&&(u=Os(s,"scale","batchNorm")),null!=r&&(c=Os(r,"offset","batchNorm")),Z(4===i.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`)),Z(4===o.rank||1===o.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`)),Z(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=u&&Z(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&Z(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),Al(i,o,l,c,u,a)}}),Ol=Ls({broadcastTo_:function(e,t){let n=Os(e,"broadcastTo","x");const r=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=Qa(n,e)}const s=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(s[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return Oa(n);const i={x:n},o={shape:t,inputShape:s};return Cs.runKernelFunc((e=>e.tile(n,a)),i,null,ct,o)}}),_l=Ls({ceil_:function(e){const t=Os(e,"x","ceil"),n={x:t};return Cs.runKernelFunc((e=>e.ceil(t)),n,null,pt)}}),Ml=Ls({clipByValue_:function(e,t,n){const r=Os(e,"x","clipByValue");Z(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`));const s={x:r},a={clipValueMin:t,clipValueMax:n};return Cs.runKernelFunc(((e,s)=>{const a=e.clip(r,t,n);return s([r]),a}),s,null,dt,a)}}),Ll=Ls({concat1d_:function(e){return Nl(e,0)}}),zl=Ls({concat2d_:function(e,t){return Nl(e,t)}}),Bl=Ls({concat3d_:function(e,t){return Nl(e,t)}}),Pl=Ls({concat4d_:function(e,t){return Nl(e,t)}}),Wl=Ls({conv2d_:function(e,t,n,r,s="NHWC",a=[1,1],i){const o=Os(e,"x","conv2d"),l=Os(t,"filter","conv2d");let u=o,c=!1;3===o.rank&&(c=!0,u=Qa(o,[1,o.shape[0],o.shape[1],o.shape[2]])),Z(4===u.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`)),Z(4===l.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`)),null!=i&&Z(ae(r),(()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`));const h="NHWC"===s?u.shape[3]:u.shape[1];Z(h===l.shape[2],(()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`)),Z(yl(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const p={x:u,filter:l},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i},f=Cs.runKernelFunc(((e,t)=>{const o=bl(s),c=ul(u.shape,l.shape,n,a,r,i,!1,o),h=e.conv2d(u,l,c);return t([u,l]),h}),p,null,gt,d);return c?Qa(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Vl=Ls({conv1d_:function(e,t,n,r,s="NWC",a=1,i){const o=Os(e,"x","conv1d"),l=Os(t,"filter","conv1d");let u=o,c=!1;2===o.rank&&(c=!0,u=Qa(o,[1,o.shape[0],o.shape[1]])),Z(3===u.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`)),Z(3===l.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`)),null!=i&&Z(ae(r),(()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`)),Z(u.shape[2]===l.shape[1],(()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`)),Z(yl(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),Z("NWC"===s,(()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`));const h=Qa(l,[1,l.shape[0],l.shape[1],l.shape[2]]),p=Qa(u,[u.shape[0],1,u.shape[1],u.shape[2]]),d=Wl(p,h,[1,n],r,"NHWC",[1,a],i);return Qa(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}}),Ul=Ls({conv2DBackpropInput_:function(e,t,n,r,s,a="NHWC",i){Z(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let o=e,l=t,u=!1;3===t.rank&&(u=!0,l=Qa(t,[1,t.shape[0],t.shape[1],t.shape[2]]),o=[1,e[0],e[1],e[2]]),Z(4===o.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`)),Z(4===l.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`)),Z(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===a?o[3]:o[1],h="NHWC"===a?l.shape[3]:l.shape[1];Z(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),Z(h===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`)),null!=i&&Z(ae(s),(()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`));const p={dy:l,filter:n},d={strides:r,pad:s,dataFormat:a,dimRoundingMode:i,inputShape:o},f=Cs.runKernelFunc(((e,t)=>{const u=bl(a),c=ul(o,n.shape,r,1,s,i,!1,u),h=e.conv2dDerInput(l,n,c);return t([l,n]),h}),p,null,bt,d);return u?Qa(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Gl=Ls({conv2dTranspose_:function(e,t,n,r,s,a){const i=Os(e,"x","conv2dTranspose"),o=Os(t,"filter","conv2dTranspose");return Ul(n,i,o,r,s,"NHWC",a)}}),Hl=Ls({conv3d_:function(e,t,n,r,s="NDHWC",a=[1,1,1]){const i=Os(e,"x","conv3d"),o=Os(t,"filter","conv3d");let l=i,u=!1;4===i.rank&&(u=!0,l=Qa(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),Z(5===l.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`)),Z(5===o.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`)),Z(l.shape[4]===o.shape[3],(()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`)),Z(yl(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),Z("NDHWC"===s,(()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`));const c={x:l,filter:o},h={strides:n,pad:r,dataFormat:s,dilations:a},p=Cs.runKernelFunc(((e,t)=>{const s=cl(l.shape,o.shape,n,a,r),i=e.conv3d(l,o,s);return t([l,o]),i}),c,null,xt,h);return u?Qa(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),jl=Ls({conv3DBackpropInput_:function(e,t,n,r,s){Z(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,i=t,o=!1;4===t.rank&&(o=!0,i=Qa(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const l=a[4],u=i.shape[4];Z(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),Z(5===i.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`)),Z(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),Z(l===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`)),Z(u===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`));const c={dy:i,filter:n},h={pad:s,strides:r,inputShape:a},p=Cs.runKernelFunc((e=>{const t=cl(a,n.shape,r,1,s);return e.conv3dDerInput(i,n,t)}),c,null,vt,h);return o?Qa(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),ql=Ls({conv3dTranspose_:function(e,t,n,r,s){const a=Os(e,"x","conv3dTranspose"),i=Os(t,"filter","conv3dTranspose");return jl(n,a,i,r,s)}}),Kl=Ls({cos_:function(e){const t=Os(e,"x","cos"),n={x:t};return Cs.runKernelFunc(((e,n)=>{const r=e.cos(t);return n([t]),r}),n,null,kt)}}),Xl=Ls({cosh_:function(e){const t=Os(e,"x","cosh"),n={x:t};return Cs.runKernelFunc(((e,n)=>{const r=e.cosh(t);return n([t]),r}),n,null,Nt)}}),Yl=Ls({cumsum_:function(e,t=0,n=!1,r=!1){const s=Os(e,"x","cumsum"),a={x:s},i={axis:t,exclusive:n,reverse:r};return Cs.runKernelFunc(((e,a)=>{const i=Ko([t],s.rank);let o=s;null!=i&&(o=ni(s,i));const l=Yo(1,s.rank)[0];let u=e.cumsum(o,l,n,r);if(a([s]),null!=i){const e=Xo(i);u=ni(u,e)}return u}),a,null,It,i)}}),Jl=Ls({depthToSpace_:function(e,t,n="NHWC"){const r=Os(e,"x","depthToSpace"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],i="NHWC"===n?r.shape[3]:r.shape[1];Z(s*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${t}  for depthToSpace with input shape\n    ${r.shape}`)),Z(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${r.shape}`)),Z(i%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${r.shape}`));const o={x:r},l={blockSize:t,dataFormat:n};return Cs.runKernelFunc((e=>e.depthToSpace(r,t,n)),o,null,Ct,l)}}),Zl=Ls({depthwiseConv2d_:function(e,t,n,r,s="NHWC",a=[1,1],i){const o=Os(e,"x","depthwiseConv2d"),l=Os(t,"filter","depthwiseConv2d");let u=o,c=!1;3===o.rank&&(c=!0,u=Qa(o,[1,o.shape[0],o.shape[1],o.shape[2]])),Z(4===u.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`)),Z(4===l.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`)),Z(u.shape[3]===l.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`)),null!=i&&Z(ae(r),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`));const h={x:u,filter:l},p={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i},d=Cs.runKernelFunc(((e,t)=>{null==a&&(a=[1,1]),Z(yl(n,a),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const s=ul(u.shape,l.shape,n,a,r,i,!0),o=e.depthwiseConv2D(u,l,s);return t([u,l]),o}),h,null,St,p);return c?Qa(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),Ql=Ls({diag_:function(e){const t=Os(e,"x","diag"),n={x:t};return Cs.runKernelFunc((n=>{const r=Qa(t,[t.size]),s=n.diag(r),a=[...e.shape,...e.shape];return Qa(s,a)}),n,null,At)}}),eu=Ls({dilation2d_:function(e,t,n,r,s=[1,1],a="NHWC"){const i=Os(e,"x","dilation2d"),o=Os(t,"filter","dilation2d");Z(3===i.rank||4===i.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`)),Z(3===o.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`)),Z("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let l=i,u=!1;3===i.rank&&(l=Qa(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=!0);const c={x:l,filter:o},h={strides:n,pad:r,dilations:s},p=Cs.runKernel(Rt,c,h);return u?Qa(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),tu=Ls({equal_:function(e,t){let n=Os(e,"a","equal"),r=Os(t,"b","equal");[n,r]=bs(n,r),Oo(n.shape,r.shape);const s={a:n,b:r};return Cs.runKernelFunc((e=>e.equal(n,r)),s,null,zt)}}),nu=Ls({where_:function(e,t,n){const r=Os(t,"a","where"),s=Os(n,"b","where"),a=Os(e,"condition","where","bool"),i=Oo(r.shape,s.shape),o=Ol(r,i),l=Ol(s,i);1===a.rank&&Z(a.shape[0]===r.shape[0],(()=>"The first dimension of `a` must match the size of `condition`.")),1!==a.rank&&Q(a.shape,l.shape,"Error in where: ");const u={condition:a,t:o,e:l};return Cs.runKernelFunc(((e,t)=>{const n=e.select(a,o,l);return t([a]),n}),u,null,er)}}),ru=Ls({divNoNan_:function(e,t){let n=Os(e,"a","div"),r=Os(t,"b","div");[n,r]=bs(n,r);const s=co(n,r),a=mo(s),i=tu(r,a);return nu(i,a,s)}}),su=Ls({dot_:function(e,t){const n=Os(e,"t1","dot"),r=Os(t,"t2","dot");Z(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(Z(s===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`)),1===n.rank&&1===r.rank){const e=Qa(n,[1,-1]),t=Qa(r,[-1,1]),s=ei(e,t);return Qa(s,[])}if(1===n.rank&&2===r.rank){const e=Qa(n,[1,-1]),t=Qa(r,[r.shape[0],r.shape[1]]),s=ei(e,t);return Qa(s,[s.size])}if(2===n.rank&&1===r.rank){const e=Qa(r,[-1,1]),t=ei(n,e);return Qa(t,[t.size])}{const e=Qa(r,[r.shape[0],r.shape[1]]);return ei(n,e)}}}),au=Ls({elu_:function(e){const t=Os(e,"x","elu"),n={x:t};return Cs.runKernelFunc(((e,n)=>{const r=e.elu(t);return n([r]),r}),n,null,_t)}}),iu=Ls({erf_:function(e){let t=Os(e,"x","erf");Z("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=Fa(t,"float32"));const n={x:t};return Cs.runKernelFunc(((e,n)=>{const r=e.erf(t);return n([t]),r}),n,null,Lt)}}),ou=Ls({exp_:function(e){const t=Os(e,"x","exp"),n={x:t};return Cs.runKernelFunc(((e,n)=>{const r=e.exp(t);return n([r]),r}),n,null,Bt)}}),lu=Ls({expandDims_:function(e,t=0){const n=Os(e,"x","expandDims",null);Z(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const r=n.shape.slice();return t<0&&(Z(-(n.rank+1)<=t,(()=>`Axis must be in the interval [${-(n.rank+1)}, ${n.rank}]`)),t=n.rank+t+1),r.splice(t,0,1),Qa(n,r)}}),uu=Ls({expm1_:function(e){const t=Os(e,"x","expm1"),n={x:t};return Cs.runKernelFunc(((e,n)=>{const r=e.expm1(t);return n([t]),r}),n,null,Pt)}}),cu=Ls({tile_:function(e,t){const n=Os(e,"x","tile",null);Z(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const r=[n],s={x:n},a={reps:t};return Cs.runKernelFunc(((e,r)=>{const s=e.tile(n,t);return r([n]),s}),s,null,wr,a,r)}}),hu=Ls({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const s=Da([e,t],r),a=e<=t?e:t;for(let e=0;e<a;++e)s.set(1,e,e);const i=Qa(s.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return cu(lu(i,0),[n[0],1,1]);if(2===n.length)return cu(lu(lu(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return cu(lu(lu(lu(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}}),pu=Ls({floor_:function(e){const t=Os(e,"x","floor"),n={x:t};return Cs.runKernelFunc((e=>e.floor(t)),n,null,Gt)}}),du=30;function fu(e){return e<=du?e:Se(e,Math.floor(Math.sqrt(e)))}function mu(e,t){let n,r=!1;for(e<=du?(n=e,r=!0):n=Se(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=Se(e,n+1);return n}function gu(e,t,n){const r=[],s=e.length;for(let a=0;a<s;a++)a!==t?r.push(e[a]):r.push(n);return r}function yu(e,t,n){const r=e.shape[n],s=[];let a=1,i=1;for(let t=0;t<n;t++)s.push(e.shape[t]),a*=e.shape[t];for(let e=0;e<t.rank;e++)s.push(t.shape[e]);for(let t=n+1;t<e.rank;t++)s.push(e.shape[t]),i*=e.shape[t];return{batchSize:a,sliceSize:i,dimSize:r,outputShape:s}}const bu=Ls({gather_:function(e,t,n=0){const r=Os(e,"x","gather"),s=Os(t,"indices","gather","int32"),a={x:r,indices:s},i={axis:n};return Cs.runKernelFunc(((e,t)=>{const a=pe(n,r.shape)[0],i=yu(r,s,a),o=e.gather(r,Qa(s,[s.size]),a);return t([r,s]),Qa(o,i.outputShape)}),a,null,qt,i)}}),xu=Ls({greater_:function(e,t){let n=Os(e,"a","greater"),r=Os(t,"b","greater");[n,r]=bs(n,r),Oo(n.shape,r.shape);const s={a:n,b:r};return Cs.runKernelFunc((e=>e.greater(n,r)),s,null,Xt)}}),wu=Ls({greaterEqual_:function(e,t){let n=Os(e,"a","greaterEqual"),r=Os(t,"b","greaterEqual");[n,r]=bs(n,r),Oo(n.shape,r.shape);const s={a:n,b:r};return Cs.runKernelFunc(((e,t)=>{const s=e.greaterEqual(n,r);return t([n,r]),s}),s,null,Yt)}}),vu=Ls({imag_:function(e){const t=Os(e,"input","imag"),n={input:t};return Cs.runKernelFunc((e=>e.imag(t)),n,null,Qt)}}),ku=Ls({isFinite_:function(e){const t=Os(e,"x","isFinite"),n={x:t};return Cs.runKernelFunc((e=>e.isFinite(t)),n,null,en)}}),Nu=Ls({isInf_:function(e){const t=Os(e,"x","isInf"),n={x:t};return Cs.runKernelFunc((e=>e.isInf(t)),n,null,tn)}}),Iu=Ls({isNaN_:function(e){const t=Os(e,"x","isNaN"),n={x:t};return Cs.runKernelFunc((e=>e.isNaN(t)),n,null,nn)}}),$u=Ls({leakyRelu_:function(e,t=.2){const n=Os(e,"x","leakyRelu");return _o(ho(No(t),n),n)}}),Cu=Ls({less_:function(e,t){let n=Os(e,"a","less"),r=Os(t,"b","less");[n,r]=bs(n,r),Oo(n.shape,r.shape);const s={a:n,b:r};return Cs.runKernelFunc((e=>e.less(n,r)),s,null,rn)}}),Su=Ls({lessEqual_:function(e,t){let n=Os(e,"a","lessEqual"),r=Os(t,"b","lessEqual");[n,r]=bs(n,r),Oo(n.shape,r.shape);const s={a:n,b:r};return Cs.runKernelFunc(((e,t)=>{const s=e.lessEqual(n,r);return t([n,r]),s}),s,null,sn)}});function Tu(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:e,stop:t,num:n};return Cs.runKernelFunc((r=>r.linspace(e,t,n)),{},null,an,r)}const Eu=Ls({localResponseNormalization_:function(e,t=5,n=1,r=1,s=.5){const a=Os(e,"x","localResponseNormalization");Z(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),Z(ae(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let i=a,o=!1;3===a.rank&&(o=!0,i=Qa(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const l={x:i},u={depthRadius:t,bias:n,alpha:r,beta:s},c=Cs.runKernelFunc(((e,a)=>{const o=e.localResponseNormalization4D(i,t,n,r,s);return a([i,o]),o}),l,null,dn,u);return o?Qa(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),Au=Ls({log_:function(e){const t=Os(e,"x","log"),n={x:t};return Cs.runKernelFunc(((e,n)=>{const r=e.log(t);return n([t]),r}),n,null,on)}}),Ru=Ls({log1p_:function(e){const t=Os(e,"x","log1p"),n={x:t};return Cs.runKernelFunc(((e,n)=>{const r=e.log1p(t);return n([t]),r}),n,null,ln)}}),Du=Ls({neg_:function(e){const t=Os(e,"x","neg"),n={x:t};return Cs.runKernelFunc((e=>e.neg(t)),n,null,Tn)}}),Fu=Ls({softplus_:function(e){const t=Os(e,"x","softplus"),n={x:t};return Cs.runKernelFunc(((e,n)=>{const r=e.softplus(t);return n([t]),r}),n,null,or)}}),Ou=Ls({logSigmoid_:function(e){const t=Os(e,"x","logSigmoid");return vo((e=>({value:Du(Fu(Du(e))),gradFunc:t=>ho(t,Il(Du(e)))})))(t)}}),_u=Ls({max_:function(e,t=null,n=!1){const r=Os(e,"x","max"),s={x:r},a={reductionIndices:t,keepDims:n};return Cs.runKernelFunc(((e,s)=>{let a=pe(t,r.shape);const i=Ko(a,r.rank);let o=r;null!=i&&(o=ni(r,i),a=Yo(a.length,o.rank));const l=e.max(o,a);null!=i&&o.dispose();let u=l;if(n){const e=jo(u.shape,pe(t,r.shape));u=Qa(u,e),l.dispose()}return s([r,u]),u}),s,null,mn,a)}}),Mu=Ls({sum_:function(e,t=null,n=!1){let r=Os(e,"x","sum");"bool"===r.dtype&&(r=Fa(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return Cs.runKernelFunc(((e,s)=>{s([r]);const a=pe(t,r.shape),i=Ko(a,r.rank);let o=a,l=r;null!=i&&(l=ni(r,i),o=Yo(o.length,r.rank));let u=e.sum(l,o);if(n){const e=jo(u.shape,a);u=Qa(u,e)}return u}),s,null,ur,a)}}),Lu=Ls({logSoftmax_:function(e,t=-1){const n=Os(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const r={logits:n},s={axis:t};return Cs.runKernelFunc(((n,r)=>{const s=_u(e,t,!0),a=Eo(e,s),i=Eo(Fa(a,"float32"),Au(Mu(ou(a),t,!0)));return r([i]),i}),r,null,pn,s)}}),zu=Ls({logSumExp_:function(e,t=null,n=!1){const r=Os(e,"x","logSumExp"),s=pe(t,r.shape),a=_u(r,s,!0),i=Eo(r,a),o=ou(i),l=Mu(o,s),u=Au(l),c=lo(Qa(a,u.shape),u);if(n){const e=jo(c.shape,s);return Qa(c,e)}return c}}),Bu=Ls({logicalAnd_:function(e,t){const n=Os(e,"a","logicalAnd","bool"),r=Os(t,"b","logicalAnd","bool");Oo(n.shape,r.shape);const s={a:n,b:r};return Cs.runKernelFunc((e=>e.logicalAnd(n,r)),s,null,un)}}),Pu=Ls({logicalNot_:function(e){const t=Os(e,"x","logicalNot","bool"),n={x:t};return Cs.runKernelFunc((e=>e.logicalNot(t)),n,null,cn)}}),Wu=Ls({logicalOr_:function(e,t){const n=Os(e,"a","logicalOr","bool"),r=Os(t,"b","logicalOr","bool");Oo(n.shape,r.shape);const s={a:n,b:r};return Cs.runKernelFunc((e=>e.logicalOr(n,r)),s,null,hn)}}),Vu=Ls({logicalXor_:function(e,t){const n=Os(e,"a","logicalXor","bool"),r=Os(t,"b","logicalXor","bool");return Oo(n.shape,r.shape),Bu(Wu(e,t),Pu(Bu(e,t)))}}),Uu=Ls({maxPool_:function(e,t,n,r,s){const a=Os(e,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=Qa(a,[1,a.shape[0],a.shape[1],a.shape[2]])),Z(4===i.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`)),Z(yl(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),null!=s&&Z(ae(r),(()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const l={x:i},u={filterSize:t,strides:n,pad:r,dimRoundingMode:s},c=Cs.runKernelFunc(((e,a)=>{const o=ol(i.shape,t,n,1,r,s);let l;return l=1===o.filterWidth&&1===o.filterHeight&&se(o.inShape,o.outShape)?i.clone():e.maxPool(i,o),a([i,l]),l}),l,null,yn,u);return o?Qa(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),Gu=Ls({maxPool3d_:function(e,t=[1,1,1],n,r,s,a="NDHWC",i){null==i?i=[1,1,1]:Gi("dilations is deprecated, this field will be gone in v3.0.0.");const o=Os(e,"x","maxPool3d");let l=o,u=!1;4===o.rank&&(u=!0,l=Qa(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),Z(5===l.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${l.rank}.`)),Z("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),Z(yl(n,i),(()=>`Error in maxPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`)),null!=s&&Z(ae(r),(()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const c={x:l},h={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a,dilations:i},p=Cs.runKernelFunc(((e,o)=>{null==i&&(i=[1,1,1]);const u=ll(l.shape,t,n,i,r,s,a),c=e.maxPool3d(l,u);return o([l,c]),c}),c,null,xn,h);return u?Qa(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),Hu=Ls({maxPoolWithArgmax_:function(e,t,n,r,s=!1){const a={x:Os(e,"x","maxPoolWithArgmax")},i={filterSize:t,strides:n,pad:r,includeBatchInIndex:s},o=Cs.runKernel(vn,a,i);return{result:o[0],indexes:o[1]}}});function ju(e,t="float32"){if("complex64"===t){const t=ju(e,"float32"),n=ju(e,"float32");return zs(t,n)}const n=De(ne(e),t);return Cs.makeTensor(n,e,t)}function qu(e,t="float32"){if("complex64"===t){const t=qu(e,"float32"),n=ju(e,"float32");return zs(t,n)}const n=Re(ne(e),t);return Cs.makeTensor(n,e,t)}const Ku=Ls({mean_:function(e,t=null,n=!1){const r=Os(e,"x","mean"),s=pe(t,r.shape),a=ne(Ho(r.shape,s)[1]),i={x:r},o={axis:t,keepDims:n},l=()=>{const e=No(a),s=e.dtype===r.dtype?r:Fa(r,e.dtype),i=co(s,e);return Mu(i,t,n)};return vo((e=>({value:Cs.runKernelFunc(l,i,null,kn,o),gradFunc:t=>{const n=e.shape.slice();s.forEach((e=>{n[e]=1}));const r=Qa(t,n);return co(ho(r,qu(e.shape,"float32")),a)}})))(r)}}),Xu=Ls({min_:function(e,t=null,n=!1){const r=Os(e,"x","min"),s={x:r},a={axis:t,keepDims:n};return Cs.runKernelFunc(((e,s)=>{const a=pe(t,r.shape);let i=a;const o=Ko(i,r.rank);let l=r;null!=o&&(l=ni(r,o),i=Yo(i.length,r.rank));const u=e.min(l,i);null!=o&&l.dispose();let c=u;if(n){const e=jo(c.shape,a);c=Qa(u,e),u.dispose()}return s([r,c]),c}),s,null,Nn,a)}}),Yu=Ls({minimum_:function(e,t){let n=Os(e,"a","minimum"),r=Os(t,"b","minimum");[n,r]=bs(n,r),"bool"===n.dtype&&(n=Fa(n,"int32"),r=Fa(r,"int32")),Oo(n.shape,r.shape);const s={a:n,b:r};return Cs.runKernelFunc(((e,t)=>{const s=e.minimum(n,r);return t([n,r]),s}),s,null,In)}}),Ju=Ls({mirrorPad_:function(e,t,n){Z("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const r=Os(e,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");Z(t.length===r.rank,(()=>`Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`));const s="reflect"===n?1:0;for(let e=0;e<r.rank;e++)Z(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Z(t[e][0]>=0&&t[e][0]<=r.shape[e]-s&&t[e][1]>=0&&t[e][1]<=r.shape[e]-s,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${r.shape[e]-s} or less than 0 for input of shape ${r.shape}`));const a={paddings:t,mode:n},i={x:r};return Cs.runKernel($n,i,a)}}),Zu=Ls({mod_:function(e,t){let n=Os(e,"a","mod"),r=Os(t,"b","mod");[n,r]=bs(n,r);const s={a:n,b:r};return Cs.runKernelFunc(((e,t)=>{const s=e.mod(n,r);return t([n,r]),s}),s,null,Cn)}}),Qu=Ls({moments_:function(e,t=null,n=!1){const r=pe(t,(e=Os(e,"x","moments")).shape),s=Ku(e,r,n);let a=s.shape;n||(a=jo(s.shape,r));const i=fo(Eo(Fa(e,"float32"),Qa(s,a)));return{mean:s,variance:Ku(i,r,n)}}}),ec=Ls({multiRNNCell_:function(e,t,n,r){const s=Os(t,"data","multiRNNCell"),a=_s(n,"c","multiRNNCell"),i=_s(r,"h","multiRNNCell");let o=s;const l=[];for(let t=0;t<e.length;t++){const n=e[t](o,a[t],i[t]);l.push(n[0]),l.push(n[1]),o=n[1]}const u=[],c=[];for(let e=0;e<l.length;e+=2)u.push(l[e]),c.push(l[e+1]);return[u,c]}}),tc=Ls({multinomial_:function(e,t,n,r=!1){const s=Os(e,"logits","multinomial"),a=s.size,i=s.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);n=n||Math.random();const o=1===i?Qa(s,[1,-1]):s,l=Cs.runKernelFunc((e=>e.multinomial(o,r,t,n)),{logits2D:o});return 1===i?Qa(l,[l.size]):l}}),nc=Ls({notEqual_:function(e,t){let n=Os(e,"a","notEqual"),r=Os(t,"b","notEqual");[n,r]=bs(n,r),Oo(n.shape,r.shape);const s={a:n,b:r};return Cs.runKernelFunc((e=>e.notEqual(n,r)),s,null,En)}}),rc=Ls({real_:function(e){const t=Os(e,"input","real"),n={input:t};return Cs.runKernelFunc((e=>e.real(t)),n,null,Wn)}}),sc=Ls({onesLike_:function(e){const t=Os(e,"x","onesLike"),n={x:t};return Cs.runKernelFunc(((e,n)=>{if("complex64"===t.dtype){const e=sc(rc(t)),n=mo(vu(t));return zs(e,n)}return e.onesLike(t)}),n,null,Fn)}}),ac=Ls({outerProduct_:function(e,t){const n=Os(e,"v1","outerProduct"),r=Os(t,"v2","outerProduct");Z(1===n.rank&&1===r.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`));const s=Qa(n,[-1,1]),a=Qa(r,[1,-1]);return ei(s,a)}}),ic=Ls({pad_:function(e,t,n=0){const r=Os(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:t,constantValue:n},a={x:r};return Cs.runKernelFunc(((e,s)=>(s([r]),e.pad(r,t,n))),a,null,_n,s)}}),oc=Ls({pad1d_:function(e,t,n=0){return Z(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),ic(e,[t],n)}}),lc=Ls({pad2d_:function(e,t,n=0){return Z(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),ic(e,t,n)}}),uc=Ls({pad3d_:function(e,t,n=0){return Z(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),ic(e,t,n)}}),cc=Ls({pad4d_:function(e,t,n=0){return Z(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),ic(e,t,n)}}),hc=Ls({spaceToBatchND_:function(e,t,n){const r=Os(e,"x","spaceToBatchND");Z(r.rank>=1+t.length,(()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`)),Z(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),Z(r.shape.reduce(((e,r,s)=>s>0&&s<=t.length?e&&(r+n[s-1][0]+n[s-1][1])%t[s-1]==0:e),!0),(()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const s={x:r},a={blockShape:t,paddings:n};return Cs.runKernelFunc((e=>e.spaceToBatchND(r,t,n)),s,null,cr,a)}}),pc=Ls({pool_:function(e,t,n,r,s,a){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const i=Os(e,"x","maxPool");let o=i,l=!1;3===i.rank&&(l=!0,o=Qa(i,[1,i.shape[0],i.shape[1],i.shape[2]])),Z(yl(a,s),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`));const u=ol(o.shape,t,a,s,r),c=[u.dilationHeight,u.dilationWidth];let h;h="same"===r?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),r=n.map((e=>Math.floor(e/2))),s=n.map(((e,t)=>e-r[t]));return n.map(((e,t)=>[r[t],s[t]]))}([u.filterHeight,u.filterWidth],c):[[0,0],[0,0]];const p=1===c[0]&&1===c[1],[d,f]=function(e,t,n){const r=n.map((e=>e[0])),s=n.map((e=>e[1])),a=e.concat(r,s),i=t.map(((e,t)=>(e-a[t]%e)%e)),o=s.map(((e,t)=>e+i[t]));return[t.map(((e,t)=>[r[t],o[t]])),t.map(((e,t)=>[0,i[t]]))]}([u.inHeight,u.inWidth],c,h),m=p?r:"valid",g=p?o:hc(o,c,d),y=("avg"===n?()=>xl(g,t,a,m):()=>Uu(g,t,a,m))(),b=p?y:Tl(y,c,f);return l?Qa(b,[b.shape[1],b.shape[2],b.shape[3]]):b}}),dc=Ls({prelu_:function(e,t){const n=Os(e,"x","prelu"),r=Os(t,"alpha","prelu"),s={x:n,alpha:r};return Cs.runKernelFunc(((e,t)=>{const s=e.prelu(n,r);return t([n,r]),s}),s,null,zn)}}),fc=Ls({prod_:function(e,t=null,n=!1){let r=Os(e,"x","prod");"bool"===r.dtype&&(r=Fa(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return Cs.runKernelFunc((e=>{const s=pe(t,r.shape),a=Ko(s,r.rank);let i=s,o=r;null!=a&&(o=ni(r,a),i=Yo(i.length,r.rank));let l=e.prod(o,i);if(n){const e=jo(l.shape,s);l=Qa(l,e)}return l}),s,null,Bn,a)}}),mc=Ls({rand_:function(e,t,n){const r=ne(e);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);s=new Uint8Array(r)}for(let e=0;e<r;e++)s[e]=t();return Cs.makeTensor(s,e,n)}});var gc=n(377);class yc{constructor(e,t,n,r,s){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=gc.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*r*i,t=this.mean+this.stdDev*s*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class bc{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;const s=r||Math.random();this.randu=gc.alea(s.toString()),this.randn=new yc(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),s=this.randu(),s<t||Math.log(s)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class xc{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=gc.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const wc=Ls({randomGamma_:function(e,t,n=1,r="float32",s){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error(`Unsupported data type ${r}`);const a=new bc(t,n,r,s),i=Da(e,r);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}}),vc=Ls({randomNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const a=new yc(t,n,r,!1,s),i=Da(e,r);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}}),kc=Ls({randomUniform_:function(e,t=0,n=1,r="float32",s){const a=Da(e,r),i=new xc(t,n,null,s);for(let e=0;e<a.values.length;e++)a.values[e]=i.nextValue();return a.toTensor()}});function Nc(e,t){ee(e);const n=Rs(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Bs(e,null,n,t)}function Ic(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const s={start:e,stop:t,step:n,dtype:r};return Cs.runKernelFunc((()=>{if(e===t||e<t&&n<0||t<e&&n>1)return ju([0],r);const s=De(Math.abs(Math.ceil((t-e)/n)),r);t<e&&1===n&&(n=-1),s[0]=e;for(let e=1;e<s.length;e++)s[e]=s[e-1]+n;return Nc(s,r)}),{},null,Pn,s)}const $c=Ls({reciprocal_:function(e){const t=Os(e,"x","reciprocal"),n={x:t};return Cs.runKernelFunc(((e,n)=>{const r=e.reciprocal(t);return n([t]),r}),n,null,Vn)}}),Cc=Ls({relu_:function(e){const t=Os(e,"x","relu"),n={x:t};return Cs.runKernelFunc(((e,n)=>(n([t]),"bool"===t.dtype?Fa(t,"int32"):e.relu(t))),n,null,Un)}}),Sc=Ls({relu6_:function(e){const t=Os(e,"x","relu6"),n={x:t};return Cs.runKernelFunc(((e,n)=>(n([t]),"bool"===t.dtype?Fa(t,"int32"):e.relu6(t))),n,null,Xn)}}),Tc=Ls({reverse_:function(e,t){const n=Os(e,"x","reverse"),r={x:n},s={dims:t};return Cs.runKernelFunc((e=>{const r=pe(t,n.shape);if(0===n.rank)return Oa(n);const s=e.reverse(n,r);return Qa(s,n.shape)}),r,null,Yn,s)}}),Ec=Ls({reverse1d_:function(e){const t=Os(e,"x","reverse");return Z(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),Tc(t,0)}}),Ac=Ls({reverse2d_:function(e,t){const n=Os(e,"x","reverse");return Z(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),Tc(n,t)}}),Rc=Ls({reverse3d_:function(e,t){const n=Os(e,"x","reverse");return Z(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),Tc(n,t)}}),Dc=Ls({reverse4d_:function(e,t){const n=Os(e,"x","reverse");return Z(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),Tc(n,t)}}),Fc=Ls({round_:function(e){const t=Os(e,"x","round"),n={x:t};return Cs.runKernelFunc((e=>e.round(t)),n,null,Jn)}}),Oc=Ls({rsqrt_:function(e){const t=Os(e,"x","rsqrt"),n={x:t};return Cs.runKernelFunc(((e,n)=>{const r=e.rsqrt(t);return n([t]),r}),n,null,Zn)}}),_c=Ls({selu_:function(e){const t=Os(e,"x","selu"),n={x:t};return Cs.runKernelFunc(((e,n)=>{const r=e.selu(t);return n([t]),r}),n,null,tr)}}),Mc=Ls({separableConv2d_:function(e,t,n,r,s,a=[1,1],i="NHWC"){const o=Os(e,"x","separableConv2d"),l=Os(t,"depthwiseFilter","separableConv2d"),u=Os(n,"pointwiseFilter","separableConv2d");let c=o,h=!1;if(3===o.rank&&(h=!0,c=Qa(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");Z(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),Z(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),Z(4===u.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),Z(1===u.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`)),Z(1===u.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`));const p=l.shape[2],d=l.shape[3];Z(u.shape[2]===p*d,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${p*d}, but got ${u.shape[2]}.`));const f=Zl(c,l,r,s,i,a),m=Wl(f,u,1,"valid",i);return h?Qa(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),Lc=async function(e,t){const n=Os(e,"x","setdiff1d"),r=Os(t,"y","setdiff1d");Z(n.dtype===r.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`)),Z(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),Z(1===r.rank,(()=>`y should be 1D tensor, but got y (${r.shape}).`));const s=await n.data(),a=await r.data(),i=new Set(a);let o=0;for(let e=0;e<s.length;e++)i.has(s[e])||o++;const l=new ss([o],n.dtype),u=new ss([o],"int32");for(let e=0,t=0;e<s.length;e++)i.has(s[e])||(l.values[t]=s[e],u.values[t]=e,t++);return[l.toTensor(),u.toTensor()]},zc=Ls({sign_:function(e){const t=Os(e,"x","sign"),n={x:t};return Cs.runKernelFunc((e=>e.sign(t)),n,null,ar)}}),Bc=Ls({sin_:function(e){const t=Os(e,"x","sin"),n={x:t};return Cs.runKernelFunc(((e,n)=>{const r=e.sin(t);return n([t]),r}),n,null,rr)}}),Pc=Ls({sinh_:function(e){const t=Os(e,"x","sinh"),n={x:t};return Cs.runKernelFunc(((e,n)=>{const r=e.sinh(t);return n([t]),r}),n,null,sr)}}),Wc=Ls({slice1d_:function(e,t,n){const r=Os(e,"x","slice1d");return Z(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),$l(r,[t],[n])}}),Vc=Ls({slice2d_:function(e,t,n){const r=Os(e,"x","slice2d");return Z(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),$l(r,t,n)}}),Uc=Ls({slice3d_:function(e,t,n){const r=Os(e,"x","slice3d");return Z(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),$l(r,t,n)}}),Gc=Ls({slice4d_:function(e,t,n){const r=Os(e,"x","slice4d");return Z(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),$l(r,t,n)}}),Hc=Ls({softmax_:function(e,t=-1){const n=Os(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const r={logits:n},s={dim:t};return Cs.runKernelFunc(((e,r)=>{const s=e.softmax(n,t);return r([s]),s}),r,null,pr,s)}}),jc=Ls({fft_:function(e){Z("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Cs.runKernelFunc((t=>{const n=e.shape[e.shape.length-1],r=e.size/n,s=e.as2D(r,n);return t.fft(s).reshape(e.shape)}),t,null,Wt)}}),qc=Ls({ifft_:function(e){Z("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Cs.runKernelFunc((t=>{const n=e.shape[e.shape.length-1],r=e.size/n,s=Qa(e,[r,n]),a=t.ifft(s);return Qa(a,e.shape)}),t,null,Zt)}}),Kc=Ls({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const s=Qa(e,[n,t]);r=qc(s)}else{const s=[n,2*(t-1)],a=Qa(rc(e),[n,t]),i=Qa(vu(e),[n,t]),o=Tc($l(a,[0,1],[n,t-2]),1),l=ho(Tc($l(i,[0,1],[n,t-2]),1),No(-1)),u=Nl([a,o],1),c=Nl([i,l],1),h=Qa(zs(u,c),[s[0],s[1]]);r=qc(h)}if(r=rc(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=Qa(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}});function Xc(e,t,n=0){let r=[];if("number"==typeof t)Z(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),r=new Array(t).fill(e.shape[n]/t);else{Z(t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0)<=1,(()=>"There should be only one negative value in split array."));const s=t.indexOf(-1);if(-1!==s){const r=t.reduce(((e,t)=>t>0?e+t:e));t[s]=e.shape[n]-r}Z(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),r=t}return r}const Yc=Ls({split_:function(e,t,n=0){const r=Os(e,"x","split"),s={x:r},a={numOrSizeSplits:t,axis:n};return Cs.runKernelFunc(((e,s)=>{const a=pe(n,r.shape)[0],i=Xc(r,t,a);return e.split(r,i,a)}),s,null,hr,a)}}),Jc=Ls({rfft_:function(e,t){Z("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const r=e.size/n;let s;if(null!=t&&t<n){const r=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,s=$l(e,r,a),n=t}else if(null!=t&&t>n){const r=e.shape.map((e=>e));r[e.shape.length-1]=t-n,s=Nl([e,ju(r)],e.shape.length-1),n=t}else s=e;const a=mo(s),i=Qa(zs(s,a),[r,n]),o=jc(i),l=Math.floor(n/2)+1,u=rc(o),c=vu(o),h=Yc(u,[l,n-l],u.shape.length-1),p=Yc(c,[l,n-l],c.shape.length-1),d=s.shape.slice();return d[s.shape.length-1]=l,Qa(zs(h[0],p[0]),d)}}),Zc=Ls({squaredDifference_:function(e,t){let n=Os(e,"a","squaredDifference"),r=Os(t,"b","squaredDifference");[n,r]=bs(n,r),Oo(n.shape,r.shape);const s={a:n,b:r};return Cs.runKernelFunc(((e,t)=>{const s=e.squaredDifference(n,r);return t([n,r]),s}),s,null,dr,{})}}),Qc=Ls({squeeze_:function(e,t){const n=Os(e,"x","squeeze");return Qa(n,de(n.shape,t).newShape)}}),eh=Ls({stack_:function(e,t=0){const n=_s(e,"tensors","stack");if(Z(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),1===n.length)return lu(n[0],t);const r=n[0].rank,s=n[0].shape,a=n[0].dtype;Z(t<=r,(()=>"Axis must be <= rank of the tensor")),n.forEach((e=>{Q(s,e.shape,"All tensors passed to stack must have matching shapes"),Z(a===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const i=n.map((e=>lu(e,t)));return Nl(i,t)}}),th=Ls({step_:function(e,t=0){const n=Os(e,"x","step"),r={x:n},s={alpha:t};return Cs.runKernelFunc((e=>e.step(n,t)),r,null,Sr,s)}}),nh=Ls({stridedSlice_:function(e,t,n,r,s=0,a=0,i=0,o=0,l=0){let u=Os(e,"x","stridedSlice");const c={x:u},h={begin:t,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};return Cs.runKernelFunc((e=>{null==r&&(r=new Array(t.length));const c=di(i);if(c.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==i&&0!==o)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==i&&0!==l)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const h=u.rank-t.length,p=di(o),d=u.shape.slice();p.forEach((e=>{t[e]=0,n[e]=1,d.splice(e,0,1)})),u=Qa(u,d);const{begin:f,end:m,strides:g}=bi(u.shape,c,h,t,n,r,s,a,i);t=f,n=m,r=g;const y=di(l);y.forEach((e=>{n[e]=t[e]+1,r[e]=1}));const b=fi(t,n,r),x=b.filter(((e,t)=>-1===y.indexOf(t)));if(r.every((e=>1===e)))return Qa($l(u,t,b),x);const w=e.stridedSlice(u,t,n,r);return Qa(w,x)}),c,null,yr,h)}}),rh=Ls({tan_:function(e){const t=Os(e,"x","tan"),n={x:t};return Cs.runKernelFunc(((e,n)=>{const r=e.tan(t);return n([t]),r}),n,null,br)}});function sh(e,t,n){if(ee(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=Rs(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Bs(e,t,r,n)}function ah(e,t,n){if(ee(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=Rs(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Bs(e,t,r,n)}function ih(e,t,n){if(ee(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=Rs(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Bs(e,t,r,n)}function oh(e,t,n){if(ee(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=Rs(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return Bs(e,t=t||r,r,n)}const lh=Ls({topk_:function(e,t=1,n=!0){const r=Os(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(t>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got ${t}`);const a={x:r},i={k:t,sorted:n},[o,l]=Cs.runKernelFunc((e=>e.topk(r,t,n)),a,null,vr,i);return{values:o,indices:l}}}),uh=Ls({truncatedNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new yc(t,n,r,!0,s),i=Da(e,r);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}}),ch=Ls({unique_:function(e,t=0){const n=Os(e,"x","unique",null);Z(n.rank>0,(()=>"The input tensor must be at least 1D"));const r={x:n},s={axis:t},[a,i]=Cs.runKernel(Nr,r,s);return{values:a,indices:i}}}),hh=Ls({unsortedSegmentSum_:function(e,t,n){const r=Os(e,"x","unsortedSegmentSum"),s=Os(t,"segmentIds","unsortedSegmentSum","int32");Z(ae(n),(()=>"numSegments must be of dtype int"));const a={x:r,segmentIds:s},i={numSegments:n};return Cs.runKernelFunc(((e,t)=>{const a=e.unsortedSegmentSum(r,s,n);return t([s]),a}),a,null,$r,i)}}),ph=Ls({unstack_:function(e,t=0){const n=Os(e,"x","unstack");Z(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`)),t<0&&(t+=n.shape.length);const r={value:n},s={axis:t};return Cs.runKernelFunc((e=>e.unstack(n,t)),r,null,Ir,s)}});function dh(e,t=!0,n,r){return Cs.makeVariable(e,t,n,r)}function fh(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const r=Da(e,"int32"),s=Da([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=r.indexToLoc(n[t]),i=t*e.length;s.values.set(a,i)}return s.toTensor()}const mh=async function(e){const t=Os(e,"condition","whereAsync","bool"),n=await t.data(),r=fh(t.shape,n);return e!==t&&t.dispose(),r},gh=async function(e,t,n){const r=Os(e,"tensor","boolMask"),s=Os(t,"mask","boolMask","bool"),a=null==n?0:n,i=s.rank,o=r.shape;Z(i>0,(()=>"mask cannot be scalar")),Q(o.slice(a,a+i),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let e=a;e<a+i;e++)l*=o[e];const u=o.slice(0,a).concat([l],o.slice(a+i)),c=Qa(r,u),h=Qa(s,[-1]),p=await mh(h),d=Qc(p,[1]),f=bu(c,d,a);return e!==r&&r.dispose(),t!==s&&s.dispose(),d.dispose(),c.dispose(),h.dispose(),p.dispose(),f},yh=Ls({equalStrict_:function(e,t){Gi("strict variants of ops have been deprecated and will be removed in future");const n=Os(e,"a","equalStrict"),r=Os(t,"b","equalStrict");return Q(n.shape,r.shape,"Error in equalStrict: "),tu(n,r)}}),bh=Ls({greaterEqualStrict_:function(e,t){Gi("strict variants of ops have been deprecated and will be removed in future");const n=Os(e,"a","greaterEqualStrict"),r=Os(t,"b","greaterEqualStrict");return Q(n.shape,r.shape,"Error in greaterEqualStrict: "),wu(n,r)}}),xh=Ls({greaterStrict_:function(e,t){Gi("strict variants of ops have been deprecated and will be removed in future");const n=Os(e,"a","greaterStrict"),r=Os(t,"b","greaterStrict");return Q(n.shape,r.shape,"Error in greaterStrict: "),xu(n,r)}}),wh=Ls({lessEqualStrict_:function(e,t){Gi("strict variants of ops have been deprecated and will be removed in future");const n=Os(e,"a","lessEqualStrict"),r=Os(t,"b","lessEqualStrict");return Q(n.shape,r.shape,"Error in lessEqualStrict: "),Su(n,r)}}),vh=Ls({lessStrict_:function(e,t){Gi("strict variants of ops have been deprecated and will be removed in future");const n=Os(e,"a","lessStrict"),r=Os(t,"b","lessStrict");return Q(n.shape,r.shape,"Error in lessStrict: "),Cu(n,r)}}),kh=Ls({notEqualStrict_:function(e,t){Gi("strict variants of ops have been deprecated and will be removed in future");const n=Os(e,"a","notEqualStrict"),r=Os(t,"b","notEqualStrict");return Q(n.shape,r.shape,"Error in notEqualStrict: "),nc(n,r)}}),Nh=Ls({addStrict_:function(e,t){Gi("strict variants of ops have been deprecated and will be removed in future");const n=Os(e,"a","addStrict"),r=Os(t,"b","addStrict");return Q(n.shape,r.shape,"Error in addStrict: "),lo(n,r)}}),Ih=Ls({divStrict_:function(e,t){Gi("strict variants of ops have been deprecated and will be removed in future");const n=Os(e,"a","div"),r=Os(t,"b","div");return Q(n.shape,r.shape,"Error in divideStrict: "),co(n,r)}}),$h=Ls({maximumStrict_:function(e,t){Gi("strict variants of ops have been deprecated and will be removed in future");const n=Os(e,"a","maximumStrict"),r=Os(t,"b","maximumStrict");return Q(n.shape,r.shape,"Error in maximumStrict: "),_o(n,r)}}),Ch=Ls({minimumStrict_:function(e,t){Gi("strict variants of ops have been deprecated and will be removed in future");const n=Os(e,"a","minimumStrict"),r=Os(t,"b","minimumStrict");return Q(n.shape,r.shape,"Error in minimumStrict: "),Yu(n,r)}}),Sh=Ls({modStrict_:function(e,t){Gi("strict variants of ops have been deprecated and will be removed in future");const n=Os(e,"a","modStrict"),r=Os(t,"b","modStrict");return Q(n.shape,r.shape,"Error in modStrict: "),Zu(n,r)}}),Th=Ls({mulStrict_:function(e,t){Gi("strict variants of ops have been deprecated and will be removed in future");const n=Os(e,"a","mul"),r=Os(t,"b","mul");return Q(n.shape,r.shape,"Error in multiplyStrict: "),ho(n,r)}}),Eh=Ls({powStrict_:function(e,t){return Gi("strict variants of ops have been deprecated and will be removed in future"),Q(e.shape,t.shape,"Error in powStrict: "),To(e,t)}}),Ah=Ls({squaredDifferenceStrict_:function(e,t){Gi("strict variants of ops have been deprecated and will be removed in future");const n=Os(e,"a","squaredDifferenceStrict"),r=Os(t,"b","squaredDifferenceStrict");return Q(n.shape,r.shape,"Error in squaredDifferenceStrict: "),Zc(n,r)}}),Rh=Ls({subStrict_:function(e,t){Gi("strict variants of ops have been deprecated and will be removed in future");const n=Os(e,"a","subStrict"),r=Os(t,"b","subStrict");return Q(n.shape,r.shape,"Error in subStrict: "),Eo(n,r)}});function Dh(e,t,n=null){if(0===e.rank)return Ro(e);if(1!==e.rank&&null===n)return Dh(Qa(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return Mu(Ro(e),n);if(t===1/0)return _u(Ro(e),n);if(t===-1/0)return Xu(Ro(e),n);if("euclidean"===t||2===t)return po(Mu(To(Ro(e),No(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return _u(Mu(Ro(e),n[0]),n[1]-1);if(t===1/0)return _u(Mu(Ro(e),n[1]),n[0]);if(t===-1/0)return Xu(Mu(Ro(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return po(Mu(fo(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const Fh=Ls({norm_:function(e,t="euclidean",n=null,r=!1){const s=Dh(e=Os(e,"x","norm"),t,n);let a=s.shape;if(r){const t=pe(n,e.shape);a=jo(s.shape,t)}return Qa(s,a)}}),Oh=Ls({movingAverage_:function(e,t,n,r,s=!0){const a=Os(e,"v","movingAverage"),i=Os(t,"x","movingAverage"),o=Os(n,"decay","movingAverage");xs(a,i),Z(se(a.shape,i.shape),(()=>"Shape mismatch in v and x"));const l=No(1),u=Eo(l,o);let c=ho(Eo(i,a),u);if(s){Z(null!=r,(()=>"When using zeroDebias: true, step is required."));const e=Os(r,"step","movingAverage");c=co(c,Eo(l,To(o,e)))}return lo(a,c)}}),_h=Ls({scatterND_:function(e,t,n){const r=Os(e,"indices","scatterND","int32"),s=Os(t,"updates","scatterND");ci(s,r,n);const a={indices:r,updates:s},i={shape:n};return Cs.runKernelFunc((e=>e.scatterND(r,s,n)),a,null,Qn,i)}}),Mh=Ls({sparseToDense_:function(e,t,n,r=0){const s=Os(e,"sparseIndices","sparseToDense","int32"),a=Os(t,"sparseValues","sparseToDense"),i=Os(r,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const s=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const i=t.size;if(0!==t.rank&&(1!==t.rank||i!==s))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${s}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,i);const o={sparseIndices:s,sparseValues:a,defaultValue:i},l={outputShape:n};return Cs.runKernelFunc((e=>e.sparseToDense(s,a,n,i)),o,null,gr,l)}}),Lh=Ls({gatherND_:function(e,t){const n=Os(t,"indices","gatherND","int32"),r=Os(e,"x","gatherND"),s={params:r,indices:n};return Cs.runKernelFunc((e=>e.gatherND(r,n)),s,null,Kt)}}),zh=Ls({dropout_:function(e,t,n,r){const s=Os(e,"x","dropout");if(Z("float32"===s.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`)),Z(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof ls?s.clone():s;const a=function(e,t){if(null==t)return e.shape.slice();if(se(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}(s,n),i=1-t,o=co(pu(lo(kc(a,0,1,"float32",r),i)),i);return ho(s,o)}});function Bh(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function Ph(e,t,n){const r=1-e%2,s=new Float32Array(e);for(let a=0;a<e;++a){const i=2*Math.PI*a/(e+r-1);s[a]=t-n*Math.cos(i)}return Nc(s,"float32")}const Wh=async function(e,t,n=1){const r=Os(e,"predictions","inTopK"),s=Os(t,"targets","inTopK");Z(r.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`)),Z(r.rank-1===s.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`)),Q(r.shape.slice(0,r.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=r.shape[r.shape.length-1];Z(n>0&&n<=a,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`));const i=await r.data(),o=await s.data(),[l,u]=[i.length/a,a],c=fe("bool",l);for(let e=0;e<l;e++){const t=e*u,r=i.subarray(t,t+u),s=[];for(let e=0;e<r.length;e++)s.push({value:r[e],index:e});s.sort(((e,t)=>t.value-e.value)),c[e]=0;for(let t=0;t<n;t++)if(s[t].index===o[e]){c[e]=1;break}}return e!==r&&r.dispose(),t!==s&&s.dispose(),Ps(c,s.shape,"bool")},Vh=Ls({conv2DBackpropFilter_:function(e,t,n,r,s,a="NHWC",i){let o=e;3===e.rank&&(o=Qa(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=Qa(t,[1,t.shape[0],t.shape[1],t.shape[2]])),Z(4===o.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`)),Z(4===l.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`)),Z(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const u="NHWC"===a?o.shape[3]:o.shape[1],c="NHWC"===a?l.shape[3]:l.shape[1];Z(u===n[2],(()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`)),Z(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),null!=i&&Z(ae(s),(()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`));const h={x:o,dy:l},p={strides:r,pad:s,dataFormat:a,dimRoundingMode:i,filterShape:n};return Cs.runKernelFunc((e=>{const t=bl(a),u=ul(o.shape,n,r,1,s,i,!1,t);return e.conv2dDerFilter(o,l,u)}),h,null,yt,p)}});function Uh(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return ho(e,th(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function Gh(e,t){let n=t;const r=Fo(e.shape,t.shape);return r.length>0&&(n=Mu(n,r)),Qa(n,e.shape)}function Hh(e,t,n){if("linear"===t)return e;if("relu"===t)return Cc(e);if("elu"===t)return au(e);if("relu6"===t)return Sc(e);if("prelu"===t)return dc(e,n);throw new Error(`Unknown fused activation ${t}.`)}const jh=(e,t)=>!(e>0)||"linear"===t,qh=Ls({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u}){if(l=l||"linear",!1===jh(Cs.state.gradientDepth,l)){let c=Wl(e,t,n,r,s,a,i);return null!=o&&(c=lo(c,o)),Hh(c,l,u)}const c=Os(e,"x","conv2d"),h=Os(t,"filter","conv2d");let p=c,d=!1;3===c.rank&&(d=!0,p=Qa(c,[1,c.shape[0],c.shape[1],c.shape[2]])),Z(4===p.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${p.rank}.`)),Z(4===h.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${h.rank}.`)),null!=i&&Z(ae(r),(()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`)),Z(p.shape[3]===h.shape[2],(()=>`Error in conv2d: depth of input (${p.shape[3]}) must match input depth for filter ${h.shape[2]}.`)),Z(yl(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),Z("NHWC"===s,(()=>`Error in conv2d: got dataFormat of ${s} but only NHWC is currently supported.`));const f=ul(p.shape,h.shape,n,a,r,i);let m,g;null!=o&&(m=Os(o,"bias","fused conv2d"),[m]=bs(m,c),Oo(f.outShape,m.shape)),null!=u&&(g=Os(u,"prelu weights","fused conv2d"));const y=(e,t)=>{const[s,i,o,u]=t,c=Uh(e,o,l);Z(gl(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const h=[Ul(i.shape,c,s,n,r),Vh(i,c,s.shape,n,r)];if(null!=u){const e=Gh(u,c);h.push(e)}return h},b=e=>e.fusedConv2d({input:p,filter:h,convInfo:f,bias:m,activation:l,preluActivationWeights:g}),x={x:p,filter:h,bias:m,preluActivationWeights:g},w={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:l};return null==o?vo(((e,t,n)=>{let r=Cs.runKernelFunc(b,x,null,Rr,w);return n([t,e,r]),d&&(r=Qa(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:y}}))(p,h):vo(((e,t,n,r)=>{let s=Cs.runKernelFunc(b,x,null,Rr,w);return r([t,e,s,n]),d&&(s=Qa(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:y}}))(p,h,m)}}),Kh=Ls({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,s,a=[1,1],i){let o=e;3===e.rank&&(o=Qa(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=Qa(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={x:o,dy:l},c={strides:r,pad:s,dimRoundingMode:i,dilations:a,filterShape:n};return Cs.runKernelFunc((t=>{const u=ul(e.shape,n,r,a,s,i,!0);return t.depthwiseConv2DDerFilter(o,l,u)}),u,null,Tt,c)}}),Xh=Ls({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,s,a=[1,1],i){let o=t,l=!1;3===t.rank&&(l=!0,o=Qa(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={dy:o,filter:n},c={strides:r,pad:s,dimRoundingMode:i,dilations:a,inputShape:e},h=Cs.runKernelFunc((t=>{const l=ul(e,n.shape,r,a,s,i,!0);return t.depthwiseConv2DDerInput(o,n,l)}),u,null,Et,c);return l?Qa(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),Yh=Ls({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u}){if(!1===jh(Cs.state.gradientDepth,l)){let c=Zl(e,t,n,r,s,a,i);return null!=o&&(c=lo(c,o)),Hh(c,l,u)}const c=Os(e,"x","depthwiseConv2d"),h=Os(t,"filter","depthwiseConv2d");let p=c,d=!1;3===c.rank&&(d=!0,p=Qa(c,[1,c.shape[0],c.shape[1],c.shape[2]])),Z(4===p.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${p.rank}.`)),Z(4===h.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`)),Z(p.shape[3]===h.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${p.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`)),null==a&&(a=[1,1]),Z(yl(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),null!=i&&Z(ae(r),(()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${i} but got pad ${r}.`));const f=ul(p.shape,h.shape,n,a,r,i,!0);let m,g;null!=o&&(m=Os(o,"bias","fused conv2d"),[m]=bs(m,c),Oo(f.outShape,m.shape)),null!=u&&(g=Os(u,"prelu weights","fused depthwiseConv2d"));const y=(e,t)=>{Z(gl(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[s,o,u,c]=t,h=Uh(e,u,l),p=Xh(o.shape,h,s,n,r,a,i),d=Kh(o,h,s.shape,n,r,a,i);return null!=c?[p,d,Gh(m,h)]:[p,d]},b=e=>e.fusedDepthwiseConv2D({input:p,filter:h,convInfo:f,bias:m,activation:l,preluActivationWeights:g}),x={x:p,filter:h,bias:m,preluActivationWeights:g},w={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:l};return null==o?vo(((e,t,n)=>{let r=Cs.runKernelFunc(b,x,null,Dr,w);return n([t,e,r]),d&&(r=Qa(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:y}}))(p,h):vo(((e,t,n,r)=>{let s=Cs.runKernelFunc(b,x,null,Dr,w);return r([t,e,s,n]),d&&(s=Qa(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:y}}))(p,h,m)}}),Jh=Ls({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:i}){if(!1===jh(Cs.state.gradientDepth,a)){let o=ei(e,t,n,r);return null!=s&&(o=lo(o,s)),Hh(o,a,i)}let o=Os(e,"a","fused matMul"),l=Os(t,"b","fused matMul");[o,l]=bs(o,l);const u=n?o.shape[o.rank-2]:o.shape[o.rank-1],c=r?l.shape[l.rank-1]:l.shape[l.rank-2],h=n?o.shape[o.rank-1]:o.shape[o.rank-2],p=r?l.shape[l.rank-2]:l.shape[l.rank-1],d=o.shape.slice(0,-2),f=l.shape.slice(0,-2),m=ne(d),g=ne(f);Z(o.rank>=2&&l.rank>=2&&o.rank===l.rank,(()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${o.rank} and ${l.rank}.`)),Z(se(d,f),(()=>`Error in fused matMul: outer dimensions (${d}) and (${f}) of Tensors with shapes ${o.shape} and ${l.shape} must match.`)),Z(u===c,(()=>`Error in fused matMul: inner shapes (${u}) and (${c}) of Tensors with shapes ${o.shape} and ${l.shape} and transposeA=${n} and transposeB=${r} must match.`));const y=o.shape.slice(0,-2).concat([h,p]),b=Qa(o,n?[m,u,h]:[m,h,u]),x=Qa(l,r?[g,p,c]:[g,c,p]);let w,v;null!=s&&(w=Os(s,"bias","fused matMul"),[w]=bs(w,o),Oo(y,w.shape)),null!=i&&(v=Os(i,"prelu weights","fused matMul"));const k=(e,t)=>{const[i,o,l,u]=t,c=Uh(Qa(e,l.shape),l,a);let h,p;return n||r?!n&&r?(h=ei(c,o,!1,!1),p=ei(c,i,!0,!1)):n&&!r?(h=ei(o,c,!1,!0),p=ei(i,c,!1,!1)):(h=ei(o,c,!0,!0),p=ei(c,i,!0,!0)):(h=ei(c,o,!1,!0),p=ei(i,c,!0,!1)),null!=s?[h,p,Gh(u,c)]:[h,p]},N=e=>e.fusedBatchMatMul({a:b,b:x,transposeA:n,transposeB:r,bias:w,activation:a,preluActivationWeights:v}),I={a:b,b:x,bias:w,preluActivationWeights:v},$={transposeA:n,transposeB:r,activation:a};return null==s?vo(((e,t,n)=>{const r=Cs.runKernelFunc(N,I,null,Ar,$);return n([e,t,r]),{value:Qa(r,y),gradFunc:k}}))(b,x):vo(((e,t,n,r)=>{const s=Cs.runKernelFunc(N,I,null,Ar,$);return r([e,t,s,n]),{value:Qa(s,y),gradFunc:k}}))(b,x,w)}}),Zh=Ls({hammingWindow_:function(e){return Ph(e,.54,.46)}}),Qh=Ls({hannWindow_:function(e){return Ph(e,.5,.5)}}),ep=Ls({frame_:function(e,t,n,r=!1,s=0){let a=0;const i=[];for(;a+t<=e.size;)i.push($l(e,a,t)),a+=n;if(r)for(;a<e.size;){const r=a+t-e.size,o=Nl([$l(e,a,t-r),Co([r],s)]);i.push(o),a+=n}return 0===i.length?sh([],[0,t]):Qa(Nl(i),[i.length,t])}}),tp=Ls({stft_:function(e,t,n,r,s=Qh){null==r&&(r=Bh(t));const a=ep(e,t,n),i=ho(a,s(t)),o=[];for(let e=0;e<a.shape[0];e++)o.push(Jc($l(i,[e,0],[1,t]),r));return Nl(o)}}),np=Ls({cropAndResize_:function(e,t,n,r,s,a){const i=Os(e,"image","cropAndResize"),o=Os(t,"boxes","cropAndResize","float32"),l=Os(n,"boxInd","cropAndResize","int32");s=s||"bilinear",a=a||0;const u=o.shape[0];Z(4===i.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`)),Z(2===o.rank&&4===o.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`)),Z(1===l.rank&&l.shape[0]===u,(()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`)),Z(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),Z(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),Z("bilinear"===s||"nearest"===s,(()=>`method must be bilinear or nearest, but was ${s}`));const c={image:i,boxes:o,boxInd:l},h={method:s,extrapolationValue:a,cropSize:r};return Cs.runKernelFunc((e=>e.cropAndResize(i,o,l,r,s,a)),c,null,$t,h)}}),rp=Ls({flipLeftRight_:function(e){const t=Os(e,"image","flipLeftRight","float32");Z(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return Cs.runKernel(Ut,n,{})}}),sp=Ls({rotateWithOffset_:function(e,t,n=0,r=.5){const s=Os(e,"image","rotateWithOffset","float32");Z(4===s.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`));const a={image:s},i={radians:t,fillValue:n,center:r};return Cs.runKernel(Er,a,i)}});function ap(e,t,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=e.shape[0];return n=Math.min(n,i),Z(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),Z(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),Z(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),Z(1===t.rank,(()=>"scores must be a 1D tensor")),Z(t.shape[0]===i,(()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`)),Z(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const ip=Ls({nonMaxSuppression_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Os(e,"boxes","nonMaxSuppression"),i=Os(t,"scores","nonMaxSuppression"),o=ap(a,i,n,r,s);n=o.maxOutputSize,r=o.iouThreshold,s=o.scoreThreshold;const l={maxOutputSize:n,iouThreshold:r,scoreThreshold:s};return Cs.runKernelFunc((e=>e.nonMaxSuppression(a,i,n,r,s)),{boxes:a,scores:i},null,An,l)}});function op(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,s=e.length,a=0,i=!1;for(;r<s;){a=r+(s-r>>>1);const o=n(t,e[a]);o>0?r=a+1:(s=a,i=!o)}return i?r:-r-1}(e,t,n||lp)}(e,t,n),s=r<0?-(r+1):r;e.splice(s,0,t)}function lp(e,t){return e>t?1:e<t?-1:0}function up(e,t,n,r,s){return pp(e,t,n,r,s,0).selectedIndices}function cp(e,t,n,r,s,a){return pp(e,t,n,r,s,0,!1,a,!0)}function hp(e,t,n,r,s,a){return pp(e,t,n,r,s,a,!0)}function pp(e,t,n,r,s,a,i=!1,o=!1,l=!1){const u=[];for(let e=0;e<t.length;e++)t[e]>s&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort(mp);const c=a>0?-.5/a:0,h=[],p=[];for(;h.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=t;if(n<s)break;let o=!1;for(let n=h.length-1;n>=i;--n){const i=dp(e,a,h[n]);if(i>=r){o=!0;break}if(t.score=t.score*fp(r,c,i),t.score<=s)break}t.suppressBeginIndex=h.length,o||(t.score===n?(h.push(a),p.push(t.score)):t.score>s&&op(u,t,mp))}const d=h.length,f=n-d;o&&f>0&&(h.push(...new Array(f).fill(0)),p.push(...new Array(f).fill(0)));const m={selectedIndices:Nc(h,"int32")};return i&&(m.selectedScores=Nc(p,"float32")),l&&(m.validOutputs=No(d,"int32")),m}function dp(e,t,n){const r=e.subarray(4*t,4*t+4),s=e.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),i=Math.min(r[1],r[3]),o=Math.max(r[0],r[2]),l=Math.max(r[1],r[3]),u=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),h=Math.max(s[0],s[2]),p=Math.max(s[1],s[3]),d=(o-a)*(l-i),f=(h-u)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(a,u),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(l,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function fp(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function mp(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const gp=Ls({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=Os(e,"boxes","nonMaxSuppression"),o=Os(t,"scores","nonMaxSuppression"),l=ap(i,o,n,r,s,a),u={boxes:i,scores:o},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:r=l.iouThreshold,scoreThreshold:s=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma},h=Cs.runKernel(Dn,u,c);return{selectedIndices:h[0],selectedScores:h[1]}}}),yp=Ls({nonMaxSuppressionPadded_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=Os(e,"boxes","nonMaxSuppression"),o=Os(t,"scores","nonMaxSuppression"),l=ap(i,o,n,r,s,null),u={boxes:i,scores:o},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a},h=Cs.runKernel(Rn,u,c);return{selectedIndices:h[0],validOutputs:h[1]}}}),bp=Ls({resizeBilinear_:function(e,t,n=!1){const r=Os(e,"images","resizeBilinear");Z(3===r.rank||4===r.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`)),Z(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`));let s=r,a=!1;3===r.rank&&(a=!0,s=Qa(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[i,o]=t,l={images:s},u={alignCorners:n,size:t},c=Cs.runKernelFunc(((e,t)=>(t([s]),e.resizeBilinear(s,i,o,n))),l,null,qn,u);return a?Qa(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),xp=Ls({resizeNearestNeighbor_:function(e,t,n=!1){const r=Os(e,"images","resizeNearestNeighbor");Z(3===r.rank||4===r.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`)),Z(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),Z("float32"===r.dtype||"int32"===r.dtype,(()=>"`images` must have `int32` or `float32` as dtype"));let s=r,a=!1;3===r.rank&&(a=!0,s=Qa(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[i,o]=t,l={images:s},u={alignCorners:n,size:t},c=Cs.runKernelFunc(((e,t)=>(t([s]),e.resizeNearestNeighbor(s,i,o,n))),l,null,Hn,u);return a?Qa(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),wp=Ls({bandPart_:function(e,t,n){Z(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),Z(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const r=Os(e,"a","bandPart");Z(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const s=r.shape,[a,i]=r.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);t<0&&(t=a),n<0&&(n=i);const o=Qa(Ic(0,a,1,"int32"),[-1,1]),l=Ic(0,i,1,"int32"),u=Eo(o,l),c=Bu(Su(u,No(+t,"int32")),wu(u,No(-n,"int32"))),h=ju([a,i],r.dtype);return Qa(eh(ph(Qa(r,[-1,a,i])).map((e=>nu(c,e,h)))),s)}}),vp=Ls({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,Z(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)Z(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=Yc(e,e.shape[0],0).map((e=>Qc(e,[0])));Z(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],r=e;for(let t=0;t<e.length;++t)n.push(Cs.tidy((()=>{let e=r[t];if(t>0)for(let r=0;r<t;++r){const t=ho(Mu(ho(n[r],e)),n[r]);e=Eo(e,t)}return co(e,Fh(e,"euclidean"))})));return t?eh(n,0):n}});function kp(e,t=!1){return Cs.tidy((()=>{Z(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],r=e.shape[1];let s=hu(n),a=Oa(e);const i=sh([[1]],[1,1]);let o=Oa(i);const l=n>=r?r:n;for(let e=0;e<l;++e){const t=a,l=o,u=s;[o,a,s]=Cs.tidy((()=>{const t=$l(a,[e,e],[n-e,1]),l=Fh(t),u=$l(a,[e,e],[1,1]),c=nu(xu(u,0),sh([[-1]]),sh([[1]])),h=Eo(u,ho(c,l)),p=co(t,h);o=1===p.shape[0]?Oa(i):Nl([i,$l(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=Du(co(ei(c,h),l)),f=$l(a,[e,0],[n-e,r]),m=ho(d,o),g=ni(o);if(0===e)a=Eo(f,ei(m,ei(g,f)));else{const t=Eo(f,ei(m,ei(g,f)));a=Nl([$l(a,[0,0],[e,r]),t],0)}const y=ni(m),b=$l(s,[0,e],[n,s.shape[1]-e]);if(0===e)s=Eo(b,ei(ei(b,o),y));else{const t=Eo(b,ei(ei(b,o),y));s=Nl([$l(s,[0,0],[n,e]),t],1)}return[o,a,s]})),Yi([t,l,u])}return!t&&n>r&&(s=$l(s,[0,0],[n,r]),a=$l(a,[0,0],[r,r])),[s,a]}))}const Np=Ls({qr_:function(e,t=!1){if(Z(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return kp(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),r=ph(Qa(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),s=[],a=[];return r.forEach((e=>{const[n,r]=kp(e,t);s.push(n),a.push(r)})),[Qa(eh(s,0),e.shape),Qa(eh(a,0),e.shape)]}}});var Ip;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Ip||(Ip={}));const $p=Ls({computeWeightedLoss_:function(e,t,n=Ip.SUM_BY_NONZERO_WEIGHTS){const r=Os(e,"losses","computeWeightedLoss");let s=null;null!=t&&(s=Os(t,"weights","computeWeightedLoss"));const a=null==s?r:ho(r,s);if(n===Ip.NONE)return a;if(n===Ip.SUM)return Mu(a);if(n===Ip.MEAN){if(null==s)return Ku(a);{const e=r.size/s.size,t=co(Mu(a),Mu(s));return e>1?co(t,No(e)):t}}if(n===Ip.SUM_BY_NONZERO_WEIGHTS){if(null==s)return co(Mu(a),No(r.size));{const e=ho(s,qu(r.shape)),t=Fa(Mu(nc(e,No(0))),"float32");return co(Mu(a),t)}}throw Error(`Unknown reduction: ${n}`)}}),Cp=Ls({absoluteDifference_:function(e,t,n,r=Ip.SUM_BY_NONZERO_WEIGHTS){const s=Os(e,"labels","absoluteDifference"),a=Os(t,"predictions","absoluteDifference");let i=null;null!=n&&(i=Os(n,"weights","absoluteDifference")),Q(s.shape,a.shape,"Error in absoluteDifference: ");const o=Ro(Eo(s,a));return $p(o,i,r)}}),Sp=Ls({cosineDistance_:function(e,t,n,r,s=Ip.SUM_BY_NONZERO_WEIGHTS){const a=Os(e,"labels","cosineDistance"),i=Os(t,"predictions","cosineDistance");let o=null;null!=r&&(o=Os(r,"weights","cosineDistance")),Q(a.shape,i.shape,"Error in cosineDistance: ");const l=No(1),u=Eo(l,Mu(ho(a,i),n,!0));return $p(u,o,s)}}),Tp=Ls({hingeLoss_:function(e,t,n,r=Ip.SUM_BY_NONZERO_WEIGHTS){let s=Os(e,"labels","hingeLoss");const a=Os(t,"predictions","hingeLoss");let i=null;null!=n&&(i=Os(n,"weights","hingeLoss")),Q(s.shape,a.shape,"Error in hingeLoss: ");const o=No(1);s=Eo(ho(No(2),s),o);const l=Cc(Eo(o,ho(s,a)));return $p(l,i,r)}}),Ep=Ls({huberLoss_:function(e,t,n,r=1,s=Ip.SUM_BY_NONZERO_WEIGHTS){const a=Os(e,"labels","huberLoss"),i=Os(t,"predictions","huberLoss");let o=null;null!=n&&(o=Os(n,"weights","huberLoss")),Q(a.shape,i.shape,"Error in huberLoss: ");const l=No(r),u=Ro(Eo(i,a)),c=Yu(u,l),h=Eo(u,c),p=lo(ho(No(.5),fo(c)),ho(l,h));return $p(p,o,s)}}),Ap=Ls({logLoss_:function(e,t,n,r=1e-7,s=Ip.SUM_BY_NONZERO_WEIGHTS){const a=Os(e,"labels","logLoss"),i=Os(t,"predictions","logLoss");let o=null;null!=n&&(o=Os(n,"weights","logLoss")),Q(a.shape,i.shape,"Error in logLoss: ");const l=No(1),u=No(r),c=Du(ho(a,Au(lo(i,u)))),h=ho(Eo(l,a),Au(lo(Eo(l,i),u))),p=Eo(c,h);return $p(p,o,s)}}),Rp=Ls({meanSquaredError_:function(e,t,n,r=Ip.SUM_BY_NONZERO_WEIGHTS){const s=Os(e,"labels","meanSquaredError"),a=Os(t,"predictions","meanSquaredError");let i=null;null!=n&&(i=Os(n,"weights","meanSquaredError")),Q(s.shape,a.shape,"Error in meanSquaredError: ");const o=Zc(s,a);return $p(o,i,r)}}),Dp=Ls({sigmoidCrossEntropy_:function(e,t,n,r=0,s=Ip.SUM_BY_NONZERO_WEIGHTS){let a=Os(e,"multiClassLabels","sigmoidCrossEntropy");const i=Os(t,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=Os(n,"weights","sigmoidCrossEntropy")),Q(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=No(r),t=No(1),n=No(.5);a=lo(ho(a,Eo(t,e)),ho(n,e))}const l=function(e,t){const n=Os(e,"labels","sigmoidCrossEntropyWithLogits"),r=Os(t,"logits","sigmoidCrossEntropyWithLogits");Q(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=Cc(r),a=ho(r,n),i=Ru(ou(Du(Ro(r))));return lo(Eo(s,a),i)}(a,i);return $p(l,o,s)}}),Fp=Ls({softmaxCrossEntropy_:function(e,t,n,r=0,s=Ip.SUM_BY_NONZERO_WEIGHTS){let a=Os(e,"onehotLabels","softmaxCrossEntropy");const i=Os(t,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=Os(n,"weights","softmaxCrossEntropy")),Q(a.shape,i.shape,"Error in softmaxCrossEntropy: "),r>0){const e=No(r),t=No(1),n=No(a.shape[1]);a=lo(ho(a,Eo(t,e)),co(e,n))}const l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);return vo(((e,t,r)=>{const s=zu(t,[n],!0),a=Eo(Fa(t,"float32"),s);r([e,a]);const i=Du(ho(a,e));return{value:Mu(i,[n]),gradFunc:(e,t)=>{const[r,s]=t,a=jo(e.shape,[n]);return[ho(Qa(e,a),Eo(Fa(r,"float32"),ou(s))),ho(Qa(e,a),Eo(ou(s),Fa(r,"float32")))]}}}))(e,t)}(a,i);return $p(l,o,s)}}),Op={fft:jc,ifft:qc,rfft:Jc,irfft:Kc},_p={hammingWindow:Zh,hannWindow:Qh,frame:ep,stft:tp},Mp={flipLeftRight:rp,resizeNearestNeighbor:xp,resizeBilinear:bp,rotateWithOffset:sp,cropAndResize:np,nonMaxSuppression:ip,nonMaxSuppressionAsync:async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Os(e,"boxes","nonMaxSuppressionAsync"),i=Os(t,"scores","nonMaxSuppressionAsync"),o=ap(a,i,n,r,s);n=o.maxOutputSize,r=o.iouThreshold,s=o.scoreThreshold;const l=await Promise.all([a.data(),i.data()]),u=up(l[0],l[1],n,r,s);return a!==e&&a.dispose(),i!==t&&i.dispose(),u},nonMaxSuppressionWithScore:gp,nonMaxSuppressionWithScoreAsync:async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=Os(e,"boxes","nonMaxSuppressionAsync"),o=Os(t,"scores","nonMaxSuppressionAsync"),l=ap(i,o,n,r,s,a);n=l.maxOutputSize,r=l.iouThreshold,s=l.scoreThreshold,a=l.softNmsSigma;const u=await Promise.all([i.data(),o.data()]),c=hp(u[0],u[1],n,r,s,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),c},nonMaxSuppressionPadded:yp,nonMaxSuppressionPaddedAsync:async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=Os(e,"boxes","nonMaxSuppressionAsync"),o=Os(t,"scores","nonMaxSuppressionAsync"),l=ap(i,o,n,r,s,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[p,d]=await Promise.all([i.data(),o.data()]),f=cp(p,d,u,c,h,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),f}},Lp={bandPart:wp,gramSchmidt:vp,qr:Np},zp={absoluteDifference:Cp,computeWeightedLoss:$p,cosineDistance:Sp,hingeLoss:Tp,huberLoss:Ep,logLoss:Ap,meanSquaredError:Rp,sigmoidCrossEntropy:Dp,softmaxCrossEntropy:Fp};class Bp{static sgd(e){return new Lo(e)}static momentum(e,t,n=!1){return new zo(e,t,n)}static rmsprop(e,t=.9,n=0,r=null,s=!1){return new Bo(e,t,n,r,s)}static adam(e=.001,t=.9,n=.999,r=null){return new Ao(e,t,n,r)}static adadelta(e=.001,t=.95,n=null){return new $o(e,t,n)}static adamax(e=.002,t=.9,n=.999,r=null,s=0){return new Mo(e,t,n,r,s)}static adagrad(e,t=.1){return new So(e,t)}}const Pp={sgd:Bp.sgd,momentum:Bp.momentum,adadelta:Bp.adadelta,adagrad:Bp.adagrad,rmsprop:Bp.rmsprop,adamax:Bp.adamax,adam:Bp.adam},Wp="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function Vp(){return new Promise((e=>Wp((()=>e()))))}function Up(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function Gp(e,t,n,r=!0){let s=[];if(r)s=s.concat(t.slice(0)),s.push(e[0]/n),s=s.concat(e.slice(1));else{s=s.concat(e[0]);const n=t.length;for(let r=0;r<n;++r)s=s.concat([e[r+1]/t[r],t[r]]);s=s.concat(e.slice(n+1))}return s}function Hp(e,t,n=!0){const r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{const n=[],s=[];for(let r=1;r<e;++r)r>=2*t+1||r%2==1?s.push(r):n.push(r);r.push(...n),r.push(0),r.push(...s)}return r}function jp(e,t,n,r=!0){const s=[];r?s.push(e[0]/n):s.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?r?s.push(t[n-1]*e[n]):s.push(e[n]/t[n-1]):s.push(e[n]);return s}function qp(e,t){const n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}function Kp(e,t,n){const r=e.slice(0,1);for(let s=0;s<n;++s)r.push(e[s+1]-t[s][0]-t[s][1]);return r}const Xp=1.7580993408473768,Yp=1.0507009873554805,Jp=.3275911,Zp=.254829592,Qp=-.284496736,ed=1.421413741,td=-1.453152027,nd=1.061405429;function rd(...e){Be().getBool("IS_TEST")||console.warn(...e)}function sd(...e){Be().getBool("IS_TEST")||console.log(...e)}function ad(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function id(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}}function od(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function ld(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function ud(e,t){return{real:e[2*t],imag:e[2*t+1]}}function cd(e,t,n,r){e[2*r]=t,e[2*r+1]=n}function hd(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let s=0;s<Math.ceil(e/2);s++){const a=(t?2:-2)*Math.PI*(s/e);n[s]=Math.cos(a),r[s]=Math.sin(a)}return{real:n,imag:r}}function pd(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}}function dd(e,t,n){if("complex64"===t){if("complex64"===e.dtype)return e.clone();const t=ju(e.shape),r=Fa(e,"float32"),s=n.complex(r,t);return t.dispose(),r.dispose(),s}if(!be(e.dtype,t))return Cs.makeTensorFromDataId(e.dataId,e.shape,t);if("complex64"===e.dtype){const r=n.real(e),s=Fa(r,t);return r.dispose(),s}if("int32"===t)return n.int(e);if("bool"===t){const t=No(0,e.dtype),r=n.notEqual(e,t);return t.dispose(),r}throw new Error(`Error in Cast: failed to cast ${e.dtype} to ${t}`)}function fd(e,t){return Cs.makeTensorFromDataId(e.dataId,t,e.dtype)}function md(e,t,n){const r=(t-e)/(n-1),s=De(n,"float32");s[0]=e;for(let e=1;e<s.length;e++)s[e]=s[e-1]+r;return Nc(s,"float32")}function gd(e,t,n){const r=new Array(e.rank).fill(0),s=e.shape.slice();return t.map((t=>{const a=[...s];a[n]=t;const i=$l(e,r,a);return r[n]+=t,i}))}function yd(e,t){const n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=e.shape[r]*t[r];const r=Da(n,e.dtype);for(let t=0;t<r.values.length;++t){const n=r.indexToLoc(t),s=new Array(e.rank);for(let t=0;t<s.length;t++)s[t]=n[t]%e.shape[t];const a=e.locToIndex(s);r.values[t]=e.values[a]}return r.toTensor()}function bd(e,t,n,r,s){const a=t[t.length-1],[i,o]=[e.length/a,a],l=fe(n,i*r),u=fe("int32",i*r);for(let t=0;t<i;t++){const n=t*o,s=e.subarray(n,n+o),a=[];for(let e=0;e<s.length;e++)a.push({value:s[e],index:e});a.sort(((e,t)=>t.value-e.value));const i=t*r,c=l.subarray(i,i+r),h=u.subarray(i,i+r);for(let e=0;e<r;e++)c[e]=a[e].value,h[e]=a[e].index}const c=t.slice();return c[c.length-1]=r,[Ps(l,c,n),Ps(u,c,"int32")]}const xd={kernelName:Ge,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ho(e,th(Fa(n,"float32"),-1))}}},wd={kernelName:He,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=fo(Fa(n,"float32")),r=po(Eo(No(1),t));return Du(co(e,r))}}}},vd={kernelName:je,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=po(Eo(fo(Fa(n,"float32")),1));return co(e,t)}}}},kd={kernelName:qe,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Oo(n.shape,r.shape);return{a:()=>{let t=e;const r=Fo(n.shape,s);return r.length>0&&(t=Mu(t,r)),Qa(t,n.shape)},b:()=>{let t=e;const n=Fo(r.shape,s);return n.length>0&&(t=Mu(t,n)),Qa(t,r.shape)}}}},Nd={kernelName:Ke,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,r)=>{n[r]=()=>e.clone()})),n}},Id={kernelName:Je,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>mo(n)}}},$d={kernelName:Ze,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>mo(n)}}},Cd={kernelName:Qe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>co(e,po(Eo(No(1),fo(Fa(n,"float32")))))}}},Sd={kernelName:et,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=po(lo(No(1),fo(Fa(n,"float32"))));return co(e,t)}}}},Td={kernelName:rt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Oo(n.shape,r.shape);return{a:()=>{const t=lo(fo(n),fo(r));let a=ho(e,co(r,t));const i=Fo(n.shape,s);return i.length>0&&(a=Mu(a,i)),Qa(a,n.shape)},b:()=>{const t=lo(fo(n),fo(r));let a=Du(ho(e,co(n,t)));const i=Fo(r.shape,s);return i.length>0&&(a=Mu(a,i)),Qa(a,r.shape)}}}},Ed={kernelName:tt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>co(e,lo(fo(Fa(n,"float32")),1))}}},Ad={kernelName:nt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>co(e,Eo(No(1),fo(Fa(n,"float32"))))}}},Rd=Ls({avgPool3dBackprop_:function(e,t,n,r,s=[1,1,1],a,i){const o=Os(e,"dy","avgPool3dBackprop"),l=Os(t,"input","avgPool3dBackprop");let u=o,c=l,h=!1;4===l.rank&&(h=!0,u=Qa(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),c=Qa(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),Z(5===u.rank,(()=>`Error in avgPool3dBackprop: dy must be rank 5 but got rank ${u.rank}.`)),Z(5===c.rank,(()=>`Error in avgPool3dBackprop: input must be rank 5 but got rank ${c.rank}.`)),Z(yl(r,s),(()=>`Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides ${r} and dilations '${s}'`)),null!=i&&Z(ae(a),(()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`));const p={dy:u,input:c},d={filterSize:n,strides:r,dilations:s,pad:a,dimRoundingMode:i},f=Cs.runKernelFunc((e=>{const t=ll(c.shape,n,r,s,a,i);return e.avgPool3dBackprop(u,c,t)}),p,null,ot,d);return h?Qa(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}}),Dd={kernelName:it,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,dilations:i,pad:o,dimRoundingMode:l}=n,u=null==i?[1,1,1]:i;return{x:()=>Rd(e,r,s,a,u,o,l)}}},Fd=Ls({avgPoolBackprop_:function(e,t,n,r,s){const a=Os(e,"dy","avgPoolBackprop"),i=Os(t,"input","avgPoolBackprop");Z(i.rank===a.rank,(()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`));let o=i,l=a,u=!1;3===i.rank&&(u=!0,o=Qa(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=Qa(a,[1,a.shape[0],a.shape[1],a.shape[2]])),Z(4===l.rank,(()=>`Error in avgPoolBackprop: dy must be rank 4 but got rank ${l.rank}.`)),Z(4===o.rank,(()=>`Error in avgPoolBackprop: input must be rank 4 but got rank ${o.rank}.`));const c={dy:l,input:o},h={filterSize:n,strides:r,pad:s},p=Cs.runKernelFunc((e=>{const t=ol(o.shape,n,r,1,s);return e.avgPoolBackprop(l,o,t)}),c,null,at,h);return u?Qa(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),Od={kernelName:st,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,pad:i}=n;return{x:()=>Fd(e,r,s,a,i)}}},_d={kernelName:lt,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[r,s]=t,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>ei(e,s,!1,!1),b:()=>ei(e,r,!0,!1)}:a&&!i?{a:()=>ei(s,e,!1,!0),b:()=>ei(r,e,!1,!1)}:{a:()=>ei(s,e,!0,!0),b:()=>ei(e,r,!0,!0)}:{a:()=>ei(e,s,!1,!0),b:()=>ei(r,e,!0,!1)}}},Md={kernelName:ut,gradFunc:(e,t,n)=>{const{blockShape:r,crops:s}=n;return{x:()=>hc(e,r,s)}}},Ld={kernelName:ct,gradFunc:(e,t,n)=>{const r=n,s=r.inputShape,a=r.shape,i=Array.from(a);for(let e=s.length-1;e>=0;e--)if(s[e]===a[e])i[e]=1;else if(1!==s[e])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${a}].`);const o=[];for(let e=0;e<i.length;e++)i[e]>1&&o.push(e);return{x:()=>Mu(e,o,!0)}}},zd={kernelName:ht,gradFunc:e=>({x:()=>e.clone()})},Bd={kernelName:pt,gradFunc:e=>({x:()=>mo(e)})},Pd={kernelName:dt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{clipValueMin:s,clipValueMax:a}=n;return{x:()=>nu(Bu(wu(r,s),Su(r,a)),e,mo(e))}}},Wd={kernelName:mt,saveAllInputs:!0,gradFunc:(e,t,n)=>{const r=t.map((e=>e.shape)),{axis:s}=n,a=pe(s,t[0].shape)[0],i=r.map((e=>e[a]));return Yc(e,i,a).map((e=>()=>e))}},Vd={kernelName:gt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{dilations:a,strides:i,pad:o,dataFormat:l}=n;return Z(gl(a),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`)),{x:()=>Ul(r.shape,e,s,i,o,l),filter:()=>Vh(r,e,s.shape,i,o,l)}}},Ud={kernelName:bt,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{strides:a,pad:i,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>Wl(e,s,a,i,o,1,l),filter:()=>Vh(e,r,s.shape,a,i,o,l)}}},Gd=Ls({conv3DBackpropFilter_:function(e,t,n,r,s){let a=e;4===e.rank&&(a=Qa(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let i=t;4===i.rank&&(i=Qa(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),Z(5===a.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`)),Z(5===i.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`)),Z(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),Z(a.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`)),Z(i.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`));const o={x:a,dy:i},l={strides:r,pad:s,filterShape:n};return Cs.runKernelFunc((e=>{const t=cl(a.shape,n,r,1,s);return e.conv3dDerFilter(a,i,t)}),o,null,wt,l)}}),Hd={kernelName:xt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a}=n;Z(gl(r),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`));const[i,o]=t;return{x:()=>jl(i.shape,e,o,s,a),filter:()=>Gd(i,e,o.shape,s,a)}}},jd={kernelName:kt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ho(Du(Bc(Fa(n,"float32"))),e)}}},qd={kernelName:Nt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ho(Pc(Fa(n,"float32")),e)}}},Kd={kernelName:It,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s,exclusive:a,reverse:i}=n;return{x:()=>{const t=Ko([s],r.rank);let n=Yl(e,s,a,!i);return null!=t&&(n=ni(n,t)),n}}}},Xd={kernelName:St,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a,dimRoundingMode:i}=n,o=null==r?[1,1]:r;Z(gl(o),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`));const[l,u]=t;return Z(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`)),Z(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`)),Z(l.shape[3]===u.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),Z(yl(s,o),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${s} and dilations '${o}'.`)),null!=i&&Z(ae(a),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`)),{x:()=>Xh(l.shape,e,u,s,a,r,i),filter:()=>Kh(l,e,u.shape,s,a,r,i)}}},Yd={kernelName:Rt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,a={x:r,filter:s,dy:e},i={x:r,filter:s,dy:e};return{x:()=>Cs.runKernel(Dt,a,n),filter:()=>Cs.runKernel(Ft,i,n)}}},Jd={kernelName:Ot,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Oo(n.shape,r.shape);return{a:()=>{const t=co(e,Fa(r,"float32")),a=Fo(n.shape,s);return a.length>0?Qa(Mu(t,a),n.shape):t},b:()=>{let t=ho(e,Fa(n,"float32"));const a=Fo(r.shape,s);a.length>0&&(t=Qa(Mu(t,a),r.shape));const i=fo(r);return Du(co(t,Fa(i,"float32")))}}}},Zd={kernelName:_t,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,r=t=>t.eluDer(e,n),s={dy:e,y:n};return{x:()=>Cs.runKernelFunc(r,s,null,Mt)}}},Qd={kernelName:Lt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=ho(ou(Du(fo(n))),2/Math.sqrt(Math.PI));return{x:()=>ho(e,r)}}},ef={kernelName:Bt,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ho(e,n)}}},tf={kernelName:Pt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ho(e,ou(n))}}},nf={kernelName:Gt,gradFunc:e=>({x:()=>mo(e)})},rf={kernelName:Ht,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Oo(n.shape,r.shape);return{a:()=>{const t=co(e,Fa(r,"float32")),a=Fo(n.shape,s);return a.length>0?Qa(Mu(t,a),n.shape):t},b:()=>{let t=ho(e,Fa(n,"float32"));const a=Fo(r.shape,s);a.length>0&&(t=Qa(Mu(t,a),r.shape));const i=fo(r);return Du(co(t,Fa(i,"float32")))}}}},sf={kernelName:jt,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:r}=n,[s,a,i,o]=t,l=null==o?No(1):o,u=Fo(a.shape,s.shape),c=[];if(1===a.rank){for(let e=0;e<s.shape.length-1;++e)c.push(s.shape[e]);c.push(1)}const h=Eo(s,a),p=ho(e,l),d=Oc(lo(i,No(r))),f=ho(ho(ho(d,d),d),No(-.5));return{x:()=>1===a.rank?Qa(ho(ho(e,cu(Qa(d,[1,1,1,a.shape[0]]),c)),l),s.shape):Qa(ho(ho(e,d),l),s.shape),mean:()=>{let e=ho(ho(d,No(-1)),p);return 1===a.rank&&(e=Mu(e,u)),Qa(e,a.shape)},variance:()=>{let e=ho(ho(f,h),p);return 1===a.rank&&(e=Mu(e,u)),Qa(e,a.shape)},scale:()=>{const t=ho(h,d);let n=ho(e,t);return 1===a.rank&&(n=Mu(n,u)),Qa(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=Mu(t,u)),Qa(t,a.shape)}}}},af={kernelName:qt,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[r,s]=t,{axis:a}=n,i=pe(a,r.shape)[0];return{x:()=>{const t=r.shape,n=s.size,o=t.slice(0,i),l=o.length,u=t.slice(a,t.length).slice(1),c=u.length,h=of(0,l),p=of(l+1,l+1+c),d=lf([o,[n],u]),f=Qa(e,d),m=Qa(s,[n]),g=lf([[l],h,p]),y=ni(f,g);let b=hh(y,m,r.shape[i]);const x=Xo(g);return b=ni(b,x),b},indices:()=>s}}};function of(e,t){const n=[];for(let r=e;r<t;++r)n.push(r);return n}function lf(e){const t=[];for(let n=0;n<e.length;++n)for(let r=0;r<e[n].length;++r)t.push(e[n][r]);return t}const uf={kernelName:Yt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>mo(n),b:()=>mo(r)}}},cf={kernelName:Jt,gradFunc:e=>({x:()=>Fa(e,"float32")})},hf={kernelName:en,gradFunc:e=>({x:()=>mo(e)})},pf={kernelName:tn,gradFunc:e=>({x:()=>mo(e)})},df={kernelName:nn,gradFunc:e=>({x:()=>mo(e)})},ff={kernelName:ln,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>co(e,lo(n,1))}}},mf={kernelName:on,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>co(e,Fa(n,"float32"))}}},gf={kernelName:pn,inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n;return{logits:()=>{const t=ou(r);return Eo(e,ho(Mu(e,s,!0),t))}}}},yf=Ls({localResponseNormalizationBackprop_:function(e,t,n,r=5,s=1,a=1,i=.5){const o={x:e,y:t,dy:n},l={depthRadius:r,bias:s,alpha:a,beta:i};return Cs.runKernelFunc((o=>o.LRNGrad(n,e,t,r,s,a,i)),o,null,fn,l)}}),bf={kernelName:dn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{depthRadius:a,bias:i,alpha:o,beta:l}=n;return{x:()=>yf(r,s,e,a,i,o,l)}}};function xf(e,t,n,r){return t.rank<n.rank&&(t=Qa(t,jo(t.shape,r))),e.rank<n.rank&&(e=Qa(e,jo(e.shape,r))),{x:()=>ho(e,Fa(tu(n,t),e.dtype))}}const wf={kernelName:mn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{reductionIndices:s}=r,a=t[0],i=xf(e,t[1],a,pe(s,a.shape));return{x:()=>i.x()}}},vf={kernelName:gn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>ho(e,Fa(wu(n,r),"float32")),b:()=>ho(e,Fa(Cu(n,r),"float32"))}}},kf=Ls({maxPool3dBackprop_:function(e,t,n,r,s,a=[1,1,1],i,o){const l=Os(e,"dy","maxPool3dBackprop"),u=Os(t,"input","maxPool3dBackprop"),c=Os(n,"output","maxPool3dBackprop");let h=l,p=u,d=c,f=!1;4===u.rank&&(f=!0,h=Qa(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),p=Qa(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),d=Qa(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),Z(5===h.rank,(()=>`Error in maxPool3dBackprop: dy must be rank 5 but got rank ${h.rank}.`)),Z(5===p.rank,(()=>`Error in maxPool3dBackprop: input must be rank 5 but got rank ${p.rank}.`)),Z(5===d.rank,(()=>`Error in maxPool3dBackprop: output must be rank 5 but got rank ${d.rank}.`)),Z(yl(s,a),(()=>`Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides ${s} and dilations '${a}'`)),null!=o&&Z(ae(i),(()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${o} but got pad ${i}.`));const m={dy:h,input:p,output:d},g={filterSize:r,strides:s,dilations:a,pad:i,dimRoundingMode:o},y=Cs.runKernelFunc((e=>{const t=ll(p.shape,r,s,a,i,o);return e.maxPool3dBackprop(h,p,d,t)}),m,null,wn,g);return f?Qa(y,[y.shape[1],y.shape[2],y.shape[3],y.shape[4]]):y}}),Nf={kernelName:xn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:i,dilations:o,pad:l,dimRoundingMode:u}=n,c=null==o?[1,1,1]:o;return{x:()=>kf(e,r,s,a,i,c,l,u)}}},If=Ls({maxPoolBackprop_:function(e,t,n,r,s,a,i){const o=Os(e,"dy","maxPoolBackprop"),l=Os(t,"input","maxPoolBackprop"),u=Os(n,"output","maxPoolBackprop");Z(l.rank===o.rank,(()=>`Rank of input (${l.rank}) does not match rank of dy (${o.rank})`)),Z(4===o.rank,(()=>`Error in maxPoolBackprop: dy must be rank 4 but got rank ${o.rank}.`)),Z(4===l.rank,(()=>`Error in maxPoolBackprop: input must be rank 4 but got rank ${l.rank}.`)),null!=i&&Z(ae(a),(()=>`Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`));const c={dy:o,input:l,output:u},h={filterSize:r,strides:s,pad:a,dimRoundingMode:i};return Cs.runKernelFunc((e=>{const t=ol(l.shape,r,s,1,a,i);return e.maxPoolBackprop(o,l,u,t)}),c,null,bn,h)}}),$f={kernelName:_n,inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map((e=>e[0]));return{x:()=>$l(e,a,r.shape)}}},Cf={kernelName:cr,gradFunc:(e,t,n)=>{const{blockShape:r,paddings:s}=n;return{x:()=>Tl(e,r,s)}}},Sf={kernelName:hr,gradFunc:(e,t,n)=>{const{axis:r}=n;return{x:()=>Nl(e,r)}}},Tf=[xd,wd,vd,kd,Nd,Id,$d,Cd,Sd,Td,Ed,Ad,Dd,Od,_d,Md,Ld,zd,Bd,Pd,Wd,Ud,Vd,Hd,jd,qd,Kd,Xd,Yd,Jd,Zd,Qd,ef,tf,rf,nf,sf,af,uf,cf,hf,pf,df,ff,mf,gf,bf,wf,wf,vf,Nf,{kernelName:yn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:i,pad:o}=n;return{x:()=>If(e,r,s,a,i,o)}}},{kernelName:Nn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{axis:s}=r,[a,i]=t,o=xf(e,i,a,pe(s,a.shape));return{x:()=>o.x()}}},{kernelName:In,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>ho(e,Fa(Su(n,r),"float32")),b:()=>ho(e,Fa(xu(n,r),"float32"))}}},{kernelName:$n,inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map((e=>e[0]));return{x:()=>$l(e,a,r.shape)}}},{kernelName:Cn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Oo(n.shape,r.shape);return{a:()=>{const t=Fo(n.shape,s);return t.length>0?Qa(Mu(e,t),n.shape):e},b:()=>{const t=ho(e,Du(pu(co(n,r)))),a=Fo(r.shape,s);return a.length>0?Qa(Mu(t,a),r.shape):t}}}},{kernelName:Sn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Oo(n.shape,r.shape);return{a:()=>{const t=ho(e,Fa(r,"float32")),a=Fo(n.shape,s);return a.length>0?Qa(Mu(t,a),n.shape):t},b:()=>{const t=ho(e,Fa(n,"float32")),a=Fo(r.shape,s);return a.length>0?Qa(Mu(t,a),r.shape):t}}}},{kernelName:Tn,gradFunc:e=>({x:()=>Du(e)})},{kernelName:On,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>ju(n.shape,"float32")}}},{kernelName:Fn,gradFunc:e=>({x:()=>mo(e)})},$f,$f,{kernelName:Ln,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,r,s]=t,a=n,i=r,o=Oo(a.shape,i.shape);return{a:()=>{const t=Fa(i,"float32");let n=ho(e,ho(t,To(a,Eo(t,No(1)))));const r=Fo(a.shape,o);return r.length>0&&(n=Mu(n,r)),Qa(n,a.shape)},b:()=>{const t=xu(a,0),n=nu(t,Au(a),mo(a));let r=ho(e,ho(s,n));const l=Fo(i.shape,o);return l.length>0&&(r=Mu(r,l)),Qa(r,i.shape)}}}},{kernelName:zn,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,r]=t,s=xu(n,0);return{x:()=>nu(s,e,ho(e,r)),alpha:()=>{let t=nu(s,mo(e),ho(e,n));const a=Fo(r.shape,e.shape);return a.length>0&&(t=Mu(t,a)),Qa(t,r.shape)}}}},{kernelName:Vn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>co(e,Du(fo(n)))}}},{kernelName:Xn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=ho(Su(n,6),th(n));return{x:()=>ho(e,Fa(r,"float32"))}}},{kernelName:Un,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ho(e,Fa(th(n),"float32"))}}},{kernelName:Gn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Qa(e,n.shape)}}},{kernelName:qn,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s=t=>{const{alignCorners:s}=n;return t.resizeBilinearBackprop(e,r,s)},a={images:r};return{images:()=>Cs.runKernelFunc(s,a,null,Kn,n)}}},{kernelName:Hn,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s=t=>{const{alignCorners:s}=n;return t.resizeNearestNeighborBackprop(e,r,s)},a={images:r};return{images:()=>Cs.runKernelFunc(s,a,null,jn,n)}}},{kernelName:Yn,gradFunc:(e,t,n)=>{const{dims:r}=n,s=pe(r,e.shape);return{x:()=>Tc(e,s)}}},{kernelName:Jn,gradFunc:e=>({x:()=>mo(e)})},{kernelName:Zn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Du(co(e,ho(To(n,1.5),2)))}}},{kernelName:er,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>Fa(mo(n),"float32"),t:()=>ho(e,Fa(n,e.dtype)),e:()=>ho(e,Fa(Pu(n),e.dtype))}}},{kernelName:tr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=xu(n,No(0)),r=No(Xp),s=No(Yp),a=ho(e,s),i=ho(ho(e,r),ou(Fa(n,"float32")));return nu(t,a,i)}}}},{kernelName:ir,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ho(e,ho(n,Eo(No(1),n)))}}},{kernelName:ar,gradFunc:e=>({x:()=>mo(e)})},{kernelName:rr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ho(Kl(Fa(n,"float32")),e)}}},{kernelName:sr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ho(Xl(Fa(n,"float32")),e)}}},{kernelName:nr,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{begin:s,size:a}=n,i=r.shape,[o,l]=Ci(r,s,a),u=[];for(let t=0;t<e.rank;t++)u.push([o[t],i[t]-o[t]-l[t]]);return{x:()=>ic(e,u)}}},{kernelName:pr,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{dim:s}=n,a=ho(e,r);return{logits:()=>Eo(a,ho(Mu(a,[s],!0),r))}}},{kernelName:or,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ho(e,Il(n))}}},Cf,Cf,Sf,Sf,{kernelName:lr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>co(e,ho(po(Fa(n,"float32")),2))}}},{kernelName:dr,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=No(2);return{a:()=>ho(e,ho(s,Eo(n,r))),b:()=>ho(e,ho(s,Eo(r,n)))}}},{kernelName:fr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ho(e,ho(Fa(n,"float32"),2))}}},{kernelName:Sr,gradFunc:e=>({x:()=>mo(e)})},{kernelName:mr,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Oo(n.shape,r.shape);return{a:()=>{let t=e;const r=Fo(n.shape,s);return r.length>0&&(t=Mu(t,r)),Qa(t,n.shape)},b:()=>{let t=e;const n=Fo(r.shape,s);return n.length>0&&(t=Mu(t,n)),Qa(Du(t),r.shape)}}}},{kernelName:ur,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,s=r.shape.slice(),{axis:a}=n;pe(a,r.shape).forEach((e=>{s[e]=1}));const i=Qa(e,s),o=ho(i,qu(r.shape,"float32"));return{x:()=>o}}},{kernelName:br,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>co(e,fo(Kl(n)))}}},{kernelName:xr,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ho(Eo(No(1),fo(n)),e)}}},{kernelName:wr,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{reps:s}=n;return{x:()=>{let t=mo(r);if(1===r.rank)for(let n=0;n<s[0];++n)t=lo(t,$l(e,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)t=lo(t,$l(e,[n*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)t=lo(t,$l(e,[n*r.shape[0],a*r.shape[1],i*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${r.rank} tensors yet.`);for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)for(let o=0;o<s[3];++o)t=lo(t,$l(e,[n*r.shape[0],a*r.shape[1],i*r.shape[2],o*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return t}}}},{kernelName:kr,gradFunc:(e,t,n)=>{const r=n,{perm:s}=r,a=Xo(s);return{x:()=>ni(e,a)}}},{kernelName:Ir,gradFunc:(e,t,n)=>{const r=n,{axis:s}=r;return{value:()=>eh(e,s)}}},{kernelName:$r,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=_o(t,mo(t)),r=bu(e,n);let s=wu(t,No(0,"int32"));const a=r.rank-s.rank;for(let e=0;e<a;++e)s=lu(s,e+1);s=Bu(s,qu(r.shape,"bool"));const i=mo(r);return nu(s,r,i)}(e,n)}}},{kernelName:Cr,gradFunc:e=>({x:()=>mo(e)})}];for(const e of Tf)Br(e);let Ef;function Af(){return null==Ef&&(Ef=io().epsilon()),Ef}ls.prototype.abs=function(){return this.throwIfDisposed(),Ro(this)},ls.prototype.acos=function(){return this.throwIfDisposed(),Po(this)},ls.prototype.acosh=function(){return this.throwIfDisposed(),Wo(this)},ls.prototype.addStrict=function(e){return this.throwIfDisposed(),Nh(this,e)},ls.prototype.add=function(e){return this.throwIfDisposed(),lo(this,e)},ls.prototype.all=function(e,t){return this.throwIfDisposed(),Jo(this,e,t)},ls.prototype.any=function(e,t){return this.throwIfDisposed(),Zo(this,e,t)},ls.prototype.argMax=function(e){return this.throwIfDisposed(),Qo(this,e)},ls.prototype.argMin=function(e){return this.throwIfDisposed(),el(this,e)},ls.prototype.asScalar=function(){return this.throwIfDisposed(),Z(1===this.size,(()=>"The array must have only 1 element.")),Qa(this,[])},ls.prototype.asType=function(e){return this.throwIfDisposed(),Fa(this,e)},ls.prototype.as1D=function(){return this.throwIfDisposed(),Qa(this,[this.size])},ls.prototype.as2D=function(e,t){return this.throwIfDisposed(),Qa(this,[e,t])},ls.prototype.as3D=function(e,t,n){return this.throwIfDisposed(),Qa(this,[e,t,n])},ls.prototype.as4D=function(e,t,n,r){return this.throwIfDisposed(),Qa(this,[e,t,n,r])},ls.prototype.as5D=function(e,t,n,r,s){return this.throwIfDisposed(),Qa(this,[e,t,n,r,s])},ls.prototype.asin=function(){return this.throwIfDisposed(),tl(this)},ls.prototype.asinh=function(){return this.throwIfDisposed(),nl(this)},ls.prototype.atan=function(){return this.throwIfDisposed(),rl(this)},ls.prototype.atan2=function(e){return this.throwIfDisposed(),sl(this,e)},ls.prototype.atanh=function(){return this.throwIfDisposed(),al(this)},ls.prototype.avgPool=function(e,t,n,r){return this.throwIfDisposed(),xl(this,e,t,n,r)},ls.prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),Tl(this,e,t)},ls.prototype.batchNorm=function(e,t,n,r,s){return this.throwIfDisposed(),Al(this,e,t,n,r,s)},ls.prototype.broadcastTo=function(e){return this.throwIfDisposed(),Ol(this,e)},ls.prototype.cast=function(e){return this.throwIfDisposed(),Fa(this,e)},ls.prototype.ceil=function(){return this.throwIfDisposed(),_l(this)},ls.prototype.clipByValue=function(e,t){return this.throwIfDisposed(),Ml(this,e,t)},ls.prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof ls&&(e=[e]),Nl([this,...e],t)},ls.prototype.conv1d=function(e,t,n,r,s,a){return this.throwIfDisposed(),Vl(this,e,t,n,r,s,a)},ls.prototype.conv2dTranspose=function(e,t,n,r,s){return this.throwIfDisposed(),Gl(this,e,t,n,r,s)},ls.prototype.conv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),Wl(this,e,t,n,r,s,a)},ls.prototype.cos=function(){return this.throwIfDisposed(),Kl(this)},ls.prototype.cosh=function(){return this.throwIfDisposed(),Xl(this)},ls.prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),Yl(this,e,t,n)},ls.prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),Jl(this,e,t)},ls.prototype.depthwiseConv2D=function(e,t,n,r,s,a){return Gi("depthwiseConv2D is deprecated, use depthwiseConv2d instead"),this.throwIfDisposed(),Zl(this,e,t,n,r,s,a)},ls.prototype.depthwiseConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),Zl(this,e,t,n,r,s,a)},ls.prototype.dilation2d=function(e,t,n,r,s){return this.throwIfDisposed(),eu(this,e,t,n,r,s)},ls.prototype.divNoNan=function(e){return this.throwIfDisposed(),ru(this,e)},ls.prototype.divStrict=function(e){return this.throwIfDisposed(),Ih(this,e)},ls.prototype.div=function(e){return this.throwIfDisposed(),co(this,e)},ls.prototype.dot=function(e){return this.throwIfDisposed(),su(this,e)},ls.prototype.elu=function(){return this.throwIfDisposed(),au(this)},ls.prototype.equalStrict=function(e){return this.throwIfDisposed(),yh(this,e)},ls.prototype.equal=function(e){return this.throwIfDisposed(),tu(this,e)},ls.prototype.erf=function(){return this.throwIfDisposed(),iu(this)},ls.prototype.exp=function(){return this.throwIfDisposed(),ou(this)},ls.prototype.expandDims=function(e){return this.throwIfDisposed(),lu(this,e)},ls.prototype.expm1=function(){return this.throwIfDisposed(),uu(this)},ls.prototype.fft=function(){return this.throwIfDisposed(),jc(this)},ls.prototype.flatten=function(){return this.throwIfDisposed(),Qa(this,[this.size])},ls.prototype.floor=function(){return this.throwIfDisposed(),pu(this)},ls.prototype.floorDiv=function(e){return this.throwIfDisposed(),uo(this,e)},ls.prototype.gather=function(e,t){return this.throwIfDisposed(),bu(this,e,t)},ls.prototype.greaterEqualStrict=function(e){return this.throwIfDisposed(),bh(this,e)},ls.prototype.greaterEqual=function(e){return this.throwIfDisposed(),wu(this,e)},ls.prototype.greaterStrict=function(e){return this.throwIfDisposed(),xh(this,e)},ls.prototype.greater=function(e){return this.throwIfDisposed(),xu(this,e)},ls.prototype.ifft=function(){return this.throwIfDisposed(),qc(this)},ls.prototype.irfft=function(){return this.throwIfDisposed(),Kc(this)},ls.prototype.isFinite=function(){return this.throwIfDisposed(),ku(this)},ls.prototype.isInf=function(){return this.throwIfDisposed(),Nu(this)},ls.prototype.isNaN=function(){return this.throwIfDisposed(),Iu(this)},ls.prototype.leakyRelu=function(e){return this.throwIfDisposed(),$u(this,e)},ls.prototype.lessEqualStrict=function(e){return this.throwIfDisposed(),wh(this,e)},ls.prototype.lessEqual=function(e){return this.throwIfDisposed(),Su(this,e)},ls.prototype.lessStrict=function(e){return this.throwIfDisposed(),vh(this,e)},ls.prototype.less=function(e){return this.throwIfDisposed(),Cu(this,e)},ls.prototype.localResponseNormalization=function(e,t,n,r){return this.throwIfDisposed(),Eu(this,e,t,n,r)},ls.prototype.logSigmoid=function(){return this.throwIfDisposed(),Ou(this)},ls.prototype.logSoftmax=function(e){return this.throwIfDisposed(),Lu(this,e)},ls.prototype.logSumExp=function(e,t){return this.throwIfDisposed(),zu(this,e,t)},ls.prototype.log=function(){return this.throwIfDisposed(),Au(this)},ls.prototype.log1p=function(){return this.throwIfDisposed(),Ru(this)},ls.prototype.logicalAnd=function(e){return this.throwIfDisposed(),Bu(this,e)},ls.prototype.logicalNot=function(){return this.throwIfDisposed(),Pu(this)},ls.prototype.logicalOr=function(e){return this.throwIfDisposed(),Wu(this,e)},ls.prototype.logicalXor=function(e){return this.throwIfDisposed(),Vu(this,e)},ls.prototype.matMul=function(e,t,n){return this.throwIfDisposed(),ei(this,e,t,n)},ls.prototype.maxPool=function(e,t,n,r){return this.throwIfDisposed(),Uu(this,e,t,n,r)},ls.prototype.max=function(e,t){return this.throwIfDisposed(),_u(this,e,t)},ls.prototype.maximumStrict=function(e){return this.throwIfDisposed(),$h(this,e)},ls.prototype.maximum=function(e){return this.throwIfDisposed(),_o(this,e)},ls.prototype.mean=function(e,t){return this.throwIfDisposed(),Ku(this,e,t)},ls.prototype.min=function(e,t){return this.throwIfDisposed(),Xu(this,e,t)},ls.prototype.minimumStrict=function(e){return this.throwIfDisposed(),Ch(this,e)},ls.prototype.minimum=function(e){return this.throwIfDisposed(),Yu(this,e)},ls.prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),Ju(this,e,t)},ls.prototype.modStrict=function(e){return this.throwIfDisposed(),Sh(this,e)},ls.prototype.mod=function(e){return this.throwIfDisposed(),Zu(this,e)},ls.prototype.mulStrict=function(e){return this.throwIfDisposed(),Th(this,e)},ls.prototype.mul=function(e){return this.throwIfDisposed(),ho(this,e)},ls.prototype.neg=function(){return this.throwIfDisposed(),Du(this)},ls.prototype.norm=function(e,t,n){return this.throwIfDisposed(),Fh(this,e,t,n)},ls.prototype.notEqualStrict=function(e){return this.throwIfDisposed(),kh(this,e)},ls.prototype.notEqual=function(e){return this.throwIfDisposed(),nc(this,e)},ls.prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),ti(this,e,t,n)},ls.prototype.onesLike=function(){return this.throwIfDisposed(),sc(this)},ls.prototype.pad=function(e,t){return this.throwIfDisposed(),ic(this,e,t)},ls.prototype.pool=function(e,t,n,r,s){return this.throwIfDisposed(),pc(this,e,t,n,r,s)},ls.prototype.powStrict=function(e){return this.throwIfDisposed(),Eh(this,e)},ls.prototype.pow=function(e){return this.throwIfDisposed(),To(this,e)},ls.prototype.prelu=function(e){return this.throwIfDisposed(),dc(this,e)},ls.prototype.prod=function(e,t){return this.throwIfDisposed(),fc(this,e,t)},ls.prototype.reciprocal=function(){return this.throwIfDisposed(),$c(this)},ls.prototype.relu=function(){return this.throwIfDisposed(),Cc(this)},ls.prototype.relu6=function(){return this.throwIfDisposed(),Sc(this)},ls.prototype.reshapeAs=function(e){return this.throwIfDisposed(),Qa(this,e.shape)},ls.prototype.reshape=function(e){return this.throwIfDisposed(),Qa(this,e)},ls.prototype.resizeBilinear=function(e,t){return this.throwIfDisposed(),bp(this,e,t)},ls.prototype.resizeNearestNeighbor=function(e,t){return this.throwIfDisposed(),xp(this,e,t)},ls.prototype.reverse=function(e){return this.throwIfDisposed(),Tc(this,e)},ls.prototype.rfft=function(){return this.throwIfDisposed(),Jc(this)},ls.prototype.round=function(){return this.throwIfDisposed(),Fc(this)},ls.prototype.rsqrt=function(){return this.throwIfDisposed(),Oc(this)},ls.prototype.selu=function(){return this.throwIfDisposed(),_c(this)},ls.prototype.separableConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),Mc(this,e,t,n,r,s,a)},ls.prototype.sigmoid=function(){return this.throwIfDisposed(),Il(this)},ls.prototype.sign=function(){return this.throwIfDisposed(),zc(this)},ls.prototype.sin=function(){return this.throwIfDisposed(),Bc(this)},ls.prototype.sinh=function(){return this.throwIfDisposed(),Pc(this)},ls.prototype.slice=function(e,t){return this.throwIfDisposed(),$l(this,e,t)},ls.prototype.softmax=function(e){return this.throwIfDisposed(),Hc(this,e)},ls.prototype.softplus=function(){return this.throwIfDisposed(),Fu(this)},ls.prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),hc(this,e,t)},ls.prototype.split=function(e,t){return this.throwIfDisposed(),Yc(this,e,t)},ls.prototype.sqrt=function(){return this.throwIfDisposed(),po(this)},ls.prototype.square=function(){return this.throwIfDisposed(),fo(this)},ls.prototype.squaredDifference=function(e){return this.throwIfDisposed(),Zc(this,e)},ls.prototype.squaredDifferenceStrict=function(e){return this.throwIfDisposed(),Ah(this,e)},ls.prototype.squeeze=function(e){return this.throwIfDisposed(),Qc(this,e)},ls.prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof ls?[this,e]:[this,...e];return eh(n,t)},ls.prototype.step=function(e){return this.throwIfDisposed(),th(this,e)},ls.prototype.stridedSlice=function(e,t,n,r,s,a,i,o){return this.throwIfDisposed(),nh(this,e,t,n,r,s,a,i,o)},ls.prototype.subStrict=function(e){return this.throwIfDisposed(),Rh(this,e)},ls.prototype.sub=function(e){return this.throwIfDisposed(),Eo(this,e)},ls.prototype.sum=function(e,t){return this.throwIfDisposed(),Mu(this,e,t)},ls.prototype.tan=function(){return this.throwIfDisposed(),rh(this)},ls.prototype.tanh=function(){return this.throwIfDisposed(),Cl(this)},ls.prototype.tile=function(e){return this.throwIfDisposed(),cu(this,e)},ls.prototype.toBool=function(){return this.throwIfDisposed(),Fa(this,"bool")},ls.prototype.toFloat=function(){return this.throwIfDisposed(),Fa(this,"float32")},ls.prototype.toInt=function(){return this.throwIfDisposed(),Fa(this,"int32")},ls.prototype.topk=function(e,t){return this.throwIfDisposed(),lh(this,e,t)},ls.prototype.transpose=function(e){return this.throwIfDisposed(),ni(this,e)},ls.prototype.unique=function(e){return this.throwIfDisposed(),ch(this,e)},ls.prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),hh(this,e,t)},ls.prototype.unstack=function(e){return this.throwIfDisposed(),ph(this,e)},ls.prototype.where=function(e,t){return this.throwIfDisposed(),nu(e,this,t)},ls.prototype.zerosLike=function(){return this.throwIfDisposed(),mo(this)};class Rf extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Rf.prototype)}}class Df extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Df.prototype)}}class Ff extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Ff.prototype)}}class Of extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Of.prototype)}}class _f extends Error{constructor(e){super(e),Object.setPrototypeOf(this,_f.prototype)}}function Mf(e,t){if(Array.isArray(e)){let n=[];for(let r=0;r<t;r++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function Lf(e,t){if(!e)throw new _f(t)}function zf(e,t){let n=0;for(const r of e)r===t&&n++;return n}function Bf(e){return 1===e.length?e[0]:e}function Pf(e){return Array.isArray(e)?e:[e]}function Wf(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function Vf(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}Error;let Uf={};function Gf(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function Hf(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>Hf(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?Hf(t):e[n]=t.value)}}}function jf(e,t={},n={},r="object",s=!1){if("string"==typeof e){const s=e;let a;if(s in n)a=n[s];else if(s in Uf)a=Uf[s];else if(a=t[s],null==a)throw new Ff(`Unknown ${r}: ${e}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=e;if(null==a.className||null==a.config)throw new Ff(`${r}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const i=a.className;let o,l;if(i in n?[o,l]=n[i]:i in Uf?[o,l]=Uf.className:i in t&&([o,l]=t[i]),null==o)throw new Ff(`Unknown ${r}: ${i}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const e={};for(const t of Object.keys(Uf))e[t]=Uf[t];for(const t of Object.keys(n))e[t]=n[t];a.config.customObjects=e;const t=Object.assign({},Uf);for(const e of Object.keys(n))Uf[e]=n[e];Hf(a.config);const r=l(o,a.config,n,s);return Uf=Object.assign({},t),r}{const e=Object.assign({},Uf);for(const e of Object.keys(n))Uf[e]=n[e];const t=new o(a.config);return Uf=Object.assign({},e),t}}}function qf(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function Kf(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function Xf(e){if(null==e)throw new Ff(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function Yf(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new Ff(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function Jf(e,t,n=0,r=1/0){return Lf(n>=0),Lf(r>=n),Array.isArray(e)&&e.length>=n&&e.length<=r&&e.every((e=>typeof e===t))}function Zf(e,t){Array.isArray(e)?(Z(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,n)=>Zf(e,`element ${n+1} of ${t}`)))):Z(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${Qf(e)}.`))}function Qf(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>Qf(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function em(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}function tm(e,t){return Xi((()=>po(Mu(ho(e,e),t,!0))))}class nm extends Si{getConfig(){return{}}}class rm extends nm{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Xi((()=>{const t=tm(e,this.axis),n=Ml(t,0,this.maxValue);return ho(e,co(n,lo(Af(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}rm.className="MaxNorm",Ei(rm);class sm extends nm{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Xi((()=>co(e,lo(Af(),tm(e,this.axis)))))}getConfig(){return{axis:this.axis}}}sm.className="UnitNorm",Ei(sm);class am extends nm{apply(e){return Cc(e)}}am.className="NonNeg",Ei(am);class im extends nm{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Xi((()=>{const t=tm(e,this.axis),n=lo(ho(this.rate,Ml(t,this.minValue,this.maxValue)),ho(1-this.rate,t));return ho(e,co(n,lo(Af(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}im.className="MinMaxNorm",Ei(im);const om={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function lm(e){return Gf(e)}function um(e,t={}){return jf(e,Ti.getMap().classNameMap,t,"constraint")}function cm(e){return null==e?null:"string"==typeof e?um({className:e in om?om[e]:e,config:{}}):e instanceof nm?e:um(e)}function hm(e){return new rm(e)}function pm(e){return new sm(e)}function dm(){return new am}function fm(e){return new im(e)}const mm=["channelsFirst","channelsLast"],gm=["valid","same","causal"],ym=["max","avg"],bm=["sum","mul","concat","ave"],xm=new Map;function wm(e){Yf(mm,"DataFormat",e)}function vm(e){Yf(gm,"PaddingMode",e)}function km(e){Yf(ym,"PoolMode",e)}const Nm=[];function Im(e,t){Nm.push(e);try{const e=t();return Nm.pop(),e}catch(e){throw Nm.pop(),e}}function $m(e){if(!Tm(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===Nm.length?"":Nm.join("/")+"/")+e}function Cm(e){if(!Tm(e))throw new Error("Not a valid tensor name: '"+e+"'");xm.has(e)||xm.set(e,0);const t=xm.get(e);if(xm.set(e,xm.get(e)+1),t>0){const n=`${e}_${t}`;return xm.set(n,1),n}return e}const Sm=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function Tm(e){return!!e.match(Sm)}function Em(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let r=1;for(let s=t;s<n;++s)r*=e[s];return r}function Am(e){return Nc(e=Array.isArray(e)?new Float32Array(e):e)}function Rm(e){return Xu(Am(e)).dataSync()[0]}function Dm(e){return _u(Am(e)).dataSync()[0]}function Fm(e,t){if(t<e)throw new Ff(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let r=e;r<t;++r)n.push(r);return n}function Om(e,t){return e.asType(t)}function _m(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),e.reshape(n)}function Mm(e,t,n){return Xi((()=>{switch(e.rank){case 1:return Wc(e,t,n);case 2:return Vc(e,[t,0],[n,e.shape[1]]);case 3:return Uc(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return Gc(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return $l(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return $l(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new Ff(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function Lm(e,t,n){return Xi((()=>{switch(e.rank){case 1:return Wc(e,t,n);case 2:return Vc(e,[0,t],[e.shape[0],n]);case 3:return Uc(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return Gc(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new Ff(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function zm(e,t,n,r){return Xi((()=>{switch(e.rank){case 1:return Wc(e,t,n);case 2:switch(r){case 1:return Mm(e,t,n);case 2:return Lm(e,t,n);default:throw new Ff(`The axis is not within the rank of the tensor ${r}`)}case 3:switch(r){case 1:return Mm(e,t,n);case 2:return Uc(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return Lm(e,t,n);default:throw new Ff(`The axis is not within the rank of the tensor ${r}`)}case 4:switch(r){case 1:return Mm(e,t,n);case 2:return Gc(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return Gc(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return Lm(e,t,n);default:throw new Ff(`The axis is not within the rank of the tensor ${r}`)}default:throw new Ff(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function Bm(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),Nl(e,t)}function Pm(e,t){switch(e.rank){case 1:return Ll([e,t]);case 2:return zl([e,t],0);case 3:return Bl([e,t],0);case 4:return Pl([e,t],0);default:throw new Ff(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function Wm(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new Ff(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return cu(e,t)}function Vm(e,t=0,n=1,r,s){return vc(e,t,n,r,s)}function Um(e,t,n,r){if(e.rank<2||t.rank<2)throw new Of(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3&&e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new Of(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`);if(2===e.rank&&2===t.rank)return Jh({a:e,b:t,transposeA:!1,transposeB:!1,bias:r?jm(e.rank,r,"channelsLast"):null,activation:n});{const s=e.shape.slice(),a=s.pop();e=e.reshape([-1,a]);const i=t.shape.slice(),o=i.pop(),l=i.pop(),u=[...i,o],c=Array.from({length:t.rank},((e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n));t=t.transpose(c).reshape([l,-1]);const h=[...s,...u];return Jh({a:e,b:t,transposeA:!1,transposeB:!1,bias:r?jm(e.rank,r,"channelsLast"):null,activation:n}).reshape(h)}}function Gm(e,t,n){return Xi((()=>(t=Array.isArray(t)?Nc(t,"int32"):t.toInt(),bu(e,t,n))))}function Hm(e){return ho(e,e)}function jm(e,t,n){const r=t.shape;if(1!==t.rank&&t.rank!==e)throw new Ff(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===r.length?t.reshape([1,r[0],1,1,1]):t.reshape([1,r[3],r[0],r[1],r[2]]);if("channelsLast"===n)return 1===r.length?t.reshape([1,1,1,1,r[0]]):t.reshape([1].concat(r))}else if(4===e){if("channelsFirst"===n)return 1===r.length?t.reshape([1,r[0],1,1]):t.reshape([1,r[2],r[0],r[1]]);if("channelsLast"===n)return 1===r.length?t.reshape([1,1,1,r[0]]):t.reshape([1].concat(r))}else if(3===e){if("channelsFirst"===n)return 1===r.length?t.reshape([1,r[0],1]):t.reshape([1,r[1],r[0]]);if("channelsLast"===n)return 1===r.length?t.reshape([1,1,r[0]]):t.reshape([1].concat(r))}else if(e<3)return t;throw new Ff(`Unsupported input rank by biasAdd: ${t.rank}`)}function qm(e,t,n){return Xi((()=>(null==n&&(n="channelsLast"),wm(n),e.add(jm(e.rank,t,n)))))}function Km(e,t,n,r){return Xi((()=>zh(e,t,n,r)))}function Xm(e,t,n=!1){return n?e():t()}const Ym=["fanIn","fanOut","fanAvg"],Jm=["normal","uniform","truncatedNormal"];class Zm extends Si{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class Qm extends Zm{apply(e,t){return ju(e,t)}}Qm.className="Zeros",Ei(Qm);class eg extends Zm{apply(e,t){return qu(e,t)}}eg.className="Ones",Ei(eg);class tg extends Zm{constructor(e){if(super(),"object"!=typeof e)throw new Ff(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new Ff(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return Xi((()=>ho(No(this.value),qu(e,t))))}getConfig(){return{value:this.value}}}tg.className="Constant",Ei(tg);class ng extends Zm{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return kc(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}ng.className="RandomUniform",Ei(ng);class rg extends Zm{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Of(`randomNormal does not support dType ${t}.`);return Vm(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}rg.className="RandomNormal",Ei(rg);class sg extends Zm{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Of(`truncatedNormal does not support dType ${t}.`);return uh(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}sg.className="TruncatedNormal",Ei(sg);class ag extends Zm{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return Xi((()=>{if(2!==e.length||e[0]!==e[1])throw new Ff("Identity matrix initializer can only be used for 2D square matrices.");return ho(this.gain,hu(e[0]))}))}getConfig(){return{gain:this.gain}}}ag.className="Identity",Ei(ag);class ig extends Zm{constructor(e){if(super(),e.scale<0)throw new Ff(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,Yf(Ym,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){Yf(Jm,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,r;if(wm(t),2===e.length)n=e[0],r=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=Em(e,2);n=e[1]*t,r=e[0]*t}else if("channelsLast"===t){const t=Em(e,0,e.length-2);n=e[e.length-2]*t,r=e[e.length-1]*t}}else{const t=Em(e);n=Math.sqrt(t),r=Math.sqrt(t)}return[n,r]}(e),r=n[0],s=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,r):"fanOut"===this.mode?a/=Math.max(1,s):a/=Math.max(1,(r+s)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Of(`${this.getClassName()} does not support dType ${t}.`);return uh(e,0,n,t,this.seed)}{const n=Math.sqrt(3*a);return kc(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}ig.className="VarianceScaling",Ei(ig);class og extends ig{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return ig.className}}og.className="GlorotUniform",Ei(og);class lg extends ig{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return ig.className}}lg.className="GlorotNormal",Ei(lg);class ug extends ig{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return ig.className}}ug.className="HeNormal",Ei(ug);class cg extends ig{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return ig.className}}cg.className="HeUniform",Ei(cg);class hg extends ig{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return ig.className}}hg.className="LeCunNormal",Ei(hg);class pg extends ig{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return ig.className}}pg.className="LeCunNormal",Ei(pg);class dg extends Zm{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new Of("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return Xi((()=>{if(e.length<2)throw new Of("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const t=Vm(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let n=Lp.gramSchmidt(t);return e[0]>e[1]&&(n=n.transpose()),ho(this.gain,n)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}dg.className="Orthogonal",Ei(dg);const fg={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function mg(e,t={}){return jf(e,Ti.getMap().classNameMap,t,"initializer")}function gg(e){return Gf(e)}function yg(e){if("string"==typeof e){const t=e in fg?fg[e]:e;if("GlorotNormal"===t)return new lg;if("GlorotUniform"===t)return new og;if("HeNormal"===t)return new ug;if("HeUniform"===t)return new cg;if("LeCunNormal"===t)return new hg;if("LeCunUniform"===t)return new pg;{const e={};return e.className=t,e.config={},mg(e)}}return e instanceof Zm?e:mg(e)}function bg(){return new Qm}function xg(){return new eg}function wg(e){return new tg(e)}function vg(e){return new ng(e)}function kg(e){return new rg(e)}function Ng(e){return new sg(e)}function Ig(e){return new ag(e)}function $g(e){return new ig(e)}function Cg(e){return new og(e)}function Sg(e){return new lg(e)}function Tg(e){return new ug(e)}function Eg(e){return new cg(e)}function Ag(e){return new hg(e)}function Rg(e){return new pg(e)}function Dg(e){return new dg(e)}let Fg=0;function Og(){return Fg++}const _g={};function Mg(e=""){return e in _g||(_g[e]=0),_g[e]+=1,e+_g[e].toString()}function Lg(e){return Array.isArray(e)&&Array.isArray(e[0])}function zg(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function Bg(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new Ff(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function Pg(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return(e=e)[0];throw new Ff(`Expected exactly 1 Shape; got ${e.length}`)}return e}function Wg(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}class Vg{constructor(e,t="float32",n="Variable",r=!0,s=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=Og(),n=null==n?"Variable":n,this.originalName=$m(n),this.name=Cm(this.originalName),this.trainable_=r,this.constraint=s,this.val=dh(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function Ug(e){return e.map((e=>e.read()))}function Gg(e){e.forEach((e=>{e[0].write(e[1])}))}class Hg{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class jg{constructor(e,t,n,r,s,a,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=r,this.callArgs=s,this.outputTensorIndex=i,this.id=Og(),null!=a&&(this.originalName=$m(a),this.name=Cm(this.originalName)),this.rank=t.length}}let qg=0;class Kg{constructor(e,t){this.callArgs=t,this.id=qg++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let Xg=0;class Yg extends Si{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=Xg++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=Wf(e)+"_"+Mg(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new Df(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new Ff(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return Bf(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return Bf(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Rf(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new Rf(`Layer ${this.name} is not connected, no input to return.`);return Bf(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new Rf(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new Rf(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return Bf(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=Pf(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=Pf(this.inputSpec);if(e.length!==t.length)throw new Ff(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){const r=e[n],s=t[n];if(null==s)continue;const a=r.rank;if(null!=s.ndim&&a!==s.ndim)throw new Ff(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${a}`);if(null!=s.maxNDim&&a>s.maxNDim)throw new Ff(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${a}`);if(null!=s.minNDim&&a<s.minNDim)throw new Ff(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${a}.`);if(null!=s.dtype&&r.dtype!==s.dtype)throw new Ff(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${r.dtype}.`);if(s.axes){const e=r.shape;for(const t in s.axes){const r=Number(t),a=s.axes[t],i=r>=0?e[r]:e[e.length+r];if(null!=a&&-1===[a,null].indexOf(i))throw new Ff(`Input ${n} is incompatible with layer ${this.name}: expected axis ${r} of input shape to have value ${a} but got shape ${e}.`)}}if(null!=s.shape)for(let e=0;e<s.shape.length;++e){const t=s.shape[e],a=r.shape[e];if(null!=t&&null!=a&&t!==a)throw new Ff(`Input ${n} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${r.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=Pf(e);let r=!0;for(const e of n)if(!(e instanceof jg)){r=!1;break}let s=!0;for(const e of n)if(e instanceof jg){s=!1;break}if(r===s)throw new Ff("Arguments to apply() must be all SymbolicTensors or all Tensors");return Im(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of Pf(e))t.push(n.shape);this.build(Bf(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&s&&(this._refCount=1)}if(this.assertInputCompatibility(e),s){let r=this.call(e,t);const s=Pf(r),a=[];for(let e of s)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(r=Bf(a),null!=this.activityRegularizer)throw new Of("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}{const n=function(e){e=Pf(e);const t=[];for(const n of e)t.push(n.shape);return Bf(t)}(e),r=this.computeOutputShape(n);let s;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),s=null!=r&&r.length>0&&Array.isArray(r[0])?r.map(((n,r)=>new jg(a,n,this,Pf(e),t,this.name,r))):new jg(a,r,this,Pf(e),t,this.name),this.addInboundNode(e,s,null,null,n,r,t),this._refCount++,null!=this.activityRegularizer)throw new Of("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,r)=>{null!=n&&null!=e[r]&&e[r]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new Rf(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new Rf(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new Df(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return Wg(this.weights)}build(e){this.built=!0}getWeights(e=!1){return Ug(e?this.trainableWeights:this.weights)}setWeights(e){Xi((()=>{const t=this.weights;if(t.length!==e.length)throw new Ff(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],r=Ug(t);for(let s=0;s<r.length;++s){const a=r[s],i=t[s],o=e[s];if(!se(a.shape,o.shape))throw new Ff(`Layer weight shape ${a.shape} not compatible with provided weight shape ${o.shape}`);n.push([i,o])}Gg(n)}))}addWeight(e,t,n,r,s,a,i){if(-1!==this._addedWeightNames.indexOf(e))throw new Ff(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=yg("zeros"));const o=r.apply(t,n),l=new Vg(o,n,e,a,i);return o.dispose(),null!=s&&this.addLoss((()=>s.apply(l.read()))),null==a&&(a=!0),a?this._trainableWeights.push(l):this._nonTrainableWeights.push(l),l}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=Pf(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}addInboundNode(e,t,n,r,s,a,i=null){const o=Pf(e);t=Pf(t),n=Pf(n),r=Pf(r),s=zg(s),a=zg(a);const l=[],u=[],c=[];for(const e of o)l.push(e.sourceLayer),u.push(e.nodeIndex),c.push(e.tensorIndex);new Kg({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:r,inputShapes:s,outputShapes:a},i);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function Jg(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const r=Jg(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of r)-1===t.indexOf(e)&&t.push(e)}return t}}}class Zg extends Yg{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:Mg("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new Ff("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new Ff("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new Ff("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const r=new jg(this.dtype,this.batchInputShape,this,[],{},this.name);r.nodeIndex=0,r.tensorIndex=0,new Kg({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[r],outputTensors:[r],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new Ff(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function Qg(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new Ff("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;return null==n&&(n="float32"),new Zg({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}async function ey(e){if(null==e)return;const t=[],n=[],r=[];for(const s in e){const a=e[s];if("number"!=typeof a){const e=a;t.push(e.data()),n.push(s),r.push(e)}}if(t.length>0){const s=await Promise.all(t);for(let t=0;t<s.length;++t)e[n[t]]=s[t][0];Yi(r)}}function ty(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var ny;Zg.className="InputLayer",Ei(Zg),function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(ny||(ny={}));class ry{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class sy{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class ay extends ry{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const r=t[e];if("number"==typeof r)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+r*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const s=Xi((()=>lo(this.totals[e],ho(r,n))));this.totals[e]=s,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:Xi((()=>{const n=ho(co(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),Ji(t[e])})))}}class iy extends ry{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const r in this.history){const s=this.history[r];for(let a=0;a<s.length;++a)if("number"!=typeof s[a]){const i=s[a];e.push(i.data()),t.push(r),n.push(a)}}const r=await Promise.all(e);for(let e=0;e<r.length;++e)this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=r[e][0]}}class oy extends ry{constructor(e,t){if(super(),this.currentEpoch=0,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");Ie(this.yieldEvery)&&(this.maybeWait=function(e,t){let n,r=es();return(...s)=>{const a=es();return a-r<t||(r=a,n=e(...s)),n}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const r=[];null!=this.yield&&(await ey(n),r.push(this.yield(e,t,n))),r.push(Vp()),await Promise.all(r)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await ey(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await ey(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(Vp()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await ey(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await ey(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(Vp()):Ie(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await ey(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await ey(e),await this.trainEnd(e))}}function ly(e,t){return null==e&&(e={}),e instanceof ry?[e]:Array.isArray(e)&&e[0]instanceof ry?e:Pf(e).map((e=>new oy(e,t)))}class uy{constructor(){}static registerCallbackConstructor(e,t){Z(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),uy.checkForDuplicate(t),null==uy.constructors[e]&&(uy.constructors[e]=[]),uy.constructors[e].push(t)}static checkForDuplicate(e){for(const t in uy.constructors)uy.constructors[+t].forEach((t=>{if(t===e)throw new Ff("Duplicate callback constructor.")}))}static clear(){uy.constructors={}}static createCallbacks(e){const t=[];for(const n in uy.constructors){const r=+n;e>=r&&t.push(...uy.constructors[r])}return t.map((e=>new e))}}function cy(e,t,n,r,s,a,i,o,l){const u=new iy,c=[new ay,...uy.createCallbacks(t)];null!=e&&c.push(...e),c.push(u);const h=new sy(c);return h.setParams({epochs:n,initialEpoch:r,samples:s,steps:a,batchSize:i,verbose:t,doValidation:o,metrics:l}),{callbackList:h,history:u}}function hy(e,t={},n=!1){return jf(e,Ti.getMap().classNameMap,t,"layer",n)}function py(e,t){return Xi((()=>{"float32"!==e.dtype&&(e=e.asType("float32"));const n=Mu(Hm(e),t,!0),r=Co(n.shape,Af()),s=po(_o(n,r));return co(e,s)}))}function dy(e,t){return Xi((()=>Ku(Hm(Eo(t,e)),-1)))}function fy(e,t){return Xi((()=>Ku(Ro(Eo(t,e)),-1)))}function my(e,t){return Xi((()=>{const n=Eo(e,t),r=Ml(Ro(e),Af(),Number.MAX_VALUE),s=Ro(co(n,r));return ho(100,Ku(s,-1))}))}function gy(e,t,n=!1){return Xi((()=>{if(n)t=Hc(t);else{const e=Mu(t,t.shape.length-1,!0);t=co(t,e)}return t=Ml(t,Af(),1-Af()),Du(Mu(ho(e.toFloat(),Au(t)),t.shape.length-1))}))}function yy(e,t,n=!1){return Xi((()=>{const r=pu(function(e){const t=[Em(e.shape)];return e.reshape(t)}(e)).toInt(),s=(t=Ml(t,Af(),1-Af())).shape;return gy(ti(r,s[s.length-1]).reshape(s),t,n)}))}function by(e,t){return Xi((()=>{let n;return n=Ml(t,Af(),1-Af()),n=Au(co(n,Eo(1,n))),Ku(function(e,t){if(!se(e.shape,t.shape))throw new Ff(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return Xi((()=>{const n=t.relu(),r=t.abs().neg();return n.sub(t.mul(e)).add(r.exp().log1p())}))}(e,n),-1)}))}function xy(e,t){return Xi((()=>{const n=py(e,-1),r=py(t,-1),s=ho(n,r);return Du(Mu(s,-1))}))}uy.constructors={};const wy={meanSquaredError:dy,meanAbsoluteError:fy,meanAbsolutePercentageError:my,meanSquaredLogarithmicError:function(e,t){return Xi((()=>{const n=Ml(t,Af(),Number.MAX_VALUE),r=Au(lo(1,n)),s=Ml(e,Af(),Number.MAX_VALUE),a=Au(lo(1,s));return Ku(Hm(Eo(r,a)),-1)}))},squaredHinge:function(e,t){return Xi((()=>{const n=_o(0,Eo(1,ho(e,t)));return Ku(Hm(n),-1)}))},hinge:function(e,t){return Xi((()=>{const n=_o(0,Eo(1,ho(e,t)));return Ku(n,-1)}))},categoricalHinge:function(e,t){return Xi((()=>{const n=Mu(ho(e,t),-1),r=_u(ho(Eo(1,e),t),-1);return _o(0,lo(1,Eo(r,n)))}))},logcosh:function(e,t){return Xi((()=>{const n=Math.log(2),r=Eo(t,e),s=Eo(lo(r,Fu(ho(-2,r))),n);return Ku(s,-1)}))},categoricalCrossentropy:gy,sparseCategoricalCrossentropy:yy,binaryCrossentropy:by,kullbackLeiblerDivergence:function(e,t){return Xi((()=>{const n=Ml(e,Af(),1),r=Ml(t,Af(),1);return Mu(ho(e,Au(co(n,r))),-1)}))},poisson:function(e,t){return Xi((()=>{const n=Au(lo(Af(),t));return Ku(Eo(t,ho(e,n)),-1)}))},cosineProximity:xy};function vy(e){if("string"==typeof e){if(e in wy)return wy[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new Ff(t)}return e}function ky(e,t){return Xi((()=>{const n=ho(.5,sc(t)),r=Om(xu(t,n),e.dtype);return Ku(tu(e,r),-1)}))}function Ny(e,t){return Xi((()=>Om(tu(Qo(e,-1),Qo(t,-1)),"float32")))}function Iy(e,t){return Xi((()=>Bu(e.equal(1),t.equal(1)).sum().cast("float32")))}function $y(e,t){return Xi((()=>{const n=Iy(e,t),r=function(e,t){return Xi((()=>Bu(e.equal(0),t.equal(1)).sum().cast("float32")))}(e,t),s=n.add(r);return nu(xu(s,0),n.div(s),0).cast("float32")}))}function Cy(e,t){return by(e,t)}function Sy(e,t){return e.rank===t.rank&&(e=e.squeeze([e.rank-1])),(t=t.argMax(-1)).dtype!==e.dtype&&(t=t.asType(e.dtype)),tu(e,t).asType("float32")}const Ty=gy,Ey=yy,Ay={binaryAccuracy:ky,categoricalAccuracy:Ny,precision:$y,categoricalCrossentropy:Ty,sparseCategoricalCrossentropy:Ey,mse:dy,MSE:dy,mae:fy,MAE:fy,mape:my,MAPE:my,cosine:xy};function Ry(e){if("string"==typeof e&&e in Ay)return Ay[e];if("string"!=typeof e&&null!=e)return e;throw new Ff(`Unknown metric ${e}`)}function Dy(e){if(Lf(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(wy))if(wy[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(Ay))if(Ay[n]===e){t=n;break}return void 0!==t?t:e.name}}function Fy(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!Oy(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function Oy(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!Oy(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!Oy(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function _y(e,t,n=console.log){let r="";for(let n=0;n<e.length;++n)n>0&&(r=r.slice(0,r.length-1)+" "),r+=e[n],r=r.slice(0,t[n]),r+=" ".repeat(t[n]-r.length);n(r)}function My(e,t,n){let r;try{r=JSON.stringify(e.outputShape)}catch(e){r="multiple"}_y([`${e.name} (${e.getClassName()})`,r,e.countParams().toString()],t,n)}function Ly(e,t,n,r){let s;try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}const a=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,r=t.nodeIndices[e],s=t.tensorIndices[e];a.push(`${n}[${r}][${s}]`)}const i=e.name,o=e.getClassName(),l=0===a.length?"":a[0];_y([`${i} (${o})`,s,e.countParams().toString(),l],t,r);for(let e=1;e<a.length;++e)_y(["","","",a[e]],t,r)}function zy(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function By(e,t){if(null===e)return null;if("string"==typeof e)return Vf(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],r=e.length;for(let s=0;s<r;++s){const r=e[s];zy(t,s,r)?n.push(r):n.push(By(r,t))}return n}{const t={};for(const n of Object.keys(e)){const r=e[n];if("name"===n&&"string"==typeof r)t[n]=r;else{const e=Vf(n);t[e]=By(r,e)}}return t}}function Py(e,t){if(null==e)return null;if("string"==typeof e)return Wf(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],r=e.length;for(let s=0;s<r;++s){const r=e[s];zy(t,s,r)?n.push(r):n.push(Py(r,t))}return n}{const t={};for(const n of Object.keys(e)){const r=e[n];t[Wf(n)]="name"!==n&&"className"!==n||"string"!=typeof r?Py(r,n):r}return t}}const Wy="2.7.0";class Vy{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof Vy)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new Ff(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return Fa(t,e.dtype)}catch(n){throw new Ff(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof jg){if(null==this.id2Value[e.id])throw new Ff(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new Ff(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof jg){if(null==this.id2Value[e.id])throw new Ff(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new Ff(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&Yi(this.id2Mask)}}const Uy={},Gy={};function Hy(e,t,n,r){const s=null!=n&&n.training,a=Array.isArray(e),i=a?e:[e],o=i.map((e=>e.name)),l=[],u=t.names();for(const e of o)-1!==u.indexOf(e)?l.push(t.getValue(e)):l.push(null);null!=r&&(r.maxNumTensors=-1/0,r.minNumTensors=1/0);const c=o.join(",")+"|"+t.names().join(",");let h,p;if(null==Uy[c]){const e=function(e,t){Z(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],r={};if(1===e.length){const s=qy(e[0],t);n=s.sorted,r=s.recipientMap}else{const s=new Set;for(const a of e){const{sorted:e,recipientMap:i}=qy(a,t);for(const t of e)s.has(t.name)||(n.push(t),s.add(t.name));for(const e in i)null==r[e]&&(r[e]=new Set),i[e].forEach((t=>r[e].add(t)))}}return{sorted:n,recipientCounts:jy(r)}}(i,t);h=e.sorted,p=e.recipientCounts,Uy[c]=h,Gy[c]=p}h=Uy[c],p={},s||Object.assign(p,Gy[c]);const d=new Vy(t);for(let e=0;e<h.length;++e){if(null!=r){const e=qi().numTensors;e>r.maxNumTensors&&(r.maxNumTensors=e),e<r.minNumTensors&&(r.minNumTensors=e)}const a=h[e],i=a.sourceLayer;if(i instanceof Zg)continue;const u=[],c=[],f=[];let m=!1;for(const e of a.inputs){const n=d.getValue(e),r=d.getMask(e);u.push(n),c.push(r),null!=r&&(m=!0),s||(p[e.name]--,0!==p[e.name]||t.hasKey(e)||-1!==o.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=Pf(i.apply(u,n));let y=null;i.supportsMasking&&(y=i.computeMask(u,c));const b=Ky(a),x=Array.isArray(b)?b:[b];for(let e=0;e<x.length;++e){d.hasKey(x[e])||d.add(x[e],g[e],Array.isArray(y)?y[0]:y);const t=o.indexOf(x[e].name);-1!==t&&(l[t]=g[e])}s||Yi(f)}return d.disposeMasks(),a?l:l[0]}function jy(e){const t={};for(const n in e)t[n]=e[n].size;return t}function qy(e,t){const n=new Set,r=[],s={};for(const e of t.names())n.add(e);const a=[],i=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=i[i.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),r.push(e),n.add(e.name),t&&i.pop();else{i.push(a.length-1);for(const t of e.inputs)null==s[t.name]&&(s[t.name]=new Set),s[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:r,recipientMap:s}}function Ky(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const r of e.sourceLayer.inboundNodes[t].outputTensors)if(r.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}class Xy extends Yg{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=Mg(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],Kf(this.inputs).length!==this.inputs.length)throw new Ff(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);Kf(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,r=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(r)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,r=e.tensorIndex;Lf(0===n,"input layer has >1 nodes"),Lf(0===r,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(r)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof Zg))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},r={},s={},a={},i=[],o=(e,t,n,r,s,l)=>{null!=r&&null!=s&&null!=l||(r=e.sourceLayer,s=e.nodeIndex,l=e.tensorIndex);const u=r.inboundNodes[s];if(-1!==n.indexOf(u))throw new Df(`The tensor ${e.name} at layer "${r.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(Xy.nodeKey(r,s)),r.id in a||(a[r.id]=Object.keys(a).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let e=0;e<c;e++){const r=u.inputTensors[e],s=u.inboundLayers[e],a=u.nodeIndices[e],i=u.tensorIndices[e];o(r,t,n,s,a,i)}for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(const e of this.outputs)o(e,l,u);const c=i.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let a=t[e.id];const i=null==r[e.outboundLayer.id]?0:r[e.outboundLayer.id];a=Math.max(a,i),r[e.outboundLayer.id]=a,s[e.outboundLayer.id]=e.outboundLayer,t[e.id]=a;for(let r=0;r<e.inboundLayers.length;r++){const s=e.inboundLayers[r],i=e.nodeIndices[r],o=s.inboundNodes[i],l=null==t[o.id]?0:t[o.id];t[o.id]=Math.max(a+1,l),n[o.id]=o}}const h={};for(const e in t){const r=t[e];r in h||(h[r]=[]),h[r].push(n[e])}const p={};for(const e in r){const t=r[e];t in p||(p[t]=[]),p[t].push(s[e])}let d=Object.keys(p).map((e=>parseInt(e,10))).sort(qf);this.layers=[];for(const e of d){const t=p[e];t.sort(((e,t)=>{const n=a[e.id],r=a[t.id];return n<r?-1:n>r?1:0}));for(const e of t)e instanceof Xy&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=p,d=Object.keys(h).map((e=>parseInt(e,10))).sort(qf);const f=this.inputs.slice(),m=[];for(const e of d)for(const t of h[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new Df(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=h;const g=this.layers.map((e=>e.name));for(const e of g){const t=g.filter((t=>t===e)).length;if(1!==t)throw new Df(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new Kg({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new Ff("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let r=0;for(const e of this.layers)for(const t of e.weights){if(null!=n[t.originalName])throw new Ff(`Duplicate weight name: ${t.originalName}`);n[t.originalName]=t,r++}const s=[];for(const r in e){let a=r;if(null==n[r]){const e=r.split("/");a=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[a])s.push([n[a],e[r]]);else if(t)throw new Ff(`Provided weight data has no target variable: ${r}`);delete n[a]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new Ff(`${e.length} of ${r} weights are not set: ${e}`)}Gg(s)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion=`tfjs-layers ${Wy}`,t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=Py(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return Xi((()=>{e=Pf(e);const n=new Vy;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return Hy(this.outputs,n,t)}))}computeMask(e,t){return Xi((()=>{let n;return e=Pf(e),n=null==t?Mf(null,e.length):Pf(t),this.runInternalGraph(e,n)[1]}))}computeOutputShape(e){const t=zg(e);if(t.length!==this.inputLayers.length)throw new Ff(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const r=this.inputLayers[e],s=t[e];n[r.name+"_0_0"]=s}const r=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(qf);if(r.length>1)for(const e of r){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(t.id))continue;const r=[];for(let t=0;t<e.inboundLayers.length;t++){const s=e.inboundLayers[t],a=e.nodeIndices[t],i=e.tensorIndices[t],o=n[`${s.name}_${a}_${i}`];r.push(o)}const s=zg(t.computeOutputShape(Bf(r))),a=t.inboundNodes.indexOf(e);for(let e=0;e<s.length;e++)n[`${t.name}_${a}_${e}`]=s[e]}}const s=[],a=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],r=this.outputLayersTensorIndices[e],s=`${t.name}_${n}_${r}`;a.push(s)}for(let e=0;e<a.length;e++){const t=a[e];Lf(t in n),s.push(n[t])}return Bf(s)}runInternalGraph(e,t){null==t&&(t=Mf(null,e.length));const n={};for(let r=0;r<this.inputs.length;++r){const s=this.inputs[r],a=e[r],i=t[r];n[s.id]=[a,i]}const r=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(qf);for(const e of r){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,r=e.inputTensors,s=e.outputTensors,a=new Array;for(const e of r)e.id in n&&a.push(n[e.id]);if(a.length===r.length){let r,i,o,l,u={};if(null!=e.callArgs&&(u=e.callArgs),1===a.length){const[e,n]=a[0];null==u.mask&&(u.mask=n),o=Pf(t.call(e,u)),l=Pf(t.computeMask(e,n)),r=[e],i=[n]}else r=a.map((e=>e[0])),i=a.map((e=>e[1])),null==u.mask&&(u.mask=i),o=Pf(t.call(r,u)),l=Pf(t.computeMask(r,i));if(t.activityRegularizer)throw new Of("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<s.length;++e){const t=s[e],r=o[e],a=l[e];n[t.id]=[r,a]}}}}const s=[],a=[],i=[];for(const e of this.outputs){Lf(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,r]=n[e.id];i.push(t.shape),s.push(t),a.push(r)}return[s,a,i]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof Xy?1:0;for(let r=0;r<e.inboundNodes.length;r++){const s=Xy.nodeKey(e,r);this.containerNodes.has(s)&&(t[s]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new Ff(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new Ff("Provide either a layer name or layer index");for(const t of this.layers)if(t.name===e)return t;throw new Ff(`No such layer: ${e}`)}calculateLosses(){return Xi((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const r=Xy.nodeKey(t,n);this.containerNodes.has(r)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const r=e.getClassName(),s=e.getConfig(),a=[];for(let n=0;n<e.inboundNodes.length;n++){const r=e.inboundNodes[n],s=Xy.nodeKey(e,n);let i={};if(this.containerNodes.has(s)){if(r.callArgs)try{JSON.stringify(r.callArgs),i=r.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${r.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),i={}}if(r.inboundLayers.length>0){const e=[];for(let n=0;n<r.inboundLayers.length;n++){const s=r.inboundLayers[n],a=r.nodeIndices[n],o=r.tensorIndices[n];let l=t[Xy.nodeKey(s,a)];null==l&&(l=0),e.push([s.name,l,o,i])}a.push(e)}}}const i={};i.name=e.name,i.className=r,i.config=s,i.inboundNodes=a,n.push(i)}e.layers=n;const r=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],s=this.inputLayersNodeIndices[e],a=Xy.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.inputLayersTensorIndices[e];r.push([n.name,i,o])}e.inputLayers=r;const s=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],r=this.outputLayersNodeIndices[e],a=Xy.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.outputLayersTensorIndices[e];s.push([n.name,i,o])}return e.outputLayers=s,e}static fromConfig(e,t,n={},r=!1){const s={},a={};function i(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}function o(e,t){const n=[];let r;for(const a of t){const o=a[0],l=a[1],u=a[2];if(r=null==a[3]?{}:a[3],!(o in s))return void i(e,t);const c=s[o];if(c.inboundNodes.length<=l)return void i(e,t);const h=c.inboundNodes[l];n.push(h.outputTensors[u])}n.length>0&&e.apply(Bf(n),r)}function l(e){const n=e.name,a=hy(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(r),s[n]=a,e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new Ff(`Corrupted configuration, expected array for nodeData: ${e}`);i(a,e)}))}const u=t.name,c=t.layers;for(const e of c)l(e);for(;!Xf(a);)for(const e of c){const t=s[e.name];if(t.name in a){const e=a[t.name];delete a[t.name];for(const n of e)o(t,n)}}const h=[],p=[],d=t.inputLayers;for(const e of d){const t=e[0],n=e[1],r=e[2];Lf(t in s);const a=s[t].inboundNodes[n].outputTensors;h.push(a[r])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],r=e[2];Lf(t in s);const a=s[t].inboundNodes[n].outputTensors;p.push(a[r])}return new e({inputs:h,outputs:p,name:u})}get stateful(){if(this._stateful)throw new Ff("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){Xi((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function Yy(e,t){return function(e,t,n){const r=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===r)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==r)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${r}) outputs, so ${n} must be either an array with ${r} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}(e,t,"classWeight")}async function Jy(e,t,n,r){if(null!=t||null!=r)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=Xi((()=>{if(1===e.shape.length)return e.clone();if(2===e.shape.length){if(e.shape[1]>1){const t=1;return e.argMax(t)}if(1===e.shape[1])return e.reshape([e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),r=Array.from(await t.data());Yi(t);const s=[];return r.forEach((e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);s.push(n[e])})),Nc(s,"float32")}return null}function Zy(e,t){return ho(e,t)}function Qy(e,t){let n,r;const s=t;n=s.xs,r=s.ys,Z(null!=n&&null!=r,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const a=eb("input",e.inputNames,n),i=eb("output",e.outputNames,r),o=a[0].shape[0];Z(a.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),Z(i.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let t=0;t<a.length;t++)Z(a[t].shape[0]===o,(()=>`Batch size mismatch: input ${e.inputNames[t]} has ${a[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));for(let t=0;t<i.length;t++)Z(i[t].shape[0]===o,(()=>`Batch size mismatch: output ${e.outputNames[t]} has ${i[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));return{xs:a,ys:i}}function eb(e,t,n){if(n instanceof ls)return[n];if(Array.isArray(n))return Z(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const r=[];for(const s of t){if(null==n[s])throw new Ff(`The feature data generated by the dataset lacks the required ${e} key '${s}'.`);r.push(n[s])}return r}}function tb(e){return"function"==typeof e.iterator}function nb(e){Z(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function rb(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>Mm(e,t,n-t))):Mm(e,t,n-t)}function sb(e,t){return Xi((()=>null==e?null:Array.isArray(e)?e.map((e=>sb(e,t))):Gm(e,"int32"===t.dtype?t:t.toInt())))}function ab(e,t){const n=[];let r=0,s=null;for(;r<e;)s=r+t,s>=e&&(s=e),n.push([r,s]),r=s;return n}function ib(e){const t=[];e instanceof ls&&(e=[e]);for(let n=0;n<e.length;++n){const r=e[n];if(1===r.rank)t.push(_m(r,1));else{if(0===r.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(r)}}return t}function ob(e,t){if(null==e)return;const n=[];if(t instanceof ls)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const e in t){const r=t[e];n.push(r.id)}const r=[];if(e instanceof ls)-1===n.indexOf(e.id)&&r.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&r.push(e)}));else if(null!=e)for(const t in e){const s=e[t];-1===n.indexOf(s.id)&&r.push(s)}r.forEach((e=>{e.isDisposed||e.dispose()}))}function lb(e){return Array.isArray(e)}function ub(e){return!function(e){return e instanceof ls}(e)&&!lb(e)}function cb(e,t,n,r=!0,s=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(lb(e)&&e.length>0)t=!0;else if(ub(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new Ff(`Error when checking model ${s} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));let a;if(ub(e)){e=e,a=[];for(const n of t){if(null==e[n])throw new Ff(`No data provided for "${n}". Need data for each key in: ${t}`);a.push(e[n])}}else if(lb(e)){if((e=e).length!==t.length)throw new Ff(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);a=e}else{if(e=e,t.length>1)throw new Ff(`The model ${s} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);a=[e]}if(a=ib(a),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new Ff(`Error when checking ${s}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${i.shape}`);for(let a=0;a<n[e].length;++a){if(0===a&&!r)continue;const o=i.shape[a],l=n[e][a];if(null!=l&&l>=0&&o!==l)throw new Ff(`Error when checking ${s}: expected ${t[e]} to have shape [${n[e]}], but got array with shape [${i.shape}].`)}}return a}function hb(e,t,n,r=!0,s=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new Ff(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new Ff(`The model expects ${t.length} ${s} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);a=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new Ff(`Error when checking ${s}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let a=0;a<n[e].length;++a){if(0===a&&!r)continue;const o=i.shape[a],l=n[e][a];if(null!=l&&l!==o)throw new Ff(`Error when checking ${s}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class pb extends Xy{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new Ff("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function(e,t,n,r=console.log){const s=function(e){let t=!0;const n=[],r=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}r.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const s of n.inboundNodes)if(-1!==r.indexOf(s)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Output shape","Param #"];let i;if(s?(t=t||65,n=n||[.45,.85,1]):(t=t||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!s){a.push("Receives inputs"),i=[];for(const t in e.nodesByDepth)i.push(...e.nodesByDepth[t])}r("_".repeat(t)),_y(a,n,r),r("=".repeat(t));const o=e.layers;for(let e=0;e<o.length;++e)s?My(o[e],n,r):Ly(o[e],n,i,r),r((e===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const l=function(e){let t;return t=null!=e.collectedTrainableWeights?Wg(e.collectedTrainableWeights):Wg(e.trainableWeights),t}(e),u=Wg(e.nonTrainableWeights);r(`Total params: ${l+u}`),r(`Trainable params: ${l}`),r(`Non-trainable params: ${u}`),r("_".repeat(t))}(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>Pp.adagrad(.01),Adadelta:()=>Pp.adadelta(1,.95,Af()),Adam:()=>Pp.adam(.001,.9,.999,Af()),Adamax:()=>Pp.adamax(.002,.9,.999,Af(),0),RMSProp:()=>Pp.rmsprop(.001,.9,0,Af()),SGD:()=>Pp.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new Ff(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof Io))throw new Ff("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new Ff(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map((e=>vy(e)))}else{const n=vy(e.loss);this.outputs.forEach((e=>{t.push(n)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new Ff(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(vy(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],Im("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const r=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const r of t){let t=n.hasOwnProperty(r)?n[r]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),s=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};Im("metric",(()=>{for(let e=0;e<this.outputs.length;++e)-1===n.indexOf(e)&&(t=>{let n,r,a;for(const i of t){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const t=this.internalOutputShapes[e];let s;1===t[t.length-1]||this.lossFunctions[e]===by?-1!==["accuracy","acc"].indexOf(i)?r=ky:-1!==["crossentropy","ce"].indexOf(i)&&(r=Cy):this.lossFunctions[e]===yy?-1!==["accuracy","acc"].indexOf(i)?r=Sy:-1!==["crossentropy","ce"].indexOf(i)&&(r=Ey):-1!==["accuracy","acc"].indexOf(i)?r=Ny:-1!==["crossentropy","ce"].indexOf(i)&&(r=Ty),-1!==["accuracy","acc"].indexOf(i)?s="acc":-1!==["crossentropy","ce"].indexOf(i)&&(s="ce"),a=r,n=""+s}else{const e=Ry(i);a=e,n=""+Dy(i)}let t;Im(n,(()=>{t=a})),s(e,n,t)}})(r[e])})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const r=null==n.batchSize?32:n.batchSize;nb(r);const s=this.standardizeUserDataXY(e,t,!0,r);try{const a=s[0].concat(s[1]);this.makeTestFunction();const i=this.testFunction;return Bf(this.testLoop(i,a,r,n.verbose,n.steps))}finally{ob(s[0],e),ob(s[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const r=null!=(n=n||{}).batches,s=e.testFunction;let a=[];if(n.verbose>0)throw new Of("Verbose mode is not implemented yet.");Z(!r||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const i="function"==typeof t.next?t:await t.iterator();let o=0,l=0;for(;!r||l<n.batches;){const t=await i.next();if(a=Xi((()=>{if(t.value){const{xs:n,ys:r}=Qy(e,t.value),i=n.concat(r),u=Xi((()=>s(i)));if(Yi(i),0===l)for(let e=0;e<u.length;++e)a.push(No(0));const c=i[0].shape[0];for(let e=0;e<u.length;++e){const t=u[e],n=a[e];a[e]=Xi((()=>lo(a[e],ho(c,t)))),l>0&&Yi(n)}Yi(u),o+=c,++l}return a})),t.done){r&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<a.length;++e){const t=a[e];a[e]=co(a[e],o),Yi(t)}return Bf(a)}(this,e,t)}checkNumSamples(e,t,n,r="steps"){let s;if(null!=n){if(s=null,null!=t)throw new Ff(`If ${r} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new Ff(`Either the input data should have a defined shape, or ${r} shoud be specified.`);s=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return s}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new Ff("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),r=n?t:[t],s=this.retrieveSymbolicTensors(r),a=new Vy;if(e instanceof ls&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new Ff(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)a.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new Ff(`No value is provided for the model's input ${t.name}`);a.add(t,n)}const i=Hy(s,a);return n?i:i[0]}retrieveSymbolicTensors(e){const t=Mf(null,e.length);let n=e.length;for(const r of this.layers){const s=Array.isArray(r.output)?r.output:[r.output],a=s.map((e=>e.name));for(let r=0;r<e.length;++r){const i=a.indexOf(e[r]);if(-1!==i&&(t[r]=s[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,r)=>{null==t&&n.push(e[r])})),new Ff(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return Xi((()=>{const r=this.checkNumSamples(e);if(n)throw new Of("Verbose predictLoop() is not implemented yet.");const s=ab(r,t),a=this.outputs.map((e=>[]));for(let t=0;t<s.length;++t)Xi((()=>{const n=s[t][0],r=s[t][1],a=rb(e,n,r),i=[];if(Array.isArray(a))for(let e=0;e<a.length;++e)i.push({key:this.inputs[e],value:a[e]});else i.push({key:this.inputs[0],value:a});const o=new Vy(i);return Hy(this.outputs,o)})).forEach(((e,t)=>a[t].push(e)));return Bf(a.map((e=>Nl(e,0))))}))}predict(e,t={}){const n=ib(e);hb(n,this.inputNames,this.feedInputShapes,!1);try{const r=null==t.batchSize?32:t.batchSize;return nb(r),this.predictLoop(n,r)}finally{ob(n,e)}}predictOnBatch(e){hb(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,r){if(null==this.optimizer_)throw new Df("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const s=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===yy?s.push(t.slice(0,t.length-1).concat([1])):s.push(t)}if(function(e,t,n){const r=Kf(e.map((e=>e.shape[0])));r.sort();const s=Kf(t.map((e=>e.shape[0])));if(s.sort(),r.length>1)throw new Ff(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e=>e.shape)))}`);if(s.length>1)throw new Ff(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(r.length>0&&s.length>0&&!se(r,s))throw new Ff(`Input Tensors should have the same number of samples as target Tensors. Found ${r[0]} input sample(s) and ${s[0]} target sample(s).`)}(e=cb(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=cb(t,this.feedOutputNames,s,!1,"target")),function(e,t,n){const r=[dy,by,gy];for(let s=0;s<e.length;++s){const a=e[s],i=t[s],o=n[s];if(null!=i){if(i===gy&&1===a.shape[a.shape.length-1])throw new Ff(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==r.indexOf(i)){const e=a.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){const r=e[n],s=t[n];if(null!=s&&r!==s)throw new Ff(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=r&&r>0&&e[0].shape[0]%r!=0)throw new Ff(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,r,s=!0,a){const[i,o]=this.standardizeUserDataXY(e,t,s,a);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=r){const e=Yy(r,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await Jy(o[t],null,e[t]))}return[i,o,l]}testLoop(e,t,n,r=0,s){return Xi((()=>{const a=this.checkNumSamples(t,n,s,"steps"),i=[];if(r>0)throw new Of("Verbose mode is not implemented yet.");if(null!=s)throw new Of("steps mode in testLoop() is not implemented yet");{const r=ab(a,n),s=Nc(Fm(0,a));for(let n=0;n<r.length;++n){const a=r[n][0],o=r[n][1],l=Mm(s,a,o-a),u=sb(t,l),c=e(u);if(0===n)for(let e=0;e<c.length;++e)i.push(No(0));for(let e=0;e<c.length;++e){const t=c[e];i[e]=lo(i[e],ho(o-a,t))}}for(let e=0;e<i.length;++e)i[e]=co(i[e],a)}return i}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const r=e[n];let s=r;zf(e,r)>1&&(s+=`_${zf(e.slice(0,n),r)}`),t.push(s)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const i=new Vy(e),o=Hy(this.outputs,i,{training:!0});let l;for(let e=0;e<this.lossFunctions.length;++e){let n=(0,this.lossFunctions[e])(r[e],o[e]);null!=s[e]&&(n=Zy(n,s[e]));const a=Ku(n);t.push(a),l=0===e?n:lo(l,n)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{const t=this.metricsTensors[e][0],s=this.metricsTensors[e][1];n=Ku(t(r[s],o[s]))}Ji(n),a.push(n)}return l=Ku(l),this.calculateLosses().forEach((e=>{l=lo(l,e)})),l}),!0,i)].concat(a)}}makeTestFunction(){this.testFunction=e=>Xi((()=>{const t=[];let n;const r=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let e=0;e<this.inputs.length;++e)a.push({key:this.inputs[e],value:r[e]});const i=new Vy(a),o=Hy(this.outputs,i);for(let e=0;e<this.lossFunctions.length;++e){const r=this.lossFunctions[e],a=Ku(r(s[e],o[e]));n=0===e?a:lo(n,a),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],r=this.metricsTensors[e][1],a=Ku(n(s[r],o[r]));t.push(a)}return t}))}async fit(e,t,n={}){return async function(e,t,n,r={}){if(e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let s,a,i,o,l,u,c;e.isTraining=!0;try{const h=null==r.batchSize?32:r.batchSize;nb(h);const p=!1,d=await e.standardizeUserData(t,n,r.sampleWeight,r.classWeight,p,h);s=d[0],a=d[1],c=d[2];let f,m=!1;if(null!=r.validationData&&r.validationData.length>0){if(m=!0,2!==r.validationData.length)throw 3===r.validationData.length?new Of("validationData including sample weights is not supported yet."):new Ff(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${r.validationData} is invalid.`);i=r.validationData[0],o=r.validationData[1];const t=!0,n=await e.standardizeUserData(i,o,null,null,t,h);l=n[0],u=n[1],f=l.concat(u)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){m=!0;const e=Math.floor(s[0].shape[0]*(1-r.validationSplit)),t=s[0].shape[0];l=rb(s,e,t),s=rb(s,0,e),u=rb(a,e,t),a=rb(a,0,e),f=l.concat(u)}else null!=r.validationSteps&&(m=!0);const g=s.concat(a).concat(c);e.checkTrainableWeightsConsistency();const y=e.makeTrainFunction(),b=e.getDedupedMetricsNames();let x,w;m?(e.makeTestFunction(),x=e.testFunction,w=b.slice().concat(b.map((e=>"val_"+e)))):(x=null,f=[],w=b.slice());const v=ly(r.callbacks,r.yieldEvery);return await async function(e,t,n,r,s,a,i,o,l,u,c,h,p,d,f){null==s&&(s=32),null==a&&(a=1),null==c&&(c=!0),null==p&&(p=0);let m=!1;null!=l&&null!=u&&(m=!0);const g=e.checkNumSamples(n,s,d,"steps_per_epoch");let y;null!=g&&(y=Fm(0,g)),null==i&&(i=1);const{callbackList:b,history:x}=cy(o,i,a,p,g,d,s,m,h);b.setModel(e),e.history=x,await b.onTrainBegin(),e.stopTraining_=!1;for(let i=p;i<a;++i){await b.onEpochBegin(i);const a={};{if("batch"===c)throw new Of("batch shuffling is not implemneted yet");c&&j(y);const i=Nc(y),o=ab(g,s);for(let c=0;c<o.length;++c){const h={};if(await b.onBatchBegin(c,h),Xi((()=>{const p=o[c][0],d=o[c][1],f=Mm(i,p,d-p);h.batch=c,h.size=d-p;const g=sb(n,f),y=t(g);for(let e=0;e<r.length;++e){const t=r[e],n=y[e];h[t]=n,Ji(n)}if(c===o.length-1&&m){const t=e.testLoop(l,u,s);for(let e=0;e<r.length;++e){const n=r[e],s=t[e];Ji(s),a["val_"+n]=s}}})),await b.onBatchEnd(c,h),ty(h),e.stopTraining_)break}i.dispose()}if(await b.onEpochEnd(i,a),e.stopTraining_)break}return await b.onTrainEnd(),await e.history.syncData(),e.history}(e,y,g,b,h,r.epochs,r.verbose,v,x,f,r.shuffle,w,r.initialEpoch,null)}finally{e.isTraining=!1,ob(s,t),ob(a,n),ob(l,i),ob(u,o),null!=c&&Yi(c)}}(this,e,t,n)}async fitDataset(e,t){return async function(e,t,n){const r=null!=n.batchesPerEpoch;if(Z(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),Z(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),Z(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),Z(!r||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),Z(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const s=null!=n.validationData;let a,i;if(s)if(tb(n.validationData))Z(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const e=function(e){if(3===e.length)throw new Of("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);a=e.xs,i=e.ys}const o=e.makeTrainFunction(),l=e.getDedupedMetricsNames();let u;u=s?l.slice().concat(l.map((e=>"val_"+e))):l.slice();const c=ly(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,{callbackList:p,history:d}=cy(c,h,n.epochs,null,null,function(e,t){let n=null;return null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size),n}(t,n),null,s,u);p.setModel(e),e.history=d,await p.onTrainBegin(),e.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await t.iterator();for(;f<n.epochs;){const u={};await p.onEpochBegin(f);let c=0,h=0;for(r||(m=await t.iterator());!r||c<n.batchesPerEpoch;){const t=await m.next();if(r&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:r,ys:s}=Qy(e,t.value),a={};a.batch=h,a.size=r[0].shape[0],await p.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const t=Yy(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)i.push(await Jy(s[e],null,t[e]))}const u=r.concat(s).concat(i),d=o(u);Yi(u);for(let e=0;e<l.length;++e){const t=l[e],n=d[e];a[t]=n,Ji(n)}await p.onBatchEnd(h,a),ty(a),h++,c++}if(r?c>=n.batchesPerEpoch:t.done){if(s){let t;t=tb(n.validationData)?Pf(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):Pf(e.evaluate(a,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)u[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await p.onEpochEnd(f,u),f++,e.stopTraining_)break}return await p.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),r=n[0],s=n[1],a=this.makeTrainFunction()(r.concat(s)),i=[];for(const e of a){const t=await e.data();i.push(t[0])}return Yi(a),Bf(i)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,r=n?this.trainableWeights:this.weights,s=this.getWeights(n);for(let e=0;e<r.length;++e)n&&!r[e].trainable||t.push({name:r[e].originalName,tensor:s[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=qi().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-qi().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=Wf(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>Wf(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const r of t){if("string"!=typeof n[r])throw new Error("Serialization of non-string loss is not supported.");e[r]=Wf(n[r])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[Wf(Dy(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>Wf(Dy(e))));{const e={};for(const t in this.metrics)e[t]=Wf(Dy(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=hy(By(e.optimizer_config));let n,r;if("string"==typeof e.loss)n=Vf(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>Vf(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=Vf(e.loss[t])}if(Array.isArray(e.metrics))r=e.metrics.map((e=>Vf(e)));else if(null!=e.metrics){r={};for(const t in e.metrics)r[t]=Vf(e.metrics[t])}this.compile({loss:n,metrics:r,optimizer:t})}async save(e,t){if("string"==typeof e){const t=ea(e);if(0===t.length)throw new Ff(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Ff(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Ff("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await Vs(this.getNamedWeights(t)),r={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:`TensorFlow.js tfjs-layers v${Wy}`,convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:s}=await Vs(await this.optimizer.getWeights(),e);n.specs.push(...s),n.data=qs([n.data,t])}if(null!=this.userDefinedMetadata){const e=!0;Fy(this.userDefinedMetadata,this.name,e),r.userDefinedMetadata=this.userDefinedMetadata}return r.weightData=n.data,r.weightSpecs=n.specs,e.save(r)}setUserDefinedMetadata(e){Fy(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}pb.className="Model",Ei(pb);class db extends pb{}async function fb(e,t){"modelTopology"in e||(e={modelTopology:e});let n=(e=e).modelTopology;null!=n.model_config&&(n=n.model_config);const r=hy(By(n),t);if(null!=e.weightsManifest){const t=await Va(e.weightsManifest,e.pathPrefix,r.weights.map((e=>e.originalName))),n={};for(const e of r.weights)n[e.originalName]=t[e.originalName];r.loadWeights(n),Yi(t)}return r}db.className="Functional",Ei(db);class mb extends pb{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:Mg("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new Ff(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof mb||e instanceof pb;let n;if(t){if(n=e,1!==n.outputs.length)throw new Ff("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new Ff("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new Ff("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=Qg({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new Ff(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new Ff("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=Jg(this.outputs[0])}this.inboundNodes=[],new Kg({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:Mf(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(Pg(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new pb({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new Df("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new Df("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new Df("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new Df("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},r=!1){let s,a={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new Ff("Legacy serialization format not supported yet.");s=t}else Z(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),s=t.layers,delete t.layers,a=t;const i=new e(a);if(!(i instanceof mb))throw new Of(`Sequential.fromConfig called on non-Sequential input: ${i}`);for(const e of s){const t=hy(e,void 0,r);r&&t.setFastWeightInitDuringBuild(!0),i.add(t)}return i}set stopTraining(e){if(null==this.model)throw new Ff("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new Ff("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}function gb(e){return new pb(e)}function yb(e){return new mb(e)}function bb(e,t){return null==t&&(t={}),async function(e,t){if(null==t&&(t={}),"string"==typeof e){const n=ta(e,t);if(0===n.length)n.push(Ka(e,t));else if(n.length>1)throw new Ff(`Found more than one (${n.length}) load handlers for URL '${e}'`);e=n[0]}return async function(e,t,n){if(null==n&&(n={}),null==e.load)throw new Ff("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const r=await e.load();let s=r.modelTopology;null!=s.model_config&&(s=s.model_config);const a=null==n.strict||n.strict,i=null!=r.weightData&&null!=r.weightSpecs&&a,o=hy(By(s),void 0,i),l=r.trainingConfig;if(null!=l&&o.loadTrainingConfig(l),null!=r.userDefinedMetadata&&o.setUserDefinedMetadata(r.userDefinedMetadata),null!=r.weightData){if(null==r.weightSpecs)throw new Ff("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");const{modelWeights:e,optimizerWeights:t}=function(e,t){const n=Us(e,t),r={},s=[];return t.forEach((e=>{"optimizer"===e.group?s.push({name:e.name,tensor:n[e.name]}):r[e.name]=n[e.name]})),{modelWeights:r,optimizerWeights:s}}(r.weightData,r.weightSpecs);o.loadWeights(e,a),null!=o.optimizer&&t.length>0&&await o.optimizer.setWeights(t),Yi(e),Yi(t.map((e=>e.tensor)))}return o}(e,0,t)}(e,t)}function xb(e){return Qg(e)}function wb(e,t){uy.registerCallbackConstructor(e,t)}mb.className="Sequential",Ei(mb);class vb extends Si{getConfig(){return{}}}class kb extends vb{apply(e,t=1){return function(e,t=1){if(1!==t)throw new Of(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return au(e)}(e,t)}}kb.className="elu",Ei(kb);class Nb extends vb{apply(e){return _c(e)}}Nb.className="selu",Ei(Nb);class Ib extends vb{apply(e){return Cc(e)}}Ib.className="relu",Ei(Ib);class $b extends vb{apply(e){return Xi((()=>Yu(6,Cc(e))))}}$b.className="relu6",Ei($b);class Cb extends vb{apply(e){return e}}Cb.className="linear",Ei(Cb);class Sb extends vb{apply(e){return Il(e)}}Sb.className="sigmoid",Ei(Sb);class Tb extends vb{apply(e){return function(e){return Xi((()=>{const t=lo(.5,ho(.2,e));return Ml(t,0,1)}))}(e)}}Tb.className="hardSigmoid",Ei(Tb);class Eb extends vb{apply(e){return Fu(e)}}Eb.className="softplus",Ei(Eb);class Ab extends vb{apply(e){return function(e){return Xi((()=>co(e,Ro(e).add(1))))}(e)}}Ab.className="softsign",Ei(Ab);class Rb extends vb{apply(e){return Cl(e)}}Rb.className="tanh",Ei(Rb);class Db extends vb{apply(e,t=-1){return Hc(e,t)}}Db.className="softmax",Ei(Db);class Fb extends vb{apply(e,t=-1){return Lu(e,t)}}Fb.className="logSoftmax",Ei(Fb);class Ob extends vb{apply(e,t=1){return Xi((()=>Il(e.mul(t)).mul(e)))}}function _b(e){return e.getClassName()}function Mb(e,t={}){return jf(e,Ti.getMap().classNameMap,t,"activation")}function Lb(e){if(null==e){return Mb({className:"linear",config:{}})}if("string"==typeof e){const t={};return t.className=e,t.config={},Mb(t)}return e instanceof vb?e:Mb(e)}function zb(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}Ob.className="swish",Ei(Ob);class Bb extends Si{}class Pb extends Bb{constructor(e){super(),zb(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return Xi((()=>{let t=ju([1]);return this.hasL1&&(t=lo(t,Mu(ho(this.l1,Ro(e))))),this.hasL2&&(t=lo(t,Mu(ho(this.l2,Hm(e))))),t.asScalar()}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}Pb.className="L1L2",Ei(Pb);const Wb={l1l2:"L1L2"};function Vb(e){return Gf(e)}function Ub(e,t={}){return jf(e,Ti.getMap().classNameMap,t,"regularizer")}function Gb(e){return null==e?null:"string"==typeof e?Ub({className:e in Wb?Wb[e]:e,config:{}}):e instanceof Bb?e:Ub(e)}class Hb extends Yg{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=Bg(e);let n=Cc(e);return null!=this.maxValue&&(n=Ml(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}Hb.className="ReLU",Ei(Hb);class jb extends Yg{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=Bg(e);return $u(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}jb.className="LeakyReLU",Ei(jb);class qb extends Yg{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=yg(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=Gb(e.alphaRegularizer),this.alphaConstraint=cm(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new Ff(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=Pg(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new Hg({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=Bg(e),dc(e,this.alpha.read())}getConfig(){const e={alphaInitializer:gg(this.alphaInitializer),alphaRegularizer:Vb(this.alphaRegularizer),alphaConstraint:lm(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}qb.className="PReLU",Ei(qb);class Kb extends Yg{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new Of(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=Bg(e);return au(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}Kb.className="ELU",Ei(Kb);class Xb extends Yg{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=Bg(e);return n.mul(Om(n.greater(this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}Xb.className="ThresholdedReLU",Ei(Xb);class Yb extends Yg{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new Db).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=Bg(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function Jb(e,t,n){if("number"==typeof e)return Mf(e,t);if(e.length!==t)throw new Ff(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let s=0;s<t;++s){const a=e[s];if((r=a)!==parseInt(r.toString(),10))throw new Ff(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${a}`)}return e;var r}function Zb(e,t,n,r,s=1){if(null==e)return e;let a;return a="same"===n?e:e-(t+(t-1)*(s-1))+1,Math.floor((a+r-1)/r)}function Qb(e,t,n,r){if(null==e)return null;if("valid"===r)e=e*t+Dm([n-t,0]);else{if("same"!==r)throw new Ff(`Unsupport padding mode: ${r}.`);e*=t}return e}function ex(e,t){return Xi((()=>(wm(t),"channelsFirst"===t?ni(e,[0,2,3,1]):e)))}function tx(e,t){return Xi((()=>(wm(t),"channelsFirst"===t?ni(e,[0,2,3,4,1]):e)))}function nx(e,t,n,r=[1,1],s="valid",a,i,o=null){return Xi((()=>{if(null==a&&(a="channelsLast"),wm(a),3!==e.rank&&4!==e.rank)throw new Ff(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new Ff(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=ex(e,a);if("causal"===s)throw new Of("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=qh({x:l,filter:t,strides:r,pad:"same"===s?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(l=ni(l,[0,3,1,2])),l}))}Yb.className="Softmax",Ei(Yb);class rx extends Yg{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",rx.verifyArgs(t),this.rank=e,Zf(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new Of(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=Jb(t.kernelSize,e,"kernelSize"),this.strides=Jb(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,vm(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,wm(this.dataFormat),this.activation=Lb(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=yg(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=cm(t.biasConstraint),this.biasRegularizer=Gb(t.biasRegularizer),this.activityRegularizer=Gb(t.activityRegularizer),this.dilationRate=Jb(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new Ff(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new Ff(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new Ff(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(Lf("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!Jf(e.kernelSize,"number",1,3))throw new Ff(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:_b(this.activation),useBias:this.useBias,biasInitializer:gg(this.biasInitializer),biasRegularizer:Vb(this.biasRegularizer),activityRegularizer:Vb(this.activityRegularizer),biasConstraint:lm(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class sx extends rx{constructor(e,t){super(e,t),this.kernel=null,sx.verifyArgs(t),this.filters=t.filters,Zf(this.filters,"filters"),this.kernelInitializer=yg(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=cm(t.kernelConstraint),this.kernelRegularizer=Gb(t.kernelRegularizer)}build(e){e=Pg(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Ff(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],r=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return Xi((()=>{let t;e=Bg(e);const n=null==this.bias?null:this.bias.read(),r=em(this.activation.getClassName());if(null!=r&&2===this.rank)t=nx(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,r);else{if(1===this.rank)t=function(e,t,n,r=1,s="valid",a,i=1){return Xi((()=>{if(null==a&&(a="channelsLast"),wm(a),3!==e.shape.length)throw new Ff(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new Ff(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new Ff(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===a&&(e=ni(e,[0,2,1])),"causal"===s)throw new Of("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=Vl(e,t,r,"same"===s?"same":"valid","NWC",i);return null!=n&&(o=qm(o,n)),o}))}(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=nx(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new Of("convolutions greater than 3D are not implemented yet.");t=function(e,t,n,r=[1,1,1],s="valid",a,i){return Xi((()=>{if(null==a&&(a="channelsLast"),wm(a),4!==e.rank&&5!==e.rank)throw new Ff(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new Ff(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let o=tx(e,a);if("causal"===s)throw new Of("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=Hl(o,t,r,"same"===s?"same":"valid","NDHWC",i),null!=n&&(o=qm(o,n)),"channelsFirst"===a&&(o=ni(o,[0,4,1,2,3])),o}))}(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t}))}computeOutputShape(e){e=Pg(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const r=Zb(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(r)}let r=[e[0]];return"channelsLast"===this.dataFormat?(r=r.concat(t),r.push(this.filters)):(r.push(this.filters),r=r.concat(t)),r}getConfig(){const e={filters:this.filters,kernelInitializer:gg(this.kernelInitializer),kernelRegularizer:Vb(this.kernelRegularizer),kernelConstraint:lm(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new Ff(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class ax extends sx{constructor(e){super(2,e),ax.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Jf(e.kernelSize,"number",1,2))throw new Ff(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}ax.className="Conv2D",Ei(ax);class ix extends sx{constructor(e){super(3,e),ix.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new Ff(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}ix.className="Conv3D",Ei(ix);class ox extends ax{constructor(e){if(super(e),this.inputSpec=[new Hg({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new Ff(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=Pg(e)).length)throw new Ff("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Ff("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Hg({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return Xi((()=>{let t=Bg(e);if(4!==t.shape.length)throw new Ff(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,r=n[0];let s,a;"channelsFirst"===this.dataFormat?(s=2,a=3):(s=1,a=2);const i=n[s],o=n[a],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],h=this.strides[1],p=[r,Qb(i,c,l,this.padding),Qb(o,h,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=ni(t,[0,2,3,1]));let d=Gl(t,this.kernel.read(),p,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=ni(d,[0,3,1,2])),null!=this.bias&&(d=qm(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d}))}computeOutputShape(e){const t=(e=Pg(e)).slice();let n,r,s;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3):(n=3,r=1,s=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return t[n]=this.filters,t[r]=Qb(t[r],o,a,this.padding),t[s]=Qb(t[s],l,i,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}ox.className="Conv2DTranspose",Ei(ox);class lx extends sx{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new Ff("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new Ff("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new Ff(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=yg(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=Gb(t.depthwiseRegularizer),this.depthwiseConstraint=cm(t.depthwiseConstraint),this.pointwiseInitializer=yg(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=Gb(t.pointwiseRegularizer),this.pointwiseConstraint=cm(t.pointwiseConstraint)}build(e){if((e=Pg(e)).length<this.rank+2)throw new Ff(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new Ff(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],r=this.kernelSize.concat([n,this.depthMultiplier]),s=[];for(let e=0;e<this.rank;++e)s.push(1);s.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",r,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):this.bias=null,this.inputSpec=[new Hg({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return Xi((()=>{let t;if(e=Bg(e),1===this.rank)throw new Of("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=ni(e,[0,2,3,1])),t=Mc(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=qm(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=ni(t,[0,3,1,2])),t}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=gg(this.depthwiseInitializer),e.pointwiseInitializer=gg(this.pointwiseInitializer),e.depthwiseRegularizer=Vb(this.depthwiseRegularizer),e.pointwiseRegularizer=Vb(this.pointwiseRegularizer),e.depthwiseConstraint=lm(this.depthwiseConstraint),e.pointwiseConstraint=lm(this.pointwiseConstraint),e}}lx.className="SeparableConv";class ux extends lx{constructor(e){super(2,e)}}ux.className="SeparableConv2D",Ei(ux);class cx extends sx{constructor(e){super(1,e),cx.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Jf(e.kernelSize,"number",1,1))throw new Ff(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}cx.className="Conv1D",Ei(cx);class hx extends Yg{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return Xi((()=>{if(e=Bg(e),"channelsLast"===this.dataFormat){const t=zm(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return zm(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=zm(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return zm(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}hx.className="Cropping2D",Ei(hx);class px extends Yg{constructor(e){super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return Xi((()=>{let t=Bg(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=ni(t,[0,2,3,1]);const e=this.size[0]*n[2],r=this.size[1]*n[3],s=t.resizeNearestNeighbor([e,r]);return ni(s,[0,3,1,2])}{const e=this.size[0]*n[1],r=this.size[1]*n[2];return t.resizeNearestNeighbor([e,r])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}px.className="UpSampling2D",Ei(px);class dx extends rx{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=yg(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=cm(e.depthwiseConstraint),this.depthwiseRegularizer=Gb(e.depthwiseRegularizer)}build(e){if((e=Pg(e)).length<4)throw new Ff(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new Ff(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],r=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",r,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Xi((()=>{let t=function(e,t,n=[1,1],r="valid",s,a){return Xi((()=>{null==s&&(s="channelsLast"),wm(s);let i=ex(e,s);if(4!==e.rank)throw new Ff(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new Ff(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return i=Zl(i,t,n,"same"===r?"same":"valid","NHWC",a),"channelsFirst"===s&&(i=ni(i,[0,3,1,2])),i}))}(e=Bg(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=qm(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=Pg(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,s=Zb(t,this.kernelSize[0],this.padding,this.strides[0]),a=Zb(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],r,s,a]:[e[0],s,a,r]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=gg(this.depthwiseInitializer),e.depthwiseRegularizer=Vb(this.depthwiseRegularizer),e.depthwiseConstraint=lm(this.depthwiseRegularizer),e}}function fx(e,t,n,r){if(Array.isArray(e)){if(null!=t||null!=n)throw new Ff("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=e.slice(e.length-r,e.length),e=e.slice(0,e.length-r)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function s(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=s(t),constants:n=s(n)}}function mx(e,t,n,r=!1,s,a,i=!1,o=!1){return Xi((()=>{const l=t.shape.length;if(l<3)throw new Ff(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(Fm(2,l));if(t=ni(t,u),null!=a)throw new Of("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=s&&((s=s.asType("bool").asType("float32")).rank===l-1&&(s=lu(s,-1)),s=ni(s,u)),r&&(t=Tc(t,0),null!=s&&(s=Tc(s,0)));const c=[];let h,p=n;const d=t.shape[0],f=ph(t);let m,g;null!=s&&(m=ph(s));for(let t=0;t<d;++t){const n=f[t],r=Xi((()=>e(n,p)));if(null==s)h=r[0],p=r[1];else{const e=Xi((()=>{const e=m[t],n=sc(e).sub(e);return{output:r[0].mul(e).add(p[0].mul(n)),newStates:p.map(((t,s)=>r[1][s].mul(e).add(t.mul(n))))}}));h=e.output,p=e.newStates}o&&c.push(h)}return o&&(g=eh(c,1)),[h,g,p]}))}dx.className="DepthwiseConv2D",Ei(dx);class gx extends Yg{constructor(e){let t;if(super(e),null==e.cell)throw new Ff("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new Ix({cells:e.cell}):e.cell,null==t.stateSize)throw new Ff("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new Hg({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?Fm(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null)):this.states_}setStates(e){this.states_=e}computeOutputShape(e){Lg(e)&&(e=e[0]),e=e;let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let r;if(r=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const r of t)n.push([e[0],r]);return[r].concat(n)}return r}computeMask(e,t){return Xi((()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new Of("Constants support is not implemented in RNN yet.");Lg(e)&&(e=e[0]),e=e;const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new Hg({shape:[t,null,...n]});const r=[e[0]].concat(e.slice(2));let s;if(this.cell.build(r),s=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!se(this.stateSpec.map((e=>e.shape[e.shape.length-1])),s))throw new Ff(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=s.map((e=>new Hg({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e,t=!1){Xi((()=>{if(!this.stateful)throw new Rf("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new Ff("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>ju([n,e]))):this.states_=[ju([n,this.cell.stateSize])];else if(null==e)Yi(this.states_),null!=this.keptStates&&(Yi(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>ju([n,e]))):this.states_[0]=ju([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Ff(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):Yi(this.states_);for(let t=0;t<this.states_.length;++t){const r=e[t],s=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,a=[n,s];if(!se(r.shape,a))throw new Ff(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${r.shape}`);this.states_[t]=r}}this.states_=this.states_.map((e=>Ji(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const s=fx(e,n,r,this.numConstants);e=s.inputs,n=s.initialState,r=s.constants;let a=[],i=[];if(null!=n){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new Hg({shape:e.shape}));i=i.concat(this.stateSpec)}if(null!=r&&(t.constants=r,a=a.concat(r),this.numConstants=r.length),a[0]instanceof jg){const n=[e].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,t);return this.inputSpec=s,o}return super.apply(e,t)}call(e,t){return Xi((()=>{const n=null==t?null:t.mask,r=null==t?null:t.training;let s=null==t?null:t.initialState;e=Bg(e),null==s&&(s=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==a)throw new Ff(`RNN Layer has ${a} state(s) but was passed ${s.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:r},o=mx(((e,t)=>{const n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]}),e,s,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,r);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h}))}getInitialState(e){return Xi((()=>{let t=ju(e.shape);return t=Mu(t,[1,2]),t=_m(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?Wm(t,[1,e]):t)):this.cell.stateSize>1?[Wm(t,[1,this.cell.stateSize])]:[t]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===gx.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,e,t)}static fromConfig(e,t,n={}){const r=hy(t.cell,n);return new e(Object.assign(t,{cell:r}))}}gx.className="RNN",Ei(gx);class yx extends Yg{}class bx extends yx{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Zf(this.units,"units"),this.activation=Lb(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=yg(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=yg(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=yg(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Gb(e.kernelRegularizer),this.recurrentRegularizer=Gb(e.recurrentRegularizer),this.biasRegularizer=Gb(e.biasRegularizer),this.kernelConstraint=cm(e.kernelConstraint),this.recurrentConstraint=cm(e.recurrentConstraint),this.biasConstraint=cm(e.biasConstraint),this.dropout=Rm([1,Dm([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Rm([1,Dm([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=Pg(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Xi((()=>{if(2!==(e=e).length)throw new Ff(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const r=null!=t.training&&t.training;let s;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=$x({ones:()=>sc(e),rate:this.dropout,training:r})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=$x({ones:()=>sc(n),rate:this.recurrentDropout,training:r}));const a=this.dropoutMask,i=this.recurrentDropoutMask;s=Um(null!=a?ho(e,a):e,this.kernel.read()),null!=this.bias&&(s=qm(s,this.bias.read())),null!=i&&(n=ho(n,i));let o=lo(s,Um(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:_b(this.activation),useBias:this.useBias,kernelInitializer:gg(this.kernelInitializer),recurrentInitializer:gg(this.recurrentInitializer),biasInitializer:gg(this.biasInitializer),kernelRegularizer:Vb(this.kernelRegularizer),recurrentRegularizer:Vb(this.recurrentRegularizer),biasRegularizer:Vb(this.biasRegularizer),activityRegularizer:Vb(this.activityRegularizer),kernelConstraint:lm(this.kernelConstraint),recurrentConstraint:lm(this.recurrentConstraint),biasConstraint:lm(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}}bx.className="SimpleRNNCell",Ei(bx);class xx extends gx{constructor(e){e.cell=new bx(e),super(e)}call(e,t){return Xi((()=>{null!=this.cell.dropoutMask&&(Yi(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Yi(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}static fromConfig(e,t){return new e(t)}}xx.className="SimpleRNN",Ei(xx);class wx extends yx{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new Ff("GRUCell does not support reset_after parameter set to true.");this.units=e.units,Zf(this.units,"units"),this.activation=Lb(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Lb(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=yg(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=yg(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=yg(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Gb(e.kernelRegularizer),this.recurrentRegularizer=Gb(e.recurrentRegularizer),this.biasRegularizer=Gb(e.biasRegularizer),this.kernelConstraint=cm(e.kernelConstraint),this.recurrentConstraint=cm(e.recurrentConstraint),this.biasConstraint=cm(e.biasConstraint),this.dropout=Rm([1,Dm([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Rm([1,Dm([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=Pg(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Xi((()=>{if(2!==(e=e).length)throw new Ff(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let r=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=$x({ones:()=>sc(e),rate:this.dropout,training:n,count:3})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=$x({ones:()=>sc(r),rate:this.recurrentDropout,training:n,count:3}));const s=this.dropoutMask,a=this.recurrentDropoutMask;let i,o,l;0<this.dropout&&this.dropout<1&&(e=ho(e,s[0]));let u=Um(e,this.kernel.read());this.useBias&&(u=qm(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(r=ho(r,a[0]));const c=this.recurrentKernel.read(),[h,p]=Yc(c,[2*this.units,this.units],c.rank-1),d=Um(r,h),[f,m,g]=Yc(u,3,u.rank-1),[y,b]=Yc(d,2,d.rank-1);i=this.recurrentActivation.apply(lo(f,y)),o=this.recurrentActivation.apply(lo(m,b));const x=Um(ho(o,r),p);l=this.activation.apply(lo(g,x));const w=lo(ho(i,r),ho(lo(1,Du(i)),l));return[w,w]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:_b(this.activation),recurrentActivation:_b(this.recurrentActivation),useBias:this.useBias,kernelInitializer:gg(this.kernelInitializer),recurrentInitializer:gg(this.recurrentInitializer),biasInitializer:gg(this.biasInitializer),kernelRegularizer:Vb(this.kernelRegularizer),recurrentRegularizer:Vb(this.recurrentRegularizer),biasRegularizer:Vb(this.biasRegularizer),activityRegularizer:Vb(this.activityRegularizer),kernelConstraint:lm(this.kernelConstraint),recurrentConstraint:lm(this.recurrentConstraint),biasConstraint:lm(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}}wx.className="GRUCell",Ei(wx);class vx extends gx{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new wx(e),super(e)}call(e,t){return Xi((()=>{null!=this.cell.dropoutMask&&(Yi(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Yi(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}vx.className="GRU",Ei(vx);class kx extends yx{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Zf(this.units,"units"),this.activation=Lb(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Lb(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=yg(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=yg(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=yg(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=Gb(e.kernelRegularizer),this.recurrentRegularizer=Gb(e.recurrentRegularizer),this.biasRegularizer=Gb(e.biasRegularizer),this.kernelConstraint=cm(e.kernelConstraint),this.recurrentConstraint=cm(e.recurrentConstraint),this.biasConstraint=cm(e.biasConstraint),this.dropout=Rm([1,Dm([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Rm([1,Dm([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=Pg(e))[e.length-1];let r;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;r=new((t=class extends Zm{apply(t,r){const s=e.apply([n]),a=(new eg).apply([n]),i=e.apply([2*n]);return Pm(Pm(s,a),i)}}).className="CustomInit",t)}else r=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,r,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return Xi((()=>{const n=null!=t.training&&t.training;if(3!==(e=e).length)throw new Ff(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let r=e[1];const s=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=$x({ones:()=>sc(e),rate:this.dropout,training:n,count:4})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=$x({ones:()=>sc(r),rate:this.recurrentDropout,training:n,count:4}));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,l,u,c;0<this.dropout&&this.dropout<1&&(e=ho(e,a[0]));let h=Um(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(r=ho(r,i[0])),h=lo(h,Um(r,this.recurrentKernel.read())),this.useBias&&(h=qm(h,this.bias.read()));const[p,d,f,m]=Yc(h,4,h.rank-1);o=this.recurrentActivation.apply(p),l=this.recurrentActivation.apply(d),u=lo(ho(l,s),ho(o,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=ho(c,this.activation.apply(u));return[g,g,u]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:_b(this.activation),recurrentActivation:_b(this.recurrentActivation),useBias:this.useBias,kernelInitializer:gg(this.kernelInitializer),recurrentInitializer:gg(this.recurrentInitializer),biasInitializer:gg(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:Vb(this.kernelRegularizer),recurrentRegularizer:Vb(this.recurrentRegularizer),biasRegularizer:Vb(this.biasRegularizer),activityRegularizer:Vb(this.activityRegularizer),kernelConstraint:lm(this.kernelConstraint),recurrentConstraint:lm(this.recurrentConstraint),biasConstraint:lm(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}}kx.className="LSTMCell",Ei(kx);class Nx extends gx{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new kx(e),super(e)}call(e,t){return Xi((()=>{null!=this.cell.dropoutMask&&(Yi(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Yi(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}Nx.className="LSTM",Ei(Nx);class Ix extends yx{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return Xi((()=>{let n=(e=e).slice(1);const r=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?r.push(n.splice(0,e.stateSize.length)):r.push(n.splice(0,1));r.reverse();const s=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=r[i],a=0===i?[e[0]].concat(n):[a[0]].concat(n),a=o.call(a,t),s.push(a.slice(1))}n=[];for(const e of s.slice().reverse())n.push(...e);return[a[0]].concat(n)}))}build(e){let t;Lg(e)&&(e=e[0]),e=e,this.cells.forEach(((n,r)=>{Im(`RNNCell_${r}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign({},e,t)}static fromConfig(e,t,n={}){const r=[];for(const e of t.cells)r.push(hy(e,n));return new e({cells:r})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return Ug(e)}setWeights(e){const t=[];for(const n of this.cells){const r=n.weights.length,s=e.splice(r);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],s[e]])}Gg(t)}}function $x(e){const{ones:t,rate:n,training:r=!1,count:s=1}=e,a=()=>Km(t(),n),i=()=>Xm(a,t,r);return!s||s<=1?Ji(i().clone()):Array(s).fill(void 0).map(i).map((e=>Ji(e.clone())))}Ix.className="StackedRNNCells",Ei(Ix);class Cx extends gx{constructor(e){if(e.unroll)throw new Of("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new Of("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new Hg({ndim:5})]}call(e,t){return Xi((()=>{if(null!=this.cell.dropoutMask&&(Yi(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Yi(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new Ff("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return Xi((()=>{const{stateSize:t}=this.cell,n=e.shape,r=this.computeSingleOutputShape(n),s=ju([r[0],...r.slice(2)]);return Array.isArray(t)?Array(t.length).fill(s):[s]}))}resetStates(e,t=!1){Xi((()=>{if(!this.stateful)throw new Rf("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,r=this.computeSingleOutputShape(n),s=[r[0],...r.slice(2)];if(null==n[0])throw new Ff("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>ju(s))):this.states_=[ju(s)];else if(null==e)Yi(this.states_),null!=this.keptStates&&(Yi(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>ju(s))):this.states_[0]=ju(s);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Ff(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):Yi(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],r=s;if(!se(n.shape,r))throw new Ff(`State ${t} is incompatible with layer ${this.name}: expected shape=${r}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>Ji(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:r,padding:s,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===t,l=e[o?3:2],u=e[o?4:3],c=Zb(l,r[0],s,a[0],i[0]),h=Zb(u,r[1],s,a[1],i[1]);return[...e.slice(0,2),...o?[n,c,h]:[c,h,n]]}}Cx.className="ConvRNN2D";class Sx extends kx{constructor(e){const{filters:t,kernelSize:n,strides:r,padding:s,dataFormat:a,dilationRate:i}=e;super(Object.assign({},e,{units:t})),this.filters=t,Zf(this.filters,"filters"),this.kernelSize=Jb(n,2,"kernelSize"),this.kernelSize.forEach((e=>Zf(e,"kernelSize"))),this.strides=Jb(r||1,2,"strides"),this.strides.forEach((e=>Zf(e,"strides"))),this.padding=s||"valid",vm(this.padding),this.dataFormat=a||"channelsLast",wm(this.dataFormat),this.dilationRate=Jb(i||1,2,"dilationRate"),this.dilationRate.forEach((e=>Zf(e,"dilationRate")))}build(e){var t;e=Pg(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new Ff(`The channel dimension of the input should be defined. Found ${e[n]}`);const r=e[n],s=this.kernelSize.concat([r,4*this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,r=this.filters;e=new((t=class extends Zm{apply(e,t){return Bm([n.apply([r]),qu([r]),n.apply([2*r])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return Xi((()=>{if(3!==e.length)throw new Ff(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,r=e[0],s=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=$x({ones:()=>sc(r),rate:this.dropout,training:n,count:4}));const i=this.dropoutMask,o=(e,t,n)=>t&&t[n]?ho(t[n],e):e;let l=o(r,i,0),u=o(r,i,1),c=o(r,i,2),h=o(r,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=$x({ones:()=>sc(s),rate:this.recurrentDropout,training:n,count:4}));const p=this.recurrentDropoutMask;let d=o(s,p,0),f=o(s,p,1),m=o(s,p,2),g=o(s,p,3);const[y,b,x,w]=Yc(this.kernel.read(),4,3),[v,k,N,I]=this.useBias?Yc(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,y,v,this.padding),u=this.inputConv(u,b,k,this.padding),c=this.inputConv(c,x,N,this.padding),h=this.inputConv(h,w,I,this.padding);const[$,C,S,T]=Yc(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,$),f=this.recurrentConv(f,C),m=this.recurrentConv(m,S),g=this.recurrentConv(g,T);const E=this.recurrentActivation.apply(lo(l,d)),A=this.recurrentActivation.apply(lo(u,f)),R=lo(ho(A,a),ho(E,this.activation.apply(lo(c,m)))),D=ho(this.recurrentActivation.apply(lo(h,g)),this.activation.apply(R));return[D,D,R]}))}getConfig(){const e=super.getConfig(),{units:t}=e,n=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(r=Object.getOwnPropertySymbols(e);s<r.length;s++)t.indexOf(r[s])<0&&Object.prototype.propertyIsEnumerable.call(e,r[s])&&(n[r[s]]=e[r[s]])}return n}(e,["units"]),r={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},n,r)}inputConv(e,t,n,r){const s=Wl(e,t,this.strides,r||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?qm(s,n,this.dataFormat):s}recurrentConv(e,t){return Wl(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}Sx.className="ConvLSTM2DCell",Ei(Sx);class Tx extends Cx{constructor(e){const t=new Sx(e);super(Object.assign({},e,{cell:t}))}static fromConfig(e,t){return new e(t)}}Tx.className="ConvLSTM2D",Ei(Tx);class Ex extends Yg{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return Xi((()=>{this.invokeCallHook(e,t);const n=Bg(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,r=this.getNoiseShape(n);return Xm((()=>Km(n,this.rate,r,this.seed)),(()=>n),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}Ex.className="Dropout",Ei(Ex);class Ax extends Ex{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}Ax.className="SpatialDropout1D",Ei(Ax);class Rx extends Yg{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,Zf(this.units,"units"),this.activation=Lb(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=yg(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=yg(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=cm(e.kernelConstraint),this.biasConstraint=cm(e.biasConstraint),this.kernelRegularizer=Gb(e.kernelRegularizer),this.biasRegularizer=Gb(e.biasRegularizer),this.activityRegularizer=Gb(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=Pg(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=Pg(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return Xi((()=>{this.invokeCallHook(e,t);const n=Bg(e),r=em(this.activation.getClassName());let s;return null!=r?s=Um(n,this.kernel.read(),r,this.bias?this.bias.read():null):(s=Um(n,this.kernel.read()),null!=this.bias&&(s=qm(s,this.bias.read())),null!=this.activation&&(s=this.activation.apply(s))),s}))}getConfig(){const e={units:this.units,activation:_b(this.activation),useBias:this.useBias,kernelInitializer:gg(this.kernelInitializer),biasInitializer:gg(this.biasInitializer),kernelRegularizer:Vb(this.kernelRegularizer),biasRegularizer:Vb(this.biasRegularizer),activityRegularizer:Vb(this.activityRegularizer),kernelConstraint:lm(this.kernelConstraint),biasConstraint:lm(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}Rx.className="Dense",Ei(Rx);class Dx extends Yg{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=Pg(e);for(const t of e.slice(1))if(null==t)throw new Ff(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],Em(e,1)]}call(e,t){return Xi((()=>{this.invokeCallHook(e,t);let n=Bg(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=n.transpose(e)}return function(e){if(e.rank<=1)throw new Ff(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],Em(e.shape,1)];return e.reshape(t)}(n)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}Dx.className="Flatten",Ei(Dx);class Fx extends Yg{constructor(e){super(e),this.supportsMasking=!0,this.activation=Lb(e.activation)}call(e,t){return Xi((()=>{this.invokeCallHook(e,t);const n=Bg(e);return this.activation.apply(n)}))}getConfig(){const e={activation:_b(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}Fx.className="Activation",Ei(Fx);class Ox extends Yg{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return Xi((()=>{return e=Bg(e),t=e,n=this.n,Xi((()=>{if(2!==t.shape.length)throw new Ff(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return Wm(_m(t,1),[1,n,1])}));var t,n}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}Ox.className="RepeatVector",Ei(Ox);class _x extends Yg{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",r=t.slice();let s=1,a=null;for(let e=0;e<r.length;++e){const t=r[e];if(this.isUnknown(t)){if(null!==a)throw new Ff("Can only specifiy one unknown dimension.");a=e}else s*=t}const i=Em(e);if(null!==a){if(0===s||i%s!=0)throw new Ff(n);r[a]=i/s}else if(i!==s)throw new Ff(n);return r}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return Xi((()=>{this.invokeCallHook(e,t);const n=Bg(e),r=n.shape,s=r.slice(0,1).concat(this.fixUnknownDimension(r.slice(1),this.targetShape));return n.reshape(s)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}_x.className="Reshape",Ei(_x);class Mx extends Yg{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=Fm(1,e.dims.length+1);if(!se(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new Hg({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=Pg(e)).slice();return this.dims.forEach(((n,r)=>{t[r+1]=e[n]})),t}call(e,t){return ni(Bg(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}Mx.className="Permute",Ei(Mx);class Lx extends Yg{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=Bg(e);return Zo(nc(n,this.maskValue),-1)}call(e,t){return Xi((()=>{this.invokeCallHook(e,t);const n=Bg(e),r=Zo(nc(n,this.maskValue),-1,!0);return n.mul(r.asType(n.dtype))}))}}Lx.className="Masking",Ei(Lx);class zx extends Yg{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(Pf(e.inputLength))}this.inputDim=e.inputDim,Zf(this.inputDim,"inputDim"),this.outputDim=e.outputDim,Zf(this.outputDim,"outputDim"),this.embeddingsInitializer=yg(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=Gb(e.embeddingsRegularizer),this.activityRegularizer=Gb(e.activityRegularizer),this.embeddingsConstraint=cm(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return Xi((()=>this.maskZero?(e=Bg(e),nc(e,mo(e))):null))}computeOutputShape(e){if(e=Pg(e),null==this.inputLength)return[...e,this.outputDim];const t=Pf(this.inputLength);if(t.length!==e.length-1)throw new Ff(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let r=0;r<t.length;++r){const s=t[r],a=e[r+1];if(null!=s&&null!=a&&s!==a)throw new Ff(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==s&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return Xi((()=>{this.invokeCallHook(e,t);let n=Bg(e);return"int32"!==n.dtype&&(n=Om(n,"int32")),Gm(this.embeddings.read(),n.as1D()).reshape(Pg(this.computeOutputShape(n.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:gg(this.embeddingsInitializer),embeddingsRegularizer:Vb(this.embeddingsRegularizer),activityRegularizer:Vb(this.activityRegularizer),embeddingsConstraint:lm(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}zx.className="Embedding",Ei(zx);class Bx extends Yg{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new Of}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let r=0;r<t.length;++r){const s=e[e.length-t.length+r],a=t[r];if(null==s||null==a||s<0||a<0)n.push(null);else if(1===s)n.push(a);else if(1===a)n.push(s);else{if(s!==a)throw new Ff("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(s)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[Pg(e)]),(e=e).length<2)throw new Ff(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=Kf(t),t.length>1)throw new Ff(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const r=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,r)}const r=e.map((e=>e.length));-1===e.indexOf(null)&&1===Kf(r).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return Xi((()=>{if(e=e,this.reshapeRequired){const t=[],n=e.map((e=>e.rank));if(-1===n.indexOf(null)){const r=Dm(n);for(let n of e){const e=n.rank;for(let t=0;t<r-e;++t)n=_m(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const r of e){const e=r.rank;if(null==e){const e=r.shape,s=e[0],a=e.slice(1).concat([s]);let i=r.reshape([s].concat(Em(e.slice(1))));i=ni(i,[1,0]),i=i.reshape(a),t.push(i),n=!0}else if(e>1){const s=Fm(1,e).concat([0]);t.push(ni(r,s)),n=!0}else t.push(r)}let r=this.mergeFunction(t);const s=r.rank;if(n)if(null==s){const e=r.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));r=ni(r.reshape([-1,t]),[1,0]).reshape(n)}else if(s>1){const e=[s-1].concat(Fm(0,s-1));r=ni(r,e)}return r}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==(e=e)[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const r=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,r)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=Kf(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return Xi((()=>{if(null==t)return null;if(!Array.isArray(t))throw new Ff("`mask` should be an Array");if(!Array.isArray(e))throw new Ff("`inputs` should be an Array");if(t.length!==e.length)throw new Ff(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every((e=>null==e)))return null;let n=(t=t.map((e=>null==e?e:lu(e,0))))[0];for(let e=1;e<t.length-1;++e)n=Bu(n,t[e]);return n}))}}class Px extends Bx{constructor(e){super(e)}mergeFunction(e){return Xi((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=lo(t,e[n]);return t}))}}Px.className="Add",Ei(Px);class Wx extends Bx{constructor(e){super(e)}mergeFunction(e){return Xi((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=ho(t,e[n]);return t}))}}Wx.className="Multiply",Ei(Wx);class Vx extends Bx{constructor(e){super(e)}mergeFunction(e){return Xi((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=lo(t,e[n]);return ho(1/e.length,t)}))}}Vx.className="Average",Ei(Vx);class Ux extends Bx{constructor(e){super(e)}mergeFunction(e){return Xi((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=_o(t,e[n]);return t}))}}Ux.className="Maximum",Ei(Ux);class Gx extends Bx{constructor(e){super(e)}mergeFunction(e){return Xi((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=Yu(t,e[n]);return t}))}}Gx.className="Minimum",Ei(Gx);class Hx extends Bx{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new Ff("A `Concatenate` layer should be called on a list of at least 2 inputs");e=e;let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let t=0;t<e.length;++t){const r=e[t].slice();r.splice(this.axis,1);let s=!1;for(const e of n)if(se(e,r)){s=!0;break}s||n.push(r)}if(n.length>1)throw new Ff("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return Xi((()=>Bm(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new Ff("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),r=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[r]||null==e[r]){n[r]=null;break}n[r]+=e[r]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new Ff("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new Ff("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new Ff(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return Xi((()=>{let n=!0;if(t.forEach((e=>{null==e||(n=!1)})),n)return null;const r=[];for(let n=0;n<e.length;++n)null==t[n]?r.push(sc(e[n]).asType("bool")):t[n].rank<e[n].rank?r.push(lu(t[n],-1)):r.push(t[n]);const s=Nl(r,this.axis);return Jo(s,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function jx(e,t){for(;e<0;)e+=t;return e}Hx.className="Concatenate",Ei(Hx);class qx extends Bx{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){Z(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new Of("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(t,n);if(t[r[0]]!==n[r[1]])throw new Ff(`Dimension incompatibility: ${t[r[0]]} !== ${n[r[1]]}`)}mergeFunction(e){if(2!==e.length)throw new Ff(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],r=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,n)=>jx(t,e[n].shape.length))):[jx(this.axes,n.shape.length),jx(this.axes,r.shape.length)],this.normalize&&(n=py(n,t[0]),r=py(r,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new Of("batchDot is not implemented for tensors of 4D or higher rank yet");if(Z(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),Z(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new Of("batchDot is not implemented for complex64-type Tensors yet.");const r=e.shape.length,s=t.shape.length;null==n&&(n=[r-1,s-2]);const a=n;return Xi((()=>{let n,i;if(r>s){n=r-s;const e=[];for(let t=0;t<n;++t)e.push(1);t=t.reshape(t.shape.concat(e))}else if(s>r){n=s-r;const t=[];for(let e=0;e<n;++e)t.push(1);e=e.reshape(e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)i=a[0]===a[1]?e.mul(t).sum(a[0]):e.transpose([1,0]).mul(t).sum(a[1]);else{const n=a[0]!==e.shape.length-1,r=a[1]===t.shape.length-1;i=e.matMul(t,n,r)}if(n>0){let e;e=r>s?r+s-3:r-1;const t=[];for(let r=e;r<e+n;++r)t.push(r);i=i.squeeze(t)}return 1===i.shape.length&&(i=i.expandDims(1)),i}))}(n,r,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[jx(this.axes,e.length),jx(this.axes,t.length)],n}computeOutputShape(e){Z(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new Of("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(t,n);t.splice(r[0],1),n.splice(r[1],1),n.splice(0,1);const s=t.concat(n);return 1===s.length&&s.push(1),s}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}qx.className="Dot",Ei(qx);class Kx extends Yg{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return Xi((()=>{this.invokeCallHook(e,t);const n=Bg(e);return Xm((()=>Vm(n.shape,0,this.stddev).add(n)),(()=>n),t.training||!1)}))}}Kx.className="GaussianNoise",Ei(Kx);class Xx extends Yg{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return Xi((()=>{this.invokeCallHook(e,t);const n=Bg(e);return this.rate>0&&this.rate<1?Xm((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return n.mul(Vm(n.shape,1,e))}),(()=>n),t.training||!1):n}))}}Xx.className="GaussianDropout",Ei(Xx);class Yx extends Yg{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||Bg(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return Xi((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e);return Xm((()=>{const t=Bg(e),r=-1.7580993408473766;let s=wu(kc(n),this.rate);s=Om(s,"float32");const a=((1-this.rate)*(1+this.rate*r**2))**-.5,i=-a*r*this.rate;return t.mul(s).add(s.add(-1).mul(r)).mul(a).add(i)}),(()=>Bg(e)),t.training||!1)}return e}))}}function Jx(e,t,n,r,s,a=.001){let i;if(2===e.rank)i=Rl(e,t,n,r,s,a);else if(3===e.rank)i=Dl(e,t,n,r,s,a);else{if(4!==e.rank)throw new Of(`batchNormalization is not implemented for array of rank ${e.rank} yet`);i=Fl(e,t,n,r,s,a)}return i}Yx.className="AlphaDropout",Ei(Yx);class Zx extends Yg{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=yg(e.betaInitializer||"zeros"),this.gammaInitializer=yg(e.gammaInitializer||"ones"),this.movingMeanInitializer=yg(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=yg(e.movingVarianceInitializer||"ones"),this.betaConstraint=cm(e.betaConstraint),this.gammaConstraint=cm(e.gammaConstraint),this.betaRegularizer=Gb(e.betaRegularizer),this.gammaRegularizer=Gb(e.gammaRegularizer)}build(e){e=Pg(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new Ff(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new Hg({ndim:e.length,axes:{[t]:n}})];const r=[n];this.scale&&(this.gamma=this.addWeight("gamma",r,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",r,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",r,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",r,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return Xi((()=>{const n=null!=t.training&&t.training,r=Bg(e),s=r.shape,a=s.length,i=Fm(0,a),o=this.axis>=0?this.axis:this.axis+a;i.splice(o,1);const l=Mf(1,a);l[o]=s[o];const u=i.slice();u.sort();const c=!se(u,Fm(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const e=this.movingMean.read().reshape(l),t=this.movingVariance.read().reshape(l),n=this.center?this.beta.read().reshape(l):null,s=this.scale?this.gamma.read().reshape(l):null;return Jx(r,e,t,n,s,this.epsilon)}return Jx(r,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,p,d]=function(e,t,n,r,s=.001){return se(r.slice().sort(),Fm(0,e.rank-1))?function(e,t,n,r,s=.001){return Xi((()=>{const a=Qu(e,r),i=a.mean,o=a.variance;return[Jx(e,i,o,n,t,s),i,o]}))}(e,t,n,r,s):function(e,t,n,r,s=.001){return Xi((()=>{const a=Qu(e,r),i=a.mean,o=a.variance,l=[];for(const t of Fm(0,e.rank))-1!==r.indexOf(t)?l.push(1):l.push(e.shape[t]);const u=i.reshape(l),c=o.reshape(l),h=null==t?null:t.reshape(l),p=null==n?null:n.reshape(l);return[Jx(e,u,c,p,h,s),i,o]}))}(e,t,n,r,s)}(r,this.gamma.read(),this.beta.read(),i,this.epsilon),f=(e,t,n)=>{Xi((()=>{const r=1-n,s=e.read(),a=s.sub(t).mul(r);e.write(s.sub(a))}))};return(()=>{f(this.movingMean,p,this.momentum),f(this.movingVariance,d,this.momentum)})(),h}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:gg(this.betaInitializer),gammaInitializer:gg(this.gammaInitializer),movingMeanInitializer:gg(this.movingMeanInitializer),movingVarianceInitializer:gg(this.movingVarianceInitializer),betaRegularizer:Vb(this.betaRegularizer),gammaRegularizer:Vb(this.gammaRegularizer),betaConstraint:lm(this.betaConstraint),gammaConstraint:lm(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}Zx.className="BatchNormalization",Ei(Zx);class Qx extends Yg{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=yg(e.betaInitializer||"zeros"),this.gammaInitializer=yg(e.gammaInitializer||"ones"),this.betaRegularizer=Gb(e.betaRegularizer),this.gammaRegularizer=Gb(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=Pg(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==Kf(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,!0):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,!0):this.beta=null,this.built=!0}call(e,t){const n=Bg(e),r=n.shape,s=r.length;return Xi((()=>{let{mean:e,variance:t}=Qu(n,this.axis,!0);const a=Mf(1,s);for(const e of this.axis)a[e]=r[e];const i=e=>null!=e&&e.shape.length!==s&&this.axis!==[s-1]?e.reshape(a):e;let o=i(this.gamma.read()),l=i(this.beta.read());const u=[],c=[];for(let e=0;e<s;++e)-1!==this.axis.indexOf(e)?(u.push(r[e]),c.push(1)):(u.push(1),c.push(r[e]));return e=e.tile(u),t=t.tile(u),o=o.tile(c),l=l.tile(c),Jx(n,e,t,l,o,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:gg(this.betaInitializer),gammaInitializer:gg(this.gammaInitializer),betaRegularizer:Vb(this.betaRegularizer),gammaRegularizer:Vb(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}Qx.className="LayerNormalization",Ei(Qx);class ew extends Yg{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new Ff(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new Ff(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new Ff(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new Hg({ndim:4})]}computeOutputShape(e){let t,n;return e=Pg(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return Xi((()=>{return t=Bg(e),n=this.padding,r=this.dataFormat,Xi((()=>{if(4!==t.rank)throw new Ff(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new Ff("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==r&&(r="channelsLast"),"channelsLast"!==r&&"channelsFirst"!==r)throw new Ff(`Unknown data format: ${r}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===r?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],ic(t,e)}));var t,n,r}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function tw(e,t,n,r,s,a){return Xi((()=>{let i;wm(s),km(a),vm(r),null==n&&(n=[1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),e=ex(e,s);const o="same"===r?"same":"valid";return i="max"===a?Uu(e,t,n,o):xl(e,t,n,o),"channelsFirst"===s&&(i=ni(i,[0,3,1,2])),i}))}function nw(e,t,n,r,s,a){return Xi((()=>{let i;wm(s),km(a),vm(r),null==n&&(n=[1,1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),e=tx(e,s);const o="same"===r?"same":"valid";return i="max"===a?Gu(e,t,n,o):wl(e,t,n,o),"channelsFirst"===s&&(i=ni(i,[0,4,1,2,3])),i}))}ew.className="ZeroPadding2D",Ei(ew);class rw extends Yg{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new Ff(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(Zf(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new Ff(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}Zf(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,vm(this.padding),this.inputSpec=[new Hg({ndim:3})]}computeOutputShape(e){const t=Zb((e=Pg(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return Xi((()=>{this.invokeCallHook(e,t),e=_m(Bg(e),2);const n=this.poolingFunction(Bg(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return Qc(n,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class sw extends rw{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return wm(s),vm(r),tw(e,t,n,r,s,"max")}}sw.className="MaxPooling1D",Ei(sw);class aw extends rw{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return wm(s),vm(r),tw(e,t,n,r,s,"avg")}}aw.className="AveragePooling1D",Ei(aw);class iw extends Yg{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new Ff(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];Zf(this.poolSize,"poolSize"),Zf(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,wm(this.dataFormat),vm(this.padding),this.inputSpec=[new Hg({ndim:4})]}computeOutputShape(e){e=Pg(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=Zb(t,this.poolSize[0],this.padding,this.strides[0]),n=Zb(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return Xi((()=>(this.invokeCallHook(e,t),this.poolingFunction(Bg(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class ow extends iw{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return wm(s),vm(r),tw(e,t,n,r,s,"max")}}ow.className="MaxPooling2D",Ei(ow);class lw extends iw{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return wm(s),vm(r),tw(e,t,n,r,s,"avg")}}lw.className="AveragePooling2D",Ei(lw);class uw extends Yg{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new Ff(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];Zf(this.poolSize,"poolSize"),Zf(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,wm(this.dataFormat),vm(this.padding),this.inputSpec=[new Hg({ndim:5})]}computeOutputShape(e){e=Pg(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[4]:e[3];return t=Zb(t,this.poolSize[0],this.padding,this.strides[0]),n=Zb(n,this.poolSize[1],this.padding,this.strides[1]),r=Zb(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,r]:[e[0],t,n,r,e[4]]}call(e,t){return Xi((()=>(this.invokeCallHook(e,t),this.poolingFunction(Bg(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class cw extends uw{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return wm(s),vm(r),nw(e,t,n,r,s,"max")}}cw.className="MaxPooling3D",Ei(cw);class hw extends uw{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return wm(s),vm(r),nw(e,t,n,r,s,"avg")}}hw.className="AveragePooling3D",Ei(hw);class pw extends Yg{constructor(e){super(e),this.inputSpec=[new Hg({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new Of}}class dw extends pw{constructor(e){super(e||{})}call(e,t){return Xi((()=>{const t=Bg(e);return Ku(t,1)}))}}dw.className="GlobalAveragePooling1D",Ei(dw);class fw extends pw{constructor(e){super(e||{})}call(e,t){return Xi((()=>{const t=Bg(e);return _u(t,1)}))}}fw.className="GlobalMaxPooling1D",Ei(fw);class mw extends Yg{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,wm(this.dataFormat),this.inputSpec=[new Hg({ndim:4})]}computeOutputShape(e){return e=e,"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new Of}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class gw extends mw{call(e,t){return Xi((()=>{const t=Bg(e);return"channelsLast"===this.dataFormat?Ku(t,[1,2]):Ku(t,[2,3])}))}}gw.className="GlobalAveragePooling2D",Ei(gw);class yw extends mw{call(e,t){return Xi((()=>{const t=Bg(e);return"channelsLast"===this.dataFormat?_u(t,[1,2]):_u(t,[2,3])}))}}yw.className="GlobalMaxPooling2D",Ei(yw);class bw extends Yg{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const r=hy(t.layer,n);delete t.layer;const s={layer:r};return Object.assign(s,t),new e(s)}}class xw extends bw{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=Pg(e)).length<3)throw new Ff(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=Pg(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),r=e[1];return[n[0],r].concat(n.slice(1))}call(e,t){return Xi((()=>mx(((e,n)=>[Bg(this.layer.call(e,t)),[]]),e=Bg(e),[],!1,null,null,!1,!0)[1]))}}xw.className="TimeDistributed",Ei(xw);class ww extends bw{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=hy(n),t.goBackwards=!0!==t.goBackwards;const r={};var s;if(r.className=e.layer.getClassName(),r.config=t,this.backwardLayer=hy(r),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,s=this.mergeMode,Yf(bm,"BidirectionalMergeMode",s),e.weights)throw new Of("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,r,s=this.forwardLayer.computeOutputShape(e);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),s=s,this.returnState?(r=s.slice(1),t=s[0]):t=s[0],t=t,"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[t].concat(r).concat(r.slice()):Bf(n)}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const s=fx(e,n,r,this.numConstants);if(e=s.inputs,n=s.initialState,r=s.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==r)return super.apply(e,t);const a=[],i=[];if(null!=n){const e=n.length;if(e%2>0)throw new Ff("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const r=n.map((e=>new Hg({shape:e.shape})));this.forwardLayer.stateSpec=r.slice(0,e/2),this.backwardLayer.stateSpec=r.slice(e/2),i.push(...r)}if(null!=r)throw new Of("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof jg;for(const e of a)if(e instanceof jg!==o)throw new Ff("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[e].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,t);return this.inputSpec=s,o}return super.apply(e,t)}call(e,t){return Xi((()=>{const n=t.initialState;let r,s,a,i;if(null==n)r=this.forwardLayer.call(e,t),s=this.backwardLayer.call(e,t);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);r=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),s=this.backwardLayer.call(e,Object.assign(t,{initialState:i}))}return this.returnState&&(Array.isArray(r)&&(a=r.slice(1).concat(s.slice(1))),r=r[0],s=s[0]),this.returnSequences&&(s=Tc(s,1)),"concat"===this.mergeMode?i=Bm([r,s]):"sum"===this.mergeMode?i=lo(r,s):"ave"===this.mergeMode?i=ho(.5,lo(r,s)):"mul"===this.mergeMode?i=ho(r,s):null==this.mergeMode&&(i=[r,s]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){Im(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),Im(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=hy(t.layer);if(delete t.layer,null!=t.numConstants)throw new Of("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const r=t;return r.layer=n,new e(r)}}function vw(e){return new Zg(e)}function kw(e){return new Kb(e)}function Nw(e){return new Hb(e)}function Iw(e){return new jb(e)}function $w(e){return new qb(e)}function Cw(e){return new Yb(e)}function Sw(e){return new Xb(e)}function Tw(e){return new cx(e)}function Ew(e){return new ax(e)}function Aw(e){return new ox(e)}function Rw(e){return new ix(e)}function Dw(e){return new ux(e)}function Fw(e){return new hx(e)}function Ow(e){return new px(e)}function _w(e){return new dx(e)}function Mw(e){return new Fx(e)}function Lw(e){return new Rx(e)}function zw(e){return new Ex(e)}function Bw(e){return new Ax(e)}function Pw(e){return new Dx(e)}function Ww(e){return new Ox(e)}function Vw(e){return new _x(e)}function Uw(e){return new Mx(e)}function Gw(e){return new zx(e)}function Hw(e){return new Px(e)}function jw(e){return new Vx(e)}function qw(e){return new Hx(e)}function Kw(e){return new Ux(e)}function Xw(e){return new Gx(e)}function Yw(e){return new Wx(e)}function Jw(e){return new qx(e)}function Zw(e){return new Zx(e)}function Qw(e){return new Qx(e)}function ev(e){return new ew(e)}function tv(e){return new aw(e)}function nv(e){return tv(e)}function rv(e){return tv(e)}function sv(e){return new lw(e)}function av(e){return sv(e)}function iv(e){return sv(e)}function ov(e){return new hw(e)}function lv(e){return ov(e)}function uv(e){return ov(e)}function cv(e){return new dw(e)}function hv(e){return new gw(e)}function pv(e){return new fw(e)}function dv(e){return new yw(e)}function fv(e){return new sw(e)}function mv(e){return new ow(e)}function gv(e){return new cw(e)}function yv(e){return new vx(e)}function bv(e){return new wx(e)}function xv(e){return new Nx(e)}function wv(e){return new kx(e)}function vv(e){return new xx(e)}function kv(e){return new bx(e)}function Nv(e){return new Tx(e)}function Iv(e){return new Sx(e)}function $v(e){return new gx(e)}function Cv(e){return new Ix(e)}function Sv(e){return new ww(e)}function Tv(e){return new xw(e)}ww.className="Bidirectional",Ei(ww);const Ev=pv,Av=dv,Rv=fv,Dv=mv;function Fv(e){return new Kx(e)}function Ov(e){return new Xx(e)}function _v(e){return new Yx(e)}function Mv(e){return new Lx(e)}function Lv(e,t){return ky(e,t)}function zv(e,t){return Cy(e,t)}function Bv(e,t){return Sy(e,t)}function Pv(e,t){return Ny(e,t)}function Wv(e,t){return Ty(e,t)}function Vv(e,t){return $y(e,t)}function Uv(e,t){return function(e,t){return Xi((()=>{const n=Iy(e,t),r=function(e,t){return Xi((()=>Bu(e.equal(1),t.equal(0)).sum().cast("float32")))}(e,t),s=n.add(r);return nu(xu(s,0),n.div(s),0).cast("float32")}))}(e,t)}function Gv(e,t){return xy(e,t)}function Hv(e,t){return fy(e,t)}function jv(e,t){return my(e,t)}function qv(e,t){return my(e,t)}function Kv(e,t){return my(e,t)}function Xv(e,t){return dy(e,t)}function Yv(e,t){return dy(e,t)}function Jv(e,t){return dy(e,t)}function Zv(e){return new Pb(e)}function Qv(e){return zb(t=e),new Pb({l1:null!=t?t.l1:null,l2:0});var t}function ek(e){return zb(t=e),new Pb({l2:null!=t?t.l2:null,l1:0});var t}class tk extends ry{constructor(){super(...arguments),this.model=null}setModel(e){if(!(e instanceof pb))throw new Error("model must be a LayersModel, not some other Container");this.model=e}}function nk(e,t){return e<t}function rk(e,t){return e>t}class sk extends tk{constructor(e){if(super(),null==e&&(e={}),e.restoreBestWeights)throw new Of("restoreBestWeights = True is not implemented in EarlyStopping yet.");this.monitor=e.monitor||"val_loss",this.minDelta=Math.abs(e.minDelta||0),this.patience=e.patience||0,this.verbose=e.verbose||0,this.mode=e.mode||"auto",this.baseline=e.baseline,-1===["auto","min","max"].indexOf(this.mode)&&(console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`),this.mode="auto"),"min"===this.mode?this.monitorFunc=nk:"max"===this.mode||-1!==this.monitor.indexOf("acc")?this.monitorFunc=rk:this.monitorFunc=nk,this.monitorFunc===nk&&(this.minDelta*=-1)}async onTrainBegin(e){this.wait=0,this.stoppedEpoch=0,null!=this.baseline?this.best=this.baseline:this.best=this.monitorFunc===nk?1/0:-1/0}async onEpochEnd(e,t){await ey(t);const n=this.getMonitorValue(t);null!=n&&(this.monitorFunc(n-this.minDelta,this.best)?(this.best=n,this.wait=0):(this.wait++,this.wait>=this.patience&&(this.stoppedEpoch=e,this.model.stopTraining=!0)))}async onTrainEnd(e){this.stoppedEpoch>0&&this.verbose&&console.log(`Epoch ${this.stoppedEpoch}: early stopping.`)}getMonitorValue(e){null==e&&(e={});const t=e[this.monitor];return null==t&&console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: ${Object.keys(e)}`),t}}const ak={earlyStopping:function(e){return new sk(e)}};var ik,ok;!function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(ik||(ik={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(ok||(ok={}));const lk={};function uk(e,t){const n={tfOpName:e,category:"custom",inputs:[],attrs:[],customExecutor:t};lk[e]=n}function ck(e){return lk[e]}function hk(e){delete lk[e]}function pk(e,t,n,r,s){const a=t.inputParams[e];if(a&&void 0!==a.inputIndexStart){const e=a.inputIndexStart,i=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?e+1:a.inputIndexEnd;if("tensor"===a.type)return dk(t.inputNames[a.inputIndexStart],n,r,s);if("tensors"===a.type)return t.inputNames.slice(e,i).map((e=>dk(e,n,r,s)));const o=dk(t.inputNames.slice(e)[0],n,r,s),l=o.dataSync();return"number"===a.type?l[0]:Ae(o.shape,l)}const i=t.attrParams[e];return i&&i.value}function dk(e,t,n,r){const[s,a]=gk(e);if(null!=r){const e=r.getHashTableHandleByName(s);if(null!=e)return e}const i=n.currentContextIds.find((e=>!!t[mk(s,e)]));return void 0!==i?t[mk(s,i)][a]:void 0}function fk(e,t){const[n,r]=gk(e);return[mk(n,t&&t.currentContextId),r]}function mk(e,t){return t?`${e}-${t}`:e}function gk(e){const t=e.split(":");return 1===t.length?[e,0]:[t[0],Number(t[t.length-1])]}function yk(e,t,n){let r=pk("pad",e,t,n);if("explicit"===r){r=pk("explicitPaddings",e,t,n);const s=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)s[e][0]=r[2*e],s[e][1]=r[2*e+1];return s}return r}function bk(e){return e.kept?e:Oa(e)}const xk=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],wk=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"clip_value_min",name:"clipValueMin",type:"number"},{tfName:"clip_value_max",name:"clipValueMax",type:"number"}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"clipValueMin",name:"clipValueMin",type:"number",defaultValue:0},{tfName:"clipValueMax",name:"clipValueMax",type:"number",defaultValue:6}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],vk=[{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}],kk=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],Nk=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],Ik=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],$k=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],Ck=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],Sk=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]}],Tk=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}],Ek=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Ak=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Rk=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],Dk=[{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],Fk=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool",notSupported:!0}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],Ok=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],_k=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}];class Mk{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[I,$,C,S,T,E,A,O,F,R,_,M,L,z,B,P,D].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,r=[],s=[],a=[],i=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?r.push(e[t.name]):"Const"===t.op?s.push(e[t.name]):null!=t.input&&0!==t.input.length||a.push(e[t.name]),e)),{});let o=[];const l=[];let u={},c={};null!=t&&(u=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const h=Object.keys(i);h.forEach((e=>{const t=i[e];t.inputNames.forEach((e=>{const[n]=fk(e);t.inputs.push(i[n]),i[n].children.push(t)}))})),0===Object.keys(c).length?h.forEach((e=>{const t=i[e];0===t.children.length&&l.push(t)})):Object.keys(c).forEach((e=>{const[t]=fk(e),n=i[t];null!=n&&(n.signatureKey=c[e],l.push(n))})),Object.keys(u).length>0?Object.keys(u).forEach((e=>{const[t]=fk(e),n=i[t];n&&(n.signatureKey=u[e],o.push(n))})):o=r;let p={};null!=e.library&&null!=e.library.function&&(p=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const d={nodes:i,inputs:o,outputs:l,weights:s,placeholders:r,signature:t,functions:p};return a.length>0&&(d.initNodes=a),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=ck(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.substr(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const r=n.type;let s;switch(n.type){case"string":s=zk(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=zk(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":s=Kk(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Kk(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":s=Pk(e.attr,n.tfName,n.defaultValue||0),void 0===s&&n.tfDeprecatedName&&(s=Pk(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":s=qk(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=qk(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":s=Bk(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Bk(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":s=Yk(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Yk(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":s=jk(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=jk(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":s=Xk(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Xk(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":s=Uk(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Uk(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":s=Gk(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Gk(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":s=Vk(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Vk(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:s,type:r},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let r={};null!=t&&(r=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const s=[],a=[];e.signature.inputArg.forEach((e=>{const[t]=fk(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:Wk(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,s.push(n),r[t]=n})),Object.keys(r).forEach((e=>{const t=r[e];t.inputNames.forEach((e=>{const[n]=fk(e);t.inputs.push(r[n]),r[n].children.push(t)}))}));const i=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=fk(i[e.name]),s=r[t];null!=s&&(s.defaultOutput=n,a.push(s))}));const o=this.mapArgsToSignature(e);return{nodes:r,inputs:s,outputs:a,weights:n,placeholders:[],signature:o}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function Lk(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=Be().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function zk(e,t,n,r=!1){const s=e[t];return null!=s?Lk(s.s,r):n}function Bk(e,t,n){const r=e[t];return r?r.b:n}function Pk(e,t,n){const r=e[t]||{},s=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof s?s:parseInt(s,10)}function Wk(e){switch("string"==typeof e&&(e=ik[e]),e){case ik.DT_FLOAT:return"float32";case ik.DT_INT32:case ik.DT_INT64:case ik.DT_INT8:case ik.DT_UINT8:return"int32";case ik.DT_BOOL:return"bool";case ik.DT_DOUBLE:return"float32";case ik.DT_STRING:return"string";default:return null}}function Vk(e,t,n){const r=e[t];return r&&r.func?r.func.name:n}function Uk(e,t,n){const r=e[t];return r&&r.type?Wk(r.type):n}function Gk(e,t,n){const r=e[t];return r&&r.list&&r.list.type?r.list.type.map((e=>Wk(e))):n}function Hk(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function jk(e,t,n){const r=e[t];return r&&r.shape?Hk(r.shape):n}function qk(e,t,n){const r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function Kk(e,t,n,r=!1){const s=e[t];return s&&s.list&&s.list.s?s.list.s.map((e=>Lk(e,r))):n}function Xk(e,t,n){const r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map((e=>Hk(e))):n}function Yk(e,t,n){const r=e[t];return r&&r.list&&r.list.b?r.list.b:n}class Jk{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return dk(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return dk(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return Pk(this.node.rawAttrs,e,t);if(null!=n.s)return zk(this.node.rawAttrs,e,t);if(null!=n.b)return Bk(this.node.rawAttrs,e,t);if(null!=n.shape)return jk(this.node.rawAttrs,e,t);if(null!=n.type)return Uk(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return qk(this.node.rawAttrs,e,t);if(null!=n.list.s)return Kk(this.node.rawAttrs,e,t);if(null!=n.list.shape)return Xk(this.node.rawAttrs,e,t);if(null!=n.list.b)return Yk(this.node.rawAttrs,e,t);if(null!=n.list.type)return Gk(this.node.rawAttrs,e,t)}return t}}function Zk(e,t,n=""){Z(function(e,t){if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(-1!==e[n]&&-1!==t[n]&&e[n]!==t[n])return!1;return!0}(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}class Qk{constructor(e,t,n,r,s,a,i){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=s,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=No(0),Ji(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),Zk(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,Ji(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return Ps([],[0].concat(this.elementShape));const n=this.readMany(e);return Zk(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),eh(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return Ps([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return Zk(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),Nl(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,ph(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const r=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const s=0===n?0:t.size/n,a=[];Xi((()=>{t=Qa(t,[1,n,s]);for(let n=0;n<e.length;++n){const i=[0,0===n?0:r[n-1],0],o=[1,e[n],s];a[n]=Qa($l(t,i,o),this.elementShape)}return a}));const i=[];for(let t=0;t<e.length;t++)i[t]=t;this.writeMany(i,a)}}class eN{constructor(e,t,n,r=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);Zk(t,e.shape,"TensorList shape mismatch: "),Ji(e)})),this.idTensor=No(0),this.maxNumElements=r,Ji(this.idTensor)}get id(){return this.idTensor.id}copy(){return new eN([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);return Zk(e,this.elementShape,"TensorList shape mismatch: "),Xi((()=>{const t=this.tensors.map((t=>Qa(t,e)));return eh(t,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=this.tensors.pop();return Zk(n.shape,e,"TensorList shape mismatch: "),Qa(n,e)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(Zk(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");Ji(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=e}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);return Zk(this.tensors[e].shape,t,"TensorList shape mismatch: "),this.tensors[e]}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);Zk(this.elementShape,t.shape,"TensorList shape mismatch: "),Ji(t),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);return Zk(this.elementShape,n,"TensorList shape mismatch: "),0===(e=e.slice(0,this.size())).length?Ps([],[0].concat(this.elementShape)):Xi((()=>{const t=e.map((e=>Qa(this.tensors[e],n)));return eh(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);return Zk(this.elementShape,t,"TensorList shape mismatch: "),0===this.size()?Ps([],[0].concat(this.elementShape)):Xi((()=>{const e=this.tensors.map((e=>Qa(e,t)));return Nl(e,0)}))}}function tN(e,t,n){const[r,s]=pk("fusedOps",e,t,n),a="biasadd"===r,i="prelu"===s,o="fusedbatchnorm"===r,l=pk("numArgs",e,t,n);if(a){if(i&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(o)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.");const u=pk("strides",e,t,n),c=yk(e,t,n),h=pk("dataFormat",e,t,n).toUpperCase(),p=pk("dilations",e,t,n),[d,f]=pk("args",e,t,n);return{stride:u,pad:c,dataFormat:h,dilations:p,biasArg:d,preluArg:f,activationFunc:s}}function nN(e,t,n){return{boxes:pk("boxes",e,t,n),scores:pk("scores",e,t,n),maxOutputSize:pk("maxOutputSize",e,t,n),iouThreshold:pk("iouThreshold",e,t,n),scoreThreshold:pk("scoreThreshold",e,t,n),softNmsSigma:pk("softNmsSigma",e,t,n)}}class rN{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=No(0),this.tensorMap=new Map,Ji(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),Xi((()=>{const e=ph(t),r=n.length,s=e.length;Z(r===s,(()=>`The number of elements doesn't match, keys has ${r} elements, the values has ${s} elements.`));for(let t=0;t<r;t++){const r=n[t],s=e[t];Ji(s),this.tensorMap.set(r,s)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return Xi((()=>{const e=[];for(let r=0;r<n.length;r++){const s=n[r],a=this.findWithDefault(s,t);e.push(a)}return eh(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function sN(e,t,n,r){const s=((e,t,n)=>{switch(e.category){case"arithmetic":return Xi((()=>((e,t,n)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[lo(pk("a",e,t,n),pk("b",e,t,n))];case"AddN":return[Vo(pk("tensors",e,t,n))];case"FloorMod":case"Mod":return[Zu(pk("a",e,t,n),pk("b",e,t,n))];case"Mul":return[ho(pk("a",e,t,n),pk("b",e,t,n))];case"RealDiv":case"Div":return[co(pk("a",e,t,n),pk("b",e,t,n))];case"DivNoNan":return[ru(pk("a",e,t,n),pk("b",e,t,n))];case"FloorDiv":return[uo(pk("a",e,t,n),pk("b",e,t,n))];case"Sub":return[Eo(pk("a",e,t,n),pk("b",e,t,n))];case"Minimum":return[Yu(pk("a",e,t,n),pk("b",e,t,n))];case"Maximum":return[_o(pk("a",e,t,n),pk("b",e,t,n))];case"Pow":return[To(pk("a",e,t,n),pk("b",e,t,n))];case"SquaredDifference":return[Zc(pk("a",e,t,n),pk("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return Xi((()=>((e,t,n)=>{switch(e.op){case"Abs":case"ComplexAbs":return[Ro(pk("x",e,t,n))];case"Acos":return[Po(pk("x",e,t,n))];case"Acosh":return[Wo(pk("x",e,t,n))];case"Asin":return[tl(pk("x",e,t,n))];case"Asinh":return[nl(pk("x",e,t,n))];case"Atan":return[rl(pk("x",e,t,n))];case"Atan2":return[sl(pk("x",e,t,n),pk("y",e,t,n))];case"Atanh":return[al(pk("x",e,t,n))];case"Ceil":return[_l(pk("x",e,t,n))];case"Complex":return[zs(pk("real",e,t,n),pk("imag",e,t,n))];case"Cos":return[Kl(pk("x",e,t,n))];case"Cosh":return[Xl(pk("x",e,t,n))];case"Elu":return[au(pk("x",e,t,n))];case"Erf":return[iu(pk("x",e,t,n))];case"Exp":return[ou(pk("x",e,t,n))];case"Expm1":return[uu(pk("x",e,t,n))];case"Floor":return[pu(pk("x",e,t,n))];case"Log":return[Au(pk("x",e,t,n))];case"Log1p":return[Ru(pk("x",e,t,n))];case"Imag":return[vu(pk("x",e,t,n))];case"Neg":return[Du(pk("x",e,t,n))];case"Reciprocal":return[$c(pk("x",e,t,n))];case"Real":return[rc(pk("x",e,t,n))];case"Relu":return[Cc(pk("x",e,t,n))];case"Round":return[Fc(pk("x",e,t,n))];case"Selu":return[_c(pk("x",e,t,n))];case"Sigmoid":return[Il(pk("x",e,t,n))];case"Sin":return[Bc(pk("x",e,t,n))];case"Sign":return[zc(pk("x",e,t,n))];case"Sinh":return[Pc(pk("x",e,t,n))];case"Softplus":return[Fu(pk("x",e,t,n))];case"Sqrt":return[po(pk("x",e,t,n))];case"Square":return[fo(pk("x",e,t,n))];case"Tanh":return[Cl(pk("x",e,t,n))];case"Tan":return[rh(pk("x",e,t,n))];case"Relu6":case"ClipByValue":return[Ml(pk("x",e,t,n),pk("clipValueMin",e,t,n),pk("clipValueMax",e,t,n))];case"Rsqrt":return[Oc(dk(e.inputNames[0],t,n))];case"Prod":return[fc(pk("x",e,t,n),pk("axes",e,t,n))];case"LeakyRelu":return[$u(pk("x",e,t,n),pk("alpha",e,t,n))];case"Prelu":return[dc(pk("x",e,t,n),pk("alpha",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return(async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const r=pk("thenBranch",e,t,n),s=pk("elseBranch",e,t,n),a=pk("cond",e,t,n),i=pk("args",e,t,n);return(await a.data())[0]?n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=pk("body",e,t,n),s=pk("cond",e,t,n),a=pk("args",e,t,n),i=await n.functionMap[s].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),o=a.map((e=>e.id));let l=await i[0].data();i.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||e.dispose()}));let u=a;for(;l[0];){const e=u;u=await n.functionMap[r].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);const t=u.map((e=>e.id));e.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const a=await n.functionMap[s].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await a[0].data(),a.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return u}case"LoopCond":return[bk(pk("pred",e,t,n))];case"Switch":{const r=pk("pred",e,t,n);let s=pk("data",e,t,n);return s.kept||(s=bk(s)),(await r.data())[0]?[void 0,s]:[s,void 0]}case"Merge":{const r=e.inputNames.find((e=>void 0!==dk(e,t,n)));return r?[bk(dk(r,t,n))]:void 0}case"Enter":{const r=pk("frameName",e,t,n),s=pk("tensor",e,t,n);return n.enterFrame(r),[bk(s)]}case"Exit":{const r=pk("tensor",e,t,n);return n.exitFrame(),[bk(r)]}case"NextIteration":{const r=pk("tensor",e,t,n);return n.nextIteration(),[bk(r)]}case"TensorArrayV3":{const r=pk("size",e,t,n),s=pk("dtype",e,t,n),a=pk("elementShape",e,t,n),i=pk("dynamicSize",e,t,n),o=pk("clearAfterRead",e,t,n),l=pk("identicalElementShapes",e,t,n),u=pk("name",e,t,n),c=new Qk(u,s,r,a,l,i,o);return n.addTensorArray(c),[c.idTensor,No(1)]}case"TensorArrayWriteV3":{const r=pk("tensorArrayId",e,t,n),s=pk("index",e,t,n),a=pk("tensor",e,t,n),i=n.getTensorArray(r.id);return i.write(s,a),[i.idTensor]}case"TensorArrayReadV3":{const r=pk("tensorArrayId",e,t,n),s=pk("index",e,t,n);return[n.getTensorArray(r.id).read(s)]}case"TensorArrayGatherV3":{const r=pk("tensorArrayId",e,t,n),s=pk("indices",e,t,n),a=pk("dtype",e,t,n);return[n.getTensorArray(r.id).gather(s,a)]}case"TensorArrayScatterV3":{const r=pk("tensorArrayId",e,t,n),s=pk("indices",e,t,n),a=pk("tensor",e,t,n),i=n.getTensorArray(r.id);return i.scatter(s,a),[i.idTensor]}case"TensorArrayConcatV3":{const r=pk("tensorArrayId",e,t,n),s=n.getTensorArray(r.id),a=pk("dtype",e,t,n);return[s.concat(a)]}case"TensorArraySplitV3":{const r=pk("tensorArrayId",e,t,n),s=pk("tensor",e,t,n),a=pk("lengths",e,t,n),i=n.getTensorArray(r.id);return i.split(a,s),[i.idTensor]}case"TensorArraySizeV3":{const r=pk("tensorArrayId",e,t,n);return[No(n.getTensorArray(r.id).size(),"int32")]}case"TensorArrayCloseV3":{const r=pk("tensorArrayId",e,t,n),s=n.getTensorArray(r.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const r=pk("tensorListId",e,t,n),s=pk("index",e,t,n),a=pk("tensor",e,t,n),i=n.getTensorList(r.id);return i.setItem(s,a),[i.idTensor]}case"TensorListGetItem":{const r=pk("tensorListId",e,t,n),s=pk("index",e,t,n),a=pk("elementShape",e,t,n),i=pk("elementDType",e,t,n);return[n.getTensorList(r.id).getItem(s,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const r=pk("indices",e,t,n),s=function(e,t,n,r){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const s=Math.max(...t);if(null!=r&&-1!==r&&s>=r)throw new Error(`Max index must be < array size (${s}  vs. ${r})`);const a=new eN([],n,e.dtype,r),i=ph(e,0);return t.forEach(((e,t)=>{a.setItem(e,i[t])})),a}(pk("tensor",e,t,n),r,pk("elementShape",e,t,n),pk("numElements",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListReserve":{const i=(r=pk("elementShape",e,t,n),s=pk("elementDType",e,t,n),a=pk("numElements",e,t,n),new eN([],r,s,a));return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const r=pk("tensorListId",e,t,n),s=pk("indices",e,t,n),a=pk("elementShape",e,t,n),i=pk("elementDType",e,t,n);return[n.getTensorList(r.id).gather(s,i,a)]}case"TensorListStack":{const r=pk("tensorListId",e,t,n),s=pk("elementShape",e,t,n),a=pk("elementDType",e,t,n),i=pk("numElements",e,t,n);return[n.getTensorList(r.id).stack(s,a,i)]}case"TensorListFromTensor":{const r=function(e,t,n){const r=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);Zk(e.shape.slice(1),t,"TensorList shape mismatch: ");const s=ph(e);return new eN(s,t,r)}(pk("tensor",e,t,n),pk("elementShape",e,t,n),pk("elementDType",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":{const r=pk("tensorListId",e,t,n),s=n.getTensorList(r.id),a=pk("dtype",e,t,n),i=pk("elementShape",e,t,n);return[s.concat(a,i)]}case"TensorListPushBack":{const r=pk("tensorListId",e,t,n),s=pk("tensor",e,t,n),a=n.getTensorList(r.id);return a.pushBack(s),[a.idTensor]}case"TensorListPopBack":{const r=pk("tensorListId",e,t,n),s=pk("elementShape",e,t,n),a=pk("elementDType",e,t,n);return[n.getTensorList(r.id).popBack(s,a)]}case"TensorListSplit":{const r=pk("tensor",e,t,n),s=pk("elementShape",e,t,n),a=function(e,t,n){let r=0;const s=t.map((e=>(r+=e,r)));if(r!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${e.shape}`);const a=0===r?0:e.size/r,i=Xi((()=>{const i=[];e=Qa(e,[1,r,a]);for(let r=0;r<t.length;++r){const o=[0,0===r?0:s[r-1],0],l=[1,t[r],a];i[r]=Qa($l(e,o,l),n)}return e.dispose(),i})),o=new eN([],n,e.dtype,t.length);for(let e=0;e<i.length;e++)o.setItem(e,i[e]);return o}(r,pk("lengths",e,t,n),s);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}var r,s,a})(e,t,n);case"convolution":return Xi((()=>((e,t,n)=>{switch(e.op){case"Conv1D":{const r=pk("stride",e,t,n),s=pk("pad",e,t,n),a=pk("dataFormat",e,t,n).toUpperCase(),i=pk("dilation",e,t,n);return[Vl(pk("x",e,t,n),pk("filter",e,t,n),r,s,a,i)]}case"Conv2D":{const r=pk("strides",e,t,n),s=yk(e,t,n),a=pk("dataFormat",e,t,n).toUpperCase(),i=pk("dilations",e,t,n);return[Wl(pk("x",e,t,n),pk("filter",e,t,n),[r[1],r[2]],s,a,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:r,pad:s,dataFormat:a,dilations:i,biasArg:o,preluArg:l,activationFunc:u}=tN(e,t,n);return[qh({x:pk("x",e,t,n),filter:pk("filter",e,t,n),strides:[r[1],r[2]],pad:s,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:s,dataFormat:a,dilations:i,biasArg:o,preluArg:l,activationFunc:u}=tN(e,t,n);return[Yh({x:pk("x",e,t,n),filter:pk("filter",e,t,n),strides:[r[1],r[2]],pad:s,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=pk("outputShape",e,t,n),s=pk("strides",e,t,n),a=yk(e,t,n);return[Gl(pk("x",e,t,n),pk("filter",e,t,n),r,[s[1],s[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=pk("strides",e,t,n),s=yk(e,t,n),a=pk("dilations",e,t,n),i=pk("dataFormat",e,t,n).toUpperCase();return[Zl(pk("input",e,t,n),pk("filter",e,t,n),[r[1],r[2]],s,i,[a[1],a[2]])]}case"Conv3D":{const r=pk("strides",e,t,n),s=pk("pad",e,t,n),a=pk("dataFormat",e,t,n).toUpperCase(),i=pk("dilations",e,t,n);return[Hl(pk("x",e,t,n),pk("filter",e,t,n),[r[1],r[2],r[3]],s,a,[i[1],i[2],i[3]])]}case"AvgPool":{const r=pk("strides",e,t,n),s=pk("pad",e,t,n),a=pk("kernelSize",e,t,n);return[xl(pk("x",e,t,n),[a[1],a[2]],[r[1],r[2]],s)]}case"MaxPool":{const r=pk("strides",e,t,n),s=pk("pad",e,t,n),a=pk("kernelSize",e,t,n);return[Uu(pk("x",e,t,n),[a[1],a[2]],[r[1],r[2]],s)]}case"MaxPoolWithArgmax":{const r=pk("strides",e,t,n),s=pk("pad",e,t,n),a=pk("kernelSize",e,t,n),i=pk("includeBatchInIndex",e,t,n),{result:o,indexes:l}=Hu(pk("x",e,t,n),[a[1],a[2]],[r[1],r[2]],s,i);return[o,l]}case"AvgPool3D":{const r=pk("strides",e,t,n),s=pk("pad",e,t,n),a=pk("kernelSize",e,t,n);return[wl(pk("x",e,t,n),[a[1],a[2],a[3]],[r[1],r[2],r[3]],s)]}case"MaxPool3D":{const r=pk("strides",e,t,n),s=pk("pad",e,t,n),a=pk("kernelSize",e,t,n);return[Gu(pk("x",e,t,n),[a[1],a[2],a[3]],[r[1],r[2],r[3]],s)]}case"Dilation2D":{const r=pk("strides",e,t,n),s=pk("pad",e,t,n),a=pk("dilations",e,t,n),i=r[1],o=r[2],l=a[1],u=a[2];return[eu(pk("x",e,t,n),pk("filter",e,t,n),[i,o],s,[l,u],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return Xi((()=>((e,t,n)=>{switch(e.op){case"Fill":{const r=pk("shape",e,t,n),s=pk("dtype",e,t,n);return[Co(r,pk("value",e,t,n),s)]}case"LinSpace":return[Tu(pk("start",e,t,n),pk("stop",e,t,n),pk("num",e,t,n))];case"Multinomial":{const r=pk("logits",e,t,n),s=pk("numSamples",e,t,n),a=pk("seed",e,t,n);return[tc(r,s,a)]}case"OneHot":{const r=pk("indices",e,t,n),s=pk("depth",e,t,n),a=pk("onValue",e,t,n),i=pk("offValue",e,t,n);return[ti(r,s,a,i)]}case"Ones":return[qu(pk("shape",e,t,n),pk("dtype",e,t,n))];case"OnesLike":return[sc(pk("x",e,t,n))];case"RandomUniform":return[kc(pk("shape",e,t,n),pk("minval",e,t,n),pk("maxval",e,t,n),pk("dtype",e,t,n))];case"Range":return[Ic(pk("start",e,t,n),pk("stop",e,t,n),pk("step",e,t,n),pk("dtype",e,t,n))];case"TruncatedNormal":{const r=pk("shape",e,t,n),s=pk("mean",e,t,n),a=pk("stdDev",e,t,n),i=pk("seed",e,t,n);return[uh(r,s,a,pk("dtype",e,t,n),i)]}case"Zeros":return[ju(pk("shape",e,t,n),pk("dtype",e,t,n))];case"ZerosLike":return[mo(pk("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}=nN(e,t,n),u=await Mp.nonMaxSuppressionWithScoreAsync(r,s,a,i,o,l);return[u.selectedIndices,u.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=nN(e,t,n),l=pk("padToMaxOutputSize",e,t,n),u=await Mp.nonMaxSuppressionPaddedAsync(r,s,a,i,o,l);return[u.selectedIndices,u.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=nN(e,t,n);return[await Mp.nonMaxSuppressionAsync(r,s,a,i,o)]}case"Where":{const r=Fa(pk("condition",e,t,n),"bool"),s=[await mh(r)];return r.dispose(),s}case"ListDiff":return Lc(pk("x",e,t,n),pk("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return Xi((()=>((e,t,n)=>{switch(e.op){case"TopKV2":{const r=pk("x",e,t,n),s=pk("k",e,t,n),a=pk("sorted",e,t,n),i=lh(r,s,a);return[i.values,i.indices]}case"Unique":{const r=pk("x",e,t,n),s=ch(r);return[s.values,s.indices]}case"UniqueV2":{const r=pk("x",e,t,n),s=pk("axis",e,t,n),a=ch(r,s);return[a.values,a.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return Xi((()=>((e,t,n)=>{switch(e.op){case"ResizeBilinear":{const r=pk("images",e,t,n),s=pk("size",e,t,n),a=pk("alignCorners",e,t,n);return[Mp.resizeBilinear(r,[s[0],s[1]],a)]}case"ResizeNearestNeighbor":{const r=pk("images",e,t,n),s=pk("size",e,t,n),a=pk("alignCorners",e,t,n);return[Mp.resizeNearestNeighbor(r,[s[0],s[1]],a)]}case"CropAndResize":{const r=pk("image",e,t,n),s=pk("boxes",e,t,n),a=pk("boxInd",e,t,n),i=pk("cropSize",e,t,n),o=pk("method",e,t,n),l=pk("extrapolationValue",e,t,n);return[Mp.cropAndResize(r,s,a,i,o,l)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return Xi((()=>((e,t,n)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const r=pk("default",e,t,n);return[dk(e.name,t,n)||r];case"Placeholder":return[dk(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[bk(pk("x",e,t,n))];case"IdentityN":return pk("x",e,t,n).map((e=>bk(e)));case"Snapshot":return[bk(pk("x",e,t,n))];case"Shape":return[Nc(pk("x",e,t,n).shape,"int32")];case"ShapeN":return pk("x",e,t,n).map((e=>Nc(e.shape)));case"Size":return[No(pk("x",e,t,n).size,"int32")];case"Rank":return[No(pk("x",e,t,n).rank,"int32")];case"NoOp":return[No(1)];case"Print":const s=pk("x",e,t,n),a=pk("data",e,t,n),i=pk("message",e,t,n),o=pk("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<a.length;e++)console.log(Array.prototype.slice.call(a[e].dataSync()).slice(0,o));return[s];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return Xi((()=>((e,t,n)=>{switch(e.op){case"Equal":return[tu(pk("a",e,t,n),pk("b",e,t,n))];case"NotEqual":return[nc(pk("a",e,t,n),pk("b",e,t,n))];case"Greater":return[xu(pk("a",e,t,n),pk("b",e,t,n))];case"GreaterEqual":return[wu(pk("a",e,t,n),pk("b",e,t,n))];case"Less":return[Cu(pk("a",e,t,n),pk("b",e,t,n))];case"LessEqual":return[Su(pk("a",e,t,n),pk("b",e,t,n))];case"LogicalAnd":return[Bu(pk("a",e,t,n),pk("b",e,t,n))];case"LogicalNot":return[Pu(pk("a",e,t,n))];case"LogicalOr":return[Wu(pk("a",e,t,n),pk("b",e,t,n))];case"Select":case"SelectV2":return[nu(pk("condition",e,t,n),pk("a",e,t,n),pk("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return Xi((()=>((e,t,n)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[ei(pk("a",e,t,n),pk("b",e,t,n),pk("transposeA",e,t,n),pk("transposeB",e,t,n))];case"Transpose":return[ni(pk("x",e,t,n),pk("perm",e,t,n))];case"_FusedMatMul":const[r,s]=pk("fusedOps",e,t,n),a="biasadd"===r,i="prelu"===s,o=pk("numArgs",e,t,n);if(a){if(i&&2!==o)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==o)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[l,u]=pk("args",e,t,n);return[Jh({a:pk("a",e,t,n),b:pk("b",e,t,n),transposeA:pk("transposeA",e,t,n),transposeB:pk("transposeB",e,t,n),bias:l,activation:s,preluActivationWeights:u})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return Xi((()=>((e,t,n)=>{switch(e.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[Al(pk("x",e,t,n),pk("mean",e,t,n),pk("variance",e,t,n),pk("offset",e,t,n),pk("scale",e,t,n),pk("epsilon",e,t,n))];case"LRN":return[Eu(pk("x",e,t,n),pk("radius",e,t,n),pk("bias",e,t,n),pk("alpha",e,t,n),pk("beta",e,t,n))];case"Softmax":return[Hc(pk("x",e,t,n))];case"LogSoftmax":return[Lu(pk("x",e,t,n))];case"SparseToDense":return[Mh(pk("sparseIndices",e,t,n),pk("outputShape",e,t,n),pk("sparseValues",e,t,n),pk("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return Xi((()=>((e,t,n)=>{switch(e.op){case"Max":{const r=pk("axis",e,t,n),s=pk("keepDims",e,t,n);return[_u(pk("x",e,t,n),r,s)]}case"Mean":{const r=pk("axis",e,t,n),s=pk("keepDims",e,t,n);return[Ku(pk("x",e,t,n),r,s)]}case"Min":{const r=pk("axis",e,t,n),s=pk("keepDims",e,t,n);return[Xu(pk("x",e,t,n),r,s)]}case"Sum":{const r=pk("axis",e,t,n),s=pk("keepDims",e,t,n);return[Mu(pk("x",e,t,n),r,s)]}case"All":{const r=pk("axis",e,t,n),s=pk("keepDims",e,t,n);return[Jo(pk("x",e,t,n),r,s)]}case"Any":{const r=pk("axis",e,t,n),s=pk("keepDims",e,t,n);return[Zo(pk("x",e,t,n),r,s)]}case"ArgMax":{const r=pk("axis",e,t,n);return[Qo(pk("x",e,t,n),r)]}case"ArgMin":{const r=pk("axis",e,t,n);return[el(pk("x",e,t,n),r)]}case"Prod":{const r=pk("axis",e,t,n),s=pk("keepDims",e,t,n);return[fc(pk("x",e,t,n),r,s)]}case"Cumsum":{const r=pk("axis",e,t,n),s=pk("exclusive",e,t,n),a=pk("reverse",e,t,n);return[Yl(pk("x",e,t,n),r,s,a)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return Xi((()=>((e,t,n)=>{switch(e.op){case"ConcatV2":case"Concat":{const r=pk("n",e,t,n),s=pk("axis",e,t,n);let a=pk("tensors",e,t,n);return a=a.slice(0,r),[Nl(a,s)]}case"GatherV2":case"Gather":{const r=pk("axis",e,t,n),s=pk("x",e,t,n),a=pk("indices",e,t,n);return[bu(s,Fa(a,"int32"),r)]}case"ReverseV2":case"Reverse":{const r=pk("axis",e,t,n),s=pk("x",e,t,n);return[Tc(s,r)]}case"Slice":{const r=pk("begin",e,t,n),s=pk("size",e,t,n);return[$l(pk("x",e,t,n),r,s)]}case"StridedSlice":{const r=pk("begin",e,t,n),s=pk("end",e,t,n),a=pk("strides",e,t,n),i=pk("beginMask",e,t,n),o=pk("endMask",e,t,n),l=pk("ellipsisMask",e,t,n),u=pk("newAxisMask",e,t,n),c=pk("shrinkAxisMask",e,t,n),h=pk("x",e,t,n);return[nh(h,r,s,a,i,o,l,u,c)]}case"Pack":return Xi((()=>{const r=pk("axis",e,t,n),s=pk("tensors",e,t,n),a=s[0].shape,i=Qc(s[0]).shape,o=s.map((e=>{const t=se(e.shape,a);if(!t&&!se(Qc(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:Qa(e,a)}));return[eh(o,r)]}));case"Unpack":{const r=pk("axis",e,t,n),s=pk("tensor",e,t,n);return ph(s,r)}case"Tile":{const r=pk("reps",e,t,n);return[cu(pk("x",e,t,n),r)]}case"Split":case"SplitV":{const r=pk("axis",e,t,n),s=pk("numOrSizeSplits",e,t,n),a=pk("x",e,t,n);return Yc(a,s,r)}case"ScatterNd":{const r=pk("indices",e,t,n),s=pk("values",e,t,n),a=pk("shape",e,t,n);return[_h(r,s,a)]}case"GatherNd":{const r=pk("x",e,t,n),s=pk("indices",e,t,n);return[Lh(r,s)]}case"SparseToDense":{const r=pk("sparseIndices",e,t,n),s=pk("outputShape",e,t,n),a=pk("sparseValues",e,t,n),i=pk("defaultValue",e,t,n);return[Mh(r,a,s,a.dtype===i.dtype?i:Fa(i,a.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return Xi((()=>((e,t,n)=>{switch(e.op){case"FFT":return[jc(pk("x",e,t,n))];case"IFFT":return[qc(pk("x",e,t,n))];case"RFFT":return[Jc(pk("x",e,t,n))];case"IRFFT":return[Kc(pk("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return Xi((()=>((e,t,n)=>{switch(e.op){case"Cast":return[Fa(pk("x",e,t,n),pk("dtype",e,t,n))];case"ExpandDims":{const r=pk("axis",e,t,n);return[lu(pk("x",e,t,n),r)]}case"Squeeze":{const r=pk("axis",e,t,n);return[Qc(pk("x",e,t,n),r)]}case"Reshape":return[Qa(pk("x",e,t,n),pk("shape",e,t,n))];case"MirrorPad":return[Ju(pk("x",e,t,n),pk("padding",e,t,n),pk("mode",e,t,n))];case"PadV2":case"Pad":return[ic(pk("x",e,t,n),pk("padding",e,t,n),pk("constantValue",e,t,n))];case"SpaceToBatchND":{const r=pk("blockShape",e,t,n),s=pk("paddings",e,t,n);return[hc(pk("x",e,t,n),r,s)]}case"BatchToSpaceND":{const r=pk("blockShape",e,t,n),s=pk("crops",e,t,n);return[Tl(pk("x",e,t,n),r,s)]}case"DepthToSpace":{const r=pk("blockSize",e,t,n),s=pk("dataFormat",e,t,n).toUpperCase();return[Jl(pk("x",e,t,n),r,s)]}case"BroadcastTo":return[Ol(pk("x",e,t,n),pk("shape",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,r)=>{switch(e.op){case"HashTable":case"HashTableV2":{const s=pk("keyDType",e,t,n),a=pk("valueDType",e,t,n),i=new rN(s,a);return r.addHashTable(e.name,i),[i.handle]}case"LookupTableImport":case"LookupTableImportV2":{const s=pk("tableHandle",e,t,n,r),a=pk("keys",e,t,n),i=pk("values",e,t,n),o=r.getHashTableById(s.id);return[await o.import(a,i)]}case"LookupTableFind":case"LookupTableFindV2":{const s=pk("tableHandle",e,t,n,r),a=pk("keys",e,t,n),i=pk("defaultValue",e,t,n),o=r.getHashTableById(s.id);return[await o.find(a,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,r);case"custom":const s=ck(e.op);if(s&&s.customExecutor)return s.customExecutor(new Jk(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return Le(s)?s.then((e=>[].concat(e))):[].concat(s)}class aN{constructor(e={},t={},n={},r={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function iN(e,t,n,r){const s=new Set,a=[];let i=null,o=null;const l=new Set,u=Object.keys(e).map((e=>gk(e)[0]));let c=[];null!=r&&(c=r.map((e=>gk(e.name)[0])));const h=[...t];for(;h.length>0;){const e=h.pop();(cN(e)||hN(e)||pN(e))&&null==i&&(i=e,o=i.children.map((e=>e.name)).filter((e=>s.has(e)))),s.add(e.name),null==n[e.name]&&-1===u.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{l.has(e.name)||(l.add(e.name),h.push(e))})):a.push(e.name))}return{inputs:e,outputs:t,usedNodes:s,missingInputs:a,dynamicNode:i,syncInputs:o}}const oN=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],lN=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],uN=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2"];function cN(e){return oN.indexOf(e.op)>=0}function hN(e){return lN.indexOf(e.op)>=0}function pN(e){return uN.indexOf(e.op)>=0}class dN{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new dN(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),r=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(e,t){const n=iN(e,t,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:s,syncInputs:a}=n;if(null!=s)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(r.length>0){const n=t.map((e=>e.name)),s=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${s}]. Missing the following inputs: [${r}]`)}return function(e,t,n){const{usedNodes:r,inputs:s}=n,a=[],i=Object.keys(s).map((e=>gk(e)[0])).map((t=>e.nodes[t])),o=e.initNodes;i.forEach((e=>{r.has(e.name)&&a.push(e)})),e.weights.forEach((e=>{r.has(e.name)&&a.push(e)})),null!=o&&o.forEach((e=>{r.has(e.name)&&a.push(e)}));const l=new Set,u=[];for(;a.length>0;){const e=a.pop();l.add(e.name),t[e.name]||u.push(e),e.children.forEach((e=>{!l.has(e.name)&&r.has(e.name)&&e.inputs.every((e=>l.has(e.name)))&&a.push(e)}))}return u}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const r=n.map((e=>this.graph.nodes[gk(e)[0]])),s=t.map((e=>gk(e)[0]));let a=s.map((e=>this.graph.nodes[e]));0===a.length&&(a=this._outputs);const i=this.getCompilationKey(r,a);let o=this.compiledMap.get(i);null==o&&(o=this.compile(e,a),this.compiledMap.set(i,o));const l={},u={};return Xi((()=>{const n=new aN(this.weightMap,l,u,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,s]=gk(t),a=[];a[s]=e[t],r[n]=a}));const a=this.getFrozenTensorIds(r),i={};for(let e=0;e<o.length;e++){const t=o[e];if(!r[t.name]){const e=sN(t,r,n,this._resourceManager);if(Le(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);r[t.name]=e,this.checkTensorForDisposal(t.name,t,r,n,a,s,i)}}return null==this.parent&&n.dispose(a),t.map((e=>dk(e,r,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,r,s,a,i){"control"!==t.category&&-1===a.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(i[e.id]=(i[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const t=function(e,t,n){return t[mk(e,n.currentContextId)]}(e.name,n,r);null!=t&&t.forEach((e=>{if(e&&!s.has(e.id)){const t=i[e.id];1===t?(e.dispose(),delete i[e.id]):null!=t&&i[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}async _executeAsync(e,t,n=!1,r={},s={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));const a=new aN(this.weightMap,r,s,this.functionExecutorMap),i=await this.executeWithControlFlow(e,a,t,n),o=t.map((e=>dk(e,i,a))),l=o.map((e=>e.id)),u=Object.keys(e).map((t=>e[t].id)),c=new Set([...l,...u,...this.weightIds]);return Object.keys(i).forEach((e=>{i[e].forEach((e=>{!e||e.isDisposed||c.has(e.id)||e.dispose()}))})),null==this.parent&&a.dispose(c),o}async executeFunctionAsync(e,t,n){const r=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(r,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,r){const s=Object.keys(e),a=s.map((e=>this.graph.nodes[gk(e)[0]])),i=n.map((e=>gk(e)[0]));let o=i.map((e=>this.graph.nodes[e]));0===o.length&&(o=this._outputs);const{usedNodes:l,missingInputs:u,dynamicNode:c,syncInputs:h}=iN(e,o,this.weightMap,this._initNodes),p=[...a,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),d=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=gk(t),s=[];s[r]=e[t],d[n]=s}));const f={},m=this.getFrozenTensorIds(d),g={};for(;p.length>0;){const e=this.processStack(a,p,t,d,g,m,i,f,l);await Promise.all(e)}null!=c||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=o.filter((e=>!cN(e)&&!dk(e.name,d,t))).map((e=>e.name));if(y.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${s}]. Consider providing the following inputs: [${u}]. ${e}`)}return d}processStack(e,t,n,r,s,a,i,o,l){const u=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&pk("isConstant",e.node,r,n)&&([c]=fk(e.node.name,n)),null==r[e.node.name]){const h=sN(e.node,r,n,this._resourceManager);c||([c]=fk(e.node.name,n));const p=n.currentContext;Le(h)?u.push(h.then((u=>(r[c]=u,n.currentContext=p,this.checkTensorForDisposal(c,e.node,r,n,a,i,o),this.processChildNodes(e.node,t,n,r,s,l),u)))):(r[c]=h,this.checkTensorForDisposal(c,e.node,r,n,a,i,o),this.processChildNodes(e.node,t,n,r,s,l))}else this.processChildNodes(e.node,t,n,r,s,l)}return u}processChildNodes(e,t,n,r,s,a){e.children.forEach((e=>{const[i]=fk(e.name,n);!s[i]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!dk(e,r,n)))&&(s[i]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!dk(e,r,n)))&&(s[i]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[r]=gk(t),s=this.graph.nodes[r];if(s.attrParams.shape&&s.attrParams.shape.value){const e=s.attrParams.shape.value;Z(e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t)),(()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}s.attrParams.dtype&&s.attrParams.dtype.value&&Z(n.dtype===s.attrParams.dtype.value,(()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){const t={};for(const n in e)null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]?t[this._signature.inputs[n].name]=e[n]:t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=gk(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]?this._signature.outputs[e].name:e),{})}checkOutputs(e){e.forEach((e=>{const[t]=gk(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class fN{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class mN{constructor(e,t={}){this.modelUrl=e,this.loadOptions=t,this.version="n/a",null==t&&(this.loadOptions={}),this.resourceManager=new fN}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=Ka(e,this.loadOptions);else{const t=ta(e,this.loadOptions);if(0===t.length)t.push(Ka(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=await this.handler.load();return this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n={};null!=this.artifacts.userDefinedMetadata&&(n=this.artifacts.userDefinedMetadata.signature),this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const r=Us(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new dN(Mk.Instance.transformGraph(t,n)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer){const t=Mk.Instance.transformGraph(e.modelInitializer);this.initializer=new dN(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=ea(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){return this.execute(e,this.outputNodes)}normalizeInputs(e){if(!(e instanceof ls||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,n,r)=>(t[n]=e[r],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function gN(e,t={}){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&null==e.load&&(e.endsWith("/")||(e+="/"),e=`${e}model.json?tfjs-format=file`);const n=new mN(e,t);return await n.load(),n}const yN="2.7.0";function bN(e,t,n=new Map,r=new Set){if(null==e)return null;if(r.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const s=t(e);if(s.recurse&&null!==s.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(s.recurse){if(NN(e)){const s=Array.isArray(e)?[]:{};r.add(e);for(const a in e){const i=bN(e[a],t,n,r);s[a]=i}return r.delete(e),s}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,s.value),s.value}function xN(e,t=vN){return wN(e,t)}function wN(e,t,n=new Set){const r=e[0];if(n.has(r))throw new Error("Circular references are not supported.");const s=t(e);if(s.recurse&&null!==s.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(s.recurse){if(NN(r)){const s=Array.isArray(r)?[]:{};n.add(r);for(const a in r){const r=wN(e.map((e=>e[a])),t,n);s[a]=r}return n.delete(r),s}throw new Error(`Can't recurse into non-iterable type: ${r}`)}return s.value}function vN(e){return null===e?null:NN(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}async function kN(e,t){const n=new Map;bN(e,t,n);for(const e of Array.from(n.keys())){const t=n.get(e);if(Le(t)){const r=await t;n.set(e,r)}}return bN(e,t,n)}function NN(e){return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof ls))}function IN(e){return e instanceof ls?{value:e.clone(),recurse:!1}:NN(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}class $N{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class CN extends $N{constructor(){super(CN.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function SN(e){return new AN(e)}function TN(e){return new RN(e)}CN.INITIAL_CAPACITY=32;class EN{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new zN(this,e)}filter(e){return new MN(this,e)}map(e){return new LN(this,e)}mapAsync(e){return new BN(this,e)}serialMapAsync(e){return new BN(this,e).serial()}flatmap(e){return new WN(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile((e=>!0===e))}rowMajorBatch(e,t=!0){return new _N(this,e,t)}columnMajorBatch(e,t=!0,n=vN){return this.rowMajorBatch(e,t).map((e=>xN(e,n)))}concatenate(e,t){return new VN(SN([this,e]),t)}take(e){return e<0||null==e?this:new ON(this,e)}skip(e){return e<0||null==e?this:new FN(this,e)}prefetch(e){return new HN(this,e)}shuffle(e,t){return new jN(this,e,t)}serial(){return new DN(this)}}class AN extends EN{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:(t=e,function(e,t){return bN(e,t)}(t,IN)),done:!1};var t}}class RN extends EN{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class DN extends EN{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class FN extends EN{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;Yi(e.value)}return this.upstream.next()}}class ON extends EN{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class _N extends EN{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class MN extends EN{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;Yi(e.value)}}}class LN extends EN{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=vs(e.value),n=this.transform(e.value),r=vs(n);for(const e of t)ws(e,r)||e.dispose();return{value:n,done:!1}}}class zN extends EN{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class BN extends EN{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=vs(e.value),n=await this.transform(e.value),r=vs(n);for(const e of t)ws(e,r)||e.dispose();return{value:n,done:!1}}}class PN extends EN{constructor(){super(),this.outputQueue=new CN,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class WN extends PN{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=vs(e.value),n=this.transform(e.value),r=vs(n);this.outputQueue.pushAll(n);for(const e of t)ws(e,r)||e.dispose();return!0}}class VN extends EN{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}var UN;!function(e){e[e.FAIL=0]="FAIL",e[e.SHORTEST=1]="SHORTEST",e[e.LONGEST=2]="LONGEST"}(UN||(UN={}));class GN extends EN{constructor(e,t=UN.FAIL){super(),this.iterators=e,this.mismatchMode=t,this.count=0,this.currentPromise=null}summary(){return"{TODO: fill in upstream of zip summaries} -> Zip"}async nextState(e){await e;let t=0,n=0;const r=await kN(this.iterators,(function(e){return e instanceof EN?{value:e.next().then((e=>(t++,e.done&&n++,e.value))),recurse:!1}:{value:null,recurse:!0}}));if(t===n)return{value:null,done:!0};if(n>0)switch(this.mismatchMode){case UN.FAIL:throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);case UN.SHORTEST:return{value:null,done:!0};case UN.LONGEST:}return this.count++,{value:r,done:!1}}async next(){return this.currentPromise=this.nextState(this.currentPromise),this.currentPromise}}class HN extends EN{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new $N(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class jN extends HN{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=gc.alea(n||es().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class qN{constructor(){this.size=null}batch(e,t=!0){const n=this;let r;return Z(e>0,(()=>`batchSize needs to be positive, but it is\n      ${e}`)),r=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),KN((async()=>(await n.iterator()).columnMajorBatch(e,t,JN)),r)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,KN((async()=>(await t.iterator()).concatenate(await e.iterator())),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,KN((async()=>(await t.iterator()).filter((t=>Xi((()=>e(t)))))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return KN((async()=>(await t.iterator()).map((t=>Xi((()=>e(t)))))),this.size)}mapAsync(e){const t=this;return KN((async()=>(await t.iterator()).mapAsync(e)),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return KN((async()=>(await t.iterator()).prefetch(e)),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,KN((async()=>{return n=TN((async()=>({value:await t.iterator(),done:!1}))).take(e),new VN(n,r);var n,r}),n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,KN((async()=>(await t.iterator()).skip(e)),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const r=this,s=gc.alea(t||es().toString());return KN((async()=>{let t=s.int32();return n&&(t+=s.int32()),(await r.iterator()).shuffle(e,t.toString())}),this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,KN((async()=>(await t.iterator()).take(e)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function KN(e,t=null){return new class extends qN{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function XN(e){return KN((async()=>SN(e)),e.length)}function YN(e){if(!NN(e))throw new Error("The argument to zip() must be an object or array.");let t;if(Array.isArray(e))for(let n=0;n<e.length;n++)t=null==t?e[n].size:Math.min(t,e[n].size);else if(e instanceof Object)for(const n in e)t=null==t?e[n].size:Math.min(t,e[n].size);return KN((async()=>function(e,t=UN.FAIL){return new GN(e,t)}(await kN(e,(e=>{if(e instanceof qN)return{value:e.iterator(),recurse:!1};if(NN(e))return{value:null,recurse:!0};throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.")})),UN.SHORTEST)),t)}function JN(e){if(null===e)return null;return null==(t=e[0])||null===(n=t)||"object"!=typeof n&&"function"!=typeof n||Array.isArray(t)||"object"==typeof t&&t instanceof ls||xe(t)?{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof ls?eh(e):Ps(e)}(e),recurse:!1}:{value:null,recurse:!0};var t,n}qN.MAX_BUFFER_SIZE=1e4;class ZN extends qN{constructor(e){super(),this.input=e}async iterator(){return(await this.input.iterator()).decodeUTF8().split("\n").map((e=>(e.endsWith("\r")&&(e=e.slice(0,-1)),e)))}}const QN='"',eI=Symbol("out"),tI=Symbol("field"),nI=Symbol("quote"),rI=Symbol("quoteafterquote"),sI=Symbol("quoteinquote");class aI extends qN{constructor(e,t){super(),this.input=e,this.hasHeader=!0,this.fullColumnNames=null,this.columnNamesValidated=!1,this.columnConfigs=null,this.configuredColumnsOnly=!1,this.delimiter=",",this.delimWhitespace=!1,this.base=new ZN(e),t||(t={}),this.hasHeader=!1!==t.hasHeader,this.fullColumnNames=t.columnNames,this.columnConfigs=t.columnConfigs,this.configuredColumnsOnly=t.configuredColumnsOnly,t.delimWhitespace?(Z(null==t.delimiter,(()=>"Delimiter should not be provided when delimWhitespace is true.")),this.delimWhitespace=!0,this.delimiter=" "):this.delimiter=t.delimiter?t.delimiter:","}async columnNames(){return this.columnNamesValidated||await this.setColumnNames(),this.configuredColumnsOnly?Object.keys(this.columnConfigs):this.fullColumnNames}async setColumnNames(){const e=await this.maybeReadHeaderLine();if(!this.fullColumnNames&&!e)throw new Error("Column names must be provided if there is no header line.");this.fullColumnNames&&e&&Z(e.length===this.fullColumnNames.length,(()=>"The length of provided columnNames ("+this.fullColumnNames.length.toString()+") does not match the length of the header line read from file ("+e.length.toString()+").")),this.fullColumnNames||(this.fullColumnNames=e);const t=this.fullColumnNames.reduce(((e,t)=>(e[t]=e[t]+1||1,e)),{}),n=Object.keys(t).filter((e=>t[e]>1));if(Z(0===n.length,(()=>"Duplicate column names found: "+n.toString())),this.columnConfigs)for(const e of Object.keys(this.columnConfigs))if(-1===this.fullColumnNames.indexOf(e))throw new Error('The key "'+e+'" provided in columnConfigs does not match any of the column names ('+this.fullColumnNames.toString()+").");this.columnNamesValidated=!0}async maybeReadHeaderLine(){if(this.hasHeader){const e=await this.base.iterator(),t=await e.next();if(t.done)throw new Error("No data was found for CSV parsing.");const n=t.value;return this.parseRow(n,!1)}return null}async iterator(){this.columnNamesValidated||await this.setColumnNames();let e=await this.base.iterator();return this.hasHeader&&(e=e.skip(1)),e.map((e=>this.makeDataElement(e)))}makeDataElement(e){const t=this.parseRow(e),n={},r={};for(let s=0;s<this.fullColumnNames.length;s++){const a=this.fullColumnNames[s],i=this.columnConfigs?this.columnConfigs[a]:null;if(!this.configuredColumnsOnly||i){const o=t[s];let l=null;if(""===o)if(i&&void 0!==i.default)l=i.default;else{if(i&&(i.required||i.isLabel))throw new Error(`Required column ${a} is empty in this line: ${e}`);l=void 0}else{const e=Number(o);if(isNaN(e))l=i&&"bool"===i.dtype?this.getBoolean(o):o;else if(i&&i.dtype)switch(i.dtype){case"float32":l=e;break;case"int32":l=Math.floor(e);break;case"bool":l=this.getBoolean(o);break;default:l=e}else l=e}i&&i.isLabel?r[a]=l:n[a]=l}}return 0===Object.keys(r).length?n:{xs:n,ys:r}}getBoolean(e){return"1"===e||"true"===e.toLowerCase()?1:0}parseRow(e,t=!0){const n=[];let r=0;const s=e.length;let a=eI;for(let t=0;t<s;t++)switch(a){case eI:switch(e.charAt(t)){case QN:r=t+1,a=nI;break;case this.delimiter:if(r=t+1," "===this.delimiter&&this.delimWhitespace)break;n.push(""),a=eI;break;default:a=tI,r=t}break;case tI:switch(e.charAt(t)){case this.delimiter:n.push(e.substring(r,t)),a=eI,r=t+1}break;case nI:switch(e.charAt(t)){case QN:a=rI}break;case rI:switch(e.charAt(t)){case this.delimiter:n.push(e.substring(r,t-1)),a=eI,r=t+1;break;case QN:a=nI;break;default:a=sI}break;case sI:switch(e.charAt(t)){case QN:a=nI}}if(a===rI?n.push(e.substring(r,s-1)):n.push(e.substring(r)),t&&n.length!==this.fullColumnNames.length)throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${n}`);return n}}class iI extends EN{constructor(e){super(),this.microphoneConfig=e,this.isClosed=!1,this.fftSize=e.fftSize||1024;const t=Math.log2(this.fftSize);if(this.fftSize<0||t<4||t>14||!Number.isInteger(t))throw new Error(`Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got ${this.fftSize}`);if(this.numFrames=e.numFramesPerSpectrogram||43,this.sampleRateHz=e.sampleRateHz,this.columnTruncateLength=e.columnTruncateLength||this.fftSize,this.audioTrackConstraints=e.audioTrackConstraints,this.smoothingTimeConstant=e.smoothingTimeConstant||0,this.includeSpectrogram=!1!==e.includeSpectrogram,this.includeWaveform=!0===e.includeWaveform,!this.includeSpectrogram&&!this.includeWaveform)throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.")}summary(){return"microphone"}static async create(e={}){if(Be().get("IS_NODE"))throw new Error("microphone API is only supported in browser environment.");const t=new iI(e);return await t.start(),t}async start(){try{this.stream=await navigator.mediaDevices.getUserMedia({audio:null==this.audioTrackConstraints||this.audioTrackConstraints,video:!1})}catch(e){throw new Error(`Error thrown while initializing video stream: ${e.message}`)}if(!this.stream)throw new Error("Could not obtain audio from microphone.");const e=window.AudioContext||window.webkitAudioContext;if(this.audioContext=new e,this.sampleRateHz){if(this.audioContext.sampleRate!==this.sampleRateHz)throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: ${this.audioContext.sampleRate}`)}else this.sampleRateHz=this.audioContext.sampleRate;const t=this.audioContext.createMediaStreamSource(this.stream);this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2*this.fftSize,this.analyser.smoothingTimeConstant=this.smoothingTimeConstant,t.connect(this.analyser),this.freqData=new Float32Array(this.fftSize),this.timeData=new Float32Array(this.fftSize)}async next(){if(this.isClosed)return{value:null,done:!0};let e,t;const n=await this.getAudioData();if(this.includeSpectrogram){const t=this.flattenQueue(n.freqDataQueue);e=this.getTensorFromAudioDataArray(t,[this.numFrames,this.columnTruncateLength,1])}if(this.includeWaveform){const e=this.flattenQueue(n.timeDataQueue);t=this.getTensorFromAudioDataArray(e,[this.numFrames*this.fftSize,1])}return{value:{spectrogram:e,waveform:t},done:!1}}async capture(){return(await this.next()).value}async getAudioData(){const e=[],t=[];let n=0;return new Promise((r=>{const s=setInterval((()=>{this.includeSpectrogram&&(this.analyser.getFloatFrequencyData(this.freqData),this.freqData[0]===-1/0&&r({freqDataQueue:e,timeDataQueue:t}),e.push(this.freqData.slice(0,this.columnTruncateLength))),this.includeWaveform&&(this.analyser.getFloatTimeDomainData(this.timeData),t.push(this.timeData.slice())),++n===this.numFrames&&(clearInterval(s),r({freqDataQueue:e,timeDataQueue:t}))}),this.fftSize/this.sampleRateHz*1e3)}))}stop(){this.isClosed||(this.isClosed=!0,this.analyser.disconnect(),this.audioContext.close(),null!=this.stream&&this.stream.getTracks().length>0&&this.stream.getTracks()[0].stop())}toArray(){throw new Error("Can not convert infinite audio stream to array.")}getSampleRate(){return this.sampleRateHz}flattenQueue(e){const t=e[0].length,n=new Float32Array(e.length*t);return e.forEach(((e,r)=>n.set(e,r*t))),n}getTensorFromAudioDataArray(e,t){const n=new Float32Array(ne(t));return n.set(e,n.length-e.length),Ps(n,t)}}class oI extends EN{constructor(e,t){if(super(),this.webcamVideoElement=e,this.webcamConfig=t,this.isClosed=!0,this.resize=!1,this.needToResize())if(this.resize=!0,this.cropSize=[this.webcamConfig.resizeHeight,this.webcamConfig.resizeWidth],this.cropBoxInd=Nc([0],"int32"),this.webcamConfig.centerCrop){const e=1*this.webcamConfig.resizeWidth/this.webcamVideoElement.width,t=1*this.webcamConfig.resizeHeight/this.webcamVideoElement.height,n=(1-e)/2,r=(1-t)/2,s=n+e,a=t+r;this.cropBox=sh([r,n,a,s],[1,4])}else this.cropBox=sh([0,0,1,1],[1,4])}summary(){return"webcam"}static async create(e,t={}){if(Be().get("IS_NODE"))throw new Error("tf.data.webcam is only supported in browser environment.");if(!e){if(e=document.createElement("video"),!t.resizeWidth||!t.resizeHeight)throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");e.width=t.resizeWidth,e.height=t.resizeHeight}const n=new oI(e,t);return await n.start(),n}async start(){this.webcamConfig.facingMode&&Z("user"===this.webcamConfig.facingMode||"environment"===this.webcamConfig.facingMode,(()=>`Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`));try{this.stream=await navigator.mediaDevices.getUserMedia({video:{deviceId:this.webcamConfig.deviceId,facingMode:this.webcamConfig.facingMode?this.webcamConfig.facingMode:"user",width:this.webcamVideoElement.width,height:this.webcamVideoElement.height}})}catch(e){throw e.message=`Error thrown while initializing video stream: ${e.message}`,e}if(!this.stream)throw new Error("Could not obtain video from webcam.");try{this.webcamVideoElement.srcObject=this.stream}catch(e){console.log(e),this.webcamVideoElement.src=window.URL.createObjectURL(this.stream)}return this.webcamVideoElement.play(),this.isClosed=!1,new Promise((e=>{this.webcamVideoElement.onloadedmetadata=()=>{e()}}))}async next(){if(this.isClosed)return{value:null,done:!0};let e;try{e=oi(this.webcamVideoElement)}catch(e){throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(e)}`)}if(!this.resize)return{value:e,done:!1};try{return{value:this.cropAndResizeFrame(e),done:!1}}catch(e){throw new Error(`Error thrown cropping the video: ${e.message}`)}finally{e.dispose()}}needToResize(){return!(!this.webcamConfig.resizeWidth||!this.webcamConfig.resizeHeight||this.webcamVideoElement.width===this.webcamConfig.resizeWidth&&this.webcamVideoElement.height===this.webcamConfig.resizeHeight)}cropAndResizeFrame(e){return Xi((()=>{const t=e.toFloat().expandDims(0);let n;n=Mp.cropAndResize(t,this.cropBox,this.cropBoxInd,this.cropSize,"bilinear");const r=n.shape;return n.reshape(r.slice(1))}))}async capture(){return(await this.next()).value}stop(){this.stream.getTracks().forEach((e=>e.stop()));try{this.webcamVideoElement.srcObject=null}catch(e){console.log(e),this.webcamVideoElement.src=null}this.isClosed=!0}toArray(){throw new Error("Can not convert infinite video stream to array.")}}class lI{}class uI extends EN{split(e){return new cI(this,e)}}class cI extends uI{constructor(e,t){super(),this.upstream=e,this.impl=new hI(e,t)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class hI extends PN{constructor(e,t){super(),this.upstream=e,this.separator=t,this.carryover=""}summary(){return`${this.upstream.summary()} -> Split('${this.separator}')`}async pump(){const e=await this.upstream.next();if(e.done)return""!==this.carryover&&(this.outputQueue.push(this.carryover),this.carryover="",!0);const t=e.value.split(this.separator);t[0]=this.carryover+t[0];for(const e of t.slice(0,-1))this.outputQueue.push(e);return this.carryover=t[t.length-1],!0}}class pI extends EN{decodeUTF8(){return new dI(this)}}class dI extends uI{constructor(e){super(),this.upstream=e,this.impl=new fI(e)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class fI extends PN{constructor(e){if(super(),this.upstream=e,Be().get("IS_BROWSER"))this.decoder=new TextDecoder("utf-8");else{const{StringDecoder:e}=n(589);this.decoder=new e("utf8")}}summary(){return`${this.upstream.summary()} -> Utf8`}async pump(){const e=await this.upstream.next();let t,n;return!e.done&&(t=e.value,n=Be().get("IS_BROWSER")?this.decoder.decode(t,{stream:!0}):this.decoder.write(Buffer.from(t.buffer)),this.outputQueue.push(n),!0)}}class mI extends pI{constructor(e,t={}){super(),this.file=e,this.options=t,Z(e instanceof Uint8Array||!!Be().get("IS_BROWSER")&&(e instanceof File||e instanceof Blob),(()=>"FileChunkIterator only supports File, Blob and Uint8Array right now.")),this.offset=t.offset||0,this.chunkSize=t.chunkSize||1048576}summary(){return`FileChunks ${this.file}`}async next(){if(this.offset>=(this.file instanceof Uint8Array?this.file.byteLength:this.file.size))return{value:null,done:!0};const e=new Promise(((e,t)=>{const n=this.offset+this.chunkSize;if(this.file instanceof Uint8Array)e(new Uint8Array(this.file.slice(this.offset,n)));else{const r=new FileReader;r.onload=n=>{let s=r.result;if(s instanceof ArrayBuffer&&(s=new Uint8Array(s)),!(s instanceof Uint8Array))return t(new TypeError("FileReader returned unknown type."));e(s)},r.onabort=e=>t(new Error("Aborted")),r.onerror=e=>t(new Error(e.type));const s=this.file.slice(this.offset,n);r.readAsArrayBuffer(s)}this.offset=n}));return{value:await e,done:!1}}}function gI(e){return"string"==typeof e&&"file://"===e.substr(0,7)}class yI extends lI{constructor(e,t={}){super(),this.input=e,this.options=t}async iterator(){if(gI(this.input)&&Be().get("IS_NODE")){const e=n(993);this.input=e.readFileSync(this.input.substr(7))}return new mI(this.input,this.options)}}class bI extends lI{constructor(e,t={}){super(),this.url=e,this.fileOptions=t}async iterator(){return gI(this.url)?new yI(this.url,this.fileOptions).iterator():async function(e,t={}){let n,r;var s;"string"==typeof e?n=e:(n=e.url,r={method:(s=e).method,headers:s.headers,body:s.body,mode:s.mode,credentials:s.credentials,cache:s.cache,redirect:s.redirect,referrer:s.referrer,integrity:s.integrity});const a=await ts(n,r);if(a.ok){const e=new Uint8Array(await a.arrayBuffer());return new mI(e,t)}throw new Error(a.statusText)}(this.url,this.fileOptions)}}function xI(e,t={}){return new aI(new bI(e),t)}function wI(e){const t=TN(e);return KN((async()=>t))}function vI(e){return KN((async()=>{const t=await e();return TN((()=>t.next()))}))}async function kI(e,t){return oI.create(e,t)}async function NI(e){return iI.create(e)}const II="2.7.0";function $I(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&Z("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}const CI=up,SI=gd,TI=yd,EI=bd,AI=fh;class RI extends G{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new U(this,ji())}write(e,t,n){this.firstUse&&(this.firstUse=!1,Be().get("IS_NODE")&&rd("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const r={};return this.data.set(r,{values:e,dtype:n,refCount:1}),r}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&ke(n[0])){const s=n.map((e=>ns(e)));r=this.write(s,e,t)}else r=this.write(n,e,t);return{dataId:r,shape:e,dtype:t}}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,t,n,r){this.data.set(e,{values:t,dtype:r,refCount:1})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);return"complex64"===t?ad(this.readSync(n.real.dataId),this.readSync(n.imag.dataId)):this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>rs(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Da(e.shape,e.dtype,n)}makeOutput(e,t,n){const r=this.write(e,t,n);return ji().makeTensorFromDataId(r,t,n,this)}disposeData(e){if(this.data.has(e)){const{complexTensorInfos:t}=this.data.get(e);null!=t&&(this.disposeData(t.real.dataId),this.disposeData(t.imag.dataId)),this.data.delete(e)}}disposeIntermediateTensorInfo(e){const t=e.dataId;if(this.data.has(t)){const e=this.data.get(t);e.refCount--,e.refCount<1&&this.disposeData(t)}}async time(e){const t=es();return e(),{kernelMs:es()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}stridedSlice(e,t,n,r){$I(e,"stridedSlice");const s=fi(t,n,r);if(s.some((e=>0===e)))return Ps([],s);const a=Da(s,e.dtype),i=this.bufferSync(e);for(let e=0;e<a.size;e++){const n=a.indexToLoc(e),s=new Array(n.length);for(let e=0;e<s.length;e++)s[e]=n[e]*r[e]+t[e];a.set(i.get(...s),...n)}return a.toTensor()}diag(e){const t=this.readSync(e.dataId),n=Da([e.size,e.size],e.dtype),r=n.values;for(let n=0;n<t.length;n++)r[n*e.size+n]=t[n];return n.toTensor()}unstack(e,t){const n=e.shape[t],r=new Array(e.rank-1);let s=0;for(let n=0;n<e.rank;n++)n!==t&&(r[s++]=e.shape[n]);const a=new Array(e.rank).fill(0),i=e.shape.slice();i[t]=1;const o=new Array(n);for(let n=0;n<o.length;n++)a[t]=n,o[n]=$l(e,a,i).reshape(r);return o}reverse(e,t){$I(e,"reverse");const n=Da(e.shape,e.dtype),r=this.bufferSync(e);for(let s=0;s<n.size;s++){const a=n.indexToLoc(s),i=a.slice();t.forEach((t=>i[t]=e.shape[t]-1-i[t])),n.set(r.get(...i),...a)}return n.toTensor()}neg(e){return $I(e,"neg"),ho(No(-1),e)}addN(e){$I(e,"addN");const t=e.map((e=>this.readSync(e.dataId))),n=Da(e[0].shape,e[0].dtype),r=n.values;for(let n=0;n<e.length;n++){const e=t[n];for(let t=0;t<r.length;t++)r[t]+=e[t]}return n.toTensor()}softmax(e,t){const n=pe([t],e.shape),r=_u(e,n),s=jo(r.shape,n),a=Eo(e,r.reshape(s)),i=ou(a),o=this.sum(i,n).reshape(s);return co(i,o)}pow(e,t){return $I([e,t],"pow"),this.broadcastedBinaryOp(e,t,e.dtype,((e,t)=>Math.pow(e,t)))}floorDiv(e,t){return $I([e,t],"floorDiv"),this.broadcastedBinaryOp(e,t,"int32",((e,t)=>Math.floor(e/t)))}sum(e,t){$I(e,"sum"),qo("sum",t,e.rank);const[n,r]=Ho(e.shape,t),s=ju(n,gs(e.dtype,"int32")),a=ne(r),i=this.readSync(s.dataId),o=this.readSync(e.dataId);for(let e=0;e<i.length;++e){const t=e*a;let n=0;for(let e=0;e<a;++e)n+=o[t+e];i[e]=n}return s}prod(e,t){$I(e,"sum");const[n,r]=Ho(e.shape,t),s=ju(n,gs(e.dtype,"int32")),a=ne(r),i=this.readSync(s.dataId),o=this.readSync(e.dataId);for(let e=0;e<i.length;++e){const t=e*a;let n=1;for(let e=0;e<a;++e)n*=o[t+e];i[e]=n}return s}unsortedSegmentSum(e,t,n){$I(e,"unsortedSegmentSum");const r=[],s=e.rank-t.rank;for(let e=0;e<s;++e)t=t.expandDims(e+1);for(let s=0;s<n;++s){const n=No(s,"int32"),a=tu(n,t).asType("float32").mul(e).sum(0);r.push(a)}return eh(r)}argMin(e,t){$I(e,"argMin");const n=[t];qo("argMin",n,e.rank);const[r,s]=Ho(e.shape,n),a=ju(r,"int32"),i=ne(s),o=this.readSync(a.dataId),l=this.readSync(e.dataId);for(let e=0;e<o.length;++e){const t=e*i;let n=l[t],r=0;for(let e=0;e<i;++e){const s=l[t+e];s<n&&(n=s,r=e)}o[e]=r}return a}argMax(e,t){$I(e,"argMax");const n=[t];qo("argMax",n,e.rank);const[r,s]=Ho(e.shape,n),a=ju(r,"int32"),i=ne(s),o=this.readSync(a.dataId),l=this.readSync(e.dataId);for(let e=0;e<o.length;++e){const t=e*i;let n=l[t],r=0;for(let e=0;e<i;++e){const s=l[t+e];s>n&&(n=s,r=e)}o[e]=r}return a}cumsum(e,t,n,r){if($I(e,"cumsum"),t!==e.rank-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${e.rank-1} but got axis=${t}`);const s=gs(e.dtype,"int32"),a=ju(e.shape,s),i=this.readSync(a.dataId),o=this.readSync(e.dataId),l=e.shape[e.rank-1],u=r?(e,t)=>e+l-t-1:(e,t)=>e+t;for(let e=0;e<o.length;e+=l)for(let t=0;t<l;t++){const r=u(e,t);if(0===t)i[r]=n?0:o[r];else{const s=u(e,t-1);i[r]=n?o[s]+i[s]:o[r]+i[s]}}return a}equal(e,t){return $I([e,t],"equal"),this.broadcastedBinaryOp(e,t,"bool",((e,t)=>e===t?1:0))}notEqual(e,t){return $I([e,t],"notEqual"),this.broadcastedBinaryOp(e,t,"bool",((e,t)=>e!==t?1:0))}less(e,t){return $I([e,t],"less"),this.broadcastedBinaryOp(e,t,"bool",((e,t)=>e<t?1:0))}lessEqual(e,t){return $I([e,t],"lessEqual"),this.broadcastedBinaryOp(e,t,"bool",((e,t)=>e<=t?1:0))}greater(e,t){return $I([e,t],"greater"),this.broadcastedBinaryOp(e,t,"bool",((e,t)=>e>t?1:0))}greaterEqual(e,t){return $I([e,t],"greaterEqual"),this.broadcastedBinaryOp(e,t,"bool",((e,t)=>e>=t?1:0))}logicalAnd(e,t){return $I([e,t],"logicalAnd"),this.broadcastedBinaryOp(e,t,"bool",((e,t)=>e&&t))}logicalOr(e,t){return $I([e,t],"logicalOr"),this.broadcastedBinaryOp(e,t,"bool",((e,t)=>e||t))}select(e,t,n){$I([e,t,n],"select");const r=this.readSync(e.dataId),s=this.readSync(t.dataId),a=this.readSync(n.dataId),i=ju(t.shape,gs(t.dtype,n.dtype)),o=this.readSync(i.dataId);let l=0;const u=0===e.rank||e.rank>1||1===t.rank?1:ne(t.shape.slice(1));for(let e=0;e<r.length;e++)for(let t=0;t<u;t++)1===r[e]?o[l++]=s[e]:o[l++]=a[e];return i}where(e){$I([e],"where");const t=this.readSync(e.dataId);return AI(e.shape,t)}topk(e,t,n){$I(e,"topk");const r=this.readSync(e.dataId);return EI(r,e.shape,e.dtype,t,n)}min(e,t){$I(e,"min"),qo("min",t,e.rank);const[n,r]=Ho(e.shape,t),s=ju(n,e.dtype),a=ne(r),i=this.readSync(s.dataId),o=this.readSync(e.dataId);for(let e=0;e<i.length;++e){const t=e*a;let n=o[t];for(let e=0;e<a;++e){const r=o[t+e];r<n&&(n=r)}i[e]=n}return s}minimum(e,t){return $I([e,t],"minimum"),this.broadcastedBinaryOp(e,t,e.dtype,((e,t)=>Math.min(e,t)))}mod(e,t){return $I([e,t],"mod"),this.broadcastedBinaryOp(e,t,e.dtype,((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t}))}maximum(e,t){return $I([e,t],"maximum"),this.broadcastedBinaryOp(e,t,e.dtype,((e,t)=>Math.max(e,t)))}all(e,t){$I(e,"all"),qo("all",t,e.rank);const[n,r]=Ho(e.shape,t),s=ju(n,e.dtype),a=ne(r),i=this.readSync(s.dataId),o=this.readSync(e.dataId);for(let e=0;e<i.length;++e){const t=e*a;let n=o[t];for(let e=0;e<a;++e){const r=o[t+e];n=n&&r}i[e]=n}return s}any(e,t){$I(e,"any"),qo("any",t,e.rank);const[n,r]=Ho(e.shape,t),s=ju(n,e.dtype),a=ne(r),i=this.readSync(s.dataId),o=this.readSync(e.dataId);for(let e=0;e<i.length;++e){const t=e*a;let n=o[t];for(let e=0;e<a;++e){const r=o[t+e];n=n||r}i[e]=n}return s}squaredDifference(e,t){return $I([e,t],"squaredDifference"),this.broadcastedBinaryOp(e,t,e.dtype,((e,t)=>{const n=e-t;return n*n}))}eluDer(e,t){$I([e,t],"eluDer");const n=new Float32Array(t.size),r=this.readSync(t.dataId),s=this.readSync(e.dataId);for(let e=0;e<r.length;++e){const t=r[e];n[e]=t>=1?s[e]:s[e]*(t+1)}return this.makeOutput(n,t.shape,"float32")}atan2(e,t){return $I([e,t],"atan2"),this.broadcastedBinaryOp(e,t,e.dtype,((e,t)=>Math.atan2(e,t)))}tile(e,t){return $I(e,"tile"),TI(this.bufferSync(e),t)}gather(e,t,n){$I([e,t],"gather");const r=e.shape.slice(),s=this.readSync(t.dataId);r[n]=s.length;const a=Da(r,e.dtype),i=this.bufferSync(e);for(let e=0;e<a.size;++e){const t=a.indexToLoc(e),r=t.slice();r[n]=s[t[n]];const o=i.locToIndex(r);a.values[e]=i.values[o]}return a.toTensor()}batchToSpaceND(e,t,n){$I([e],"batchToSpaceND");const r=t.reduce(((e,t)=>e*t)),s=Gp(e.shape,t,r),a=Hp(s.length,t.length),i=jp(e.shape,t,r),o=qp(n,t.length),l=Kp(i,n,t.length);return ni(e.reshape(s),a).reshape(i).slice(o,l)}pool3d(e,t,n){$I(e,"pool3d");const r=t.strideDepth,s=t.strideHeight,a=t.strideWidth,i=t.dilationDepth,o=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.front,d=t.padInfo.top,f=t.padInfo.left,m="max"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=this.readSync(e.dataId),y=Da(t.outShape,e.dtype),b=y.values,x=t.outShape[1]*t.outShape[2]*t.outShape[3]*t.outShape[4],w=t.outShape[2]*t.outShape[3]*t.outShape[4],v=t.outShape[3]*t.outShape[4],k=t.outShape[4];for(let y=0;y<t.batchSize;++y){const N=y*x,I=y*e.strides[0];for(let y=0;y<t.inChannels;++y)for(let x=0;x<t.outDepth;++x){const $=x*r-p;let C=$;for(;C<0;)C+=i;const S=Math.min(t.inDepth,u+$),T=N+x*w;for(let r=0;r<t.outHeight;++r){const u=r*s-d;let p=u;for(;p<0;)p+=o;const x=Math.min(t.inHeight,c+u),w=T+r*v;for(let r=0;r<t.outWidth;++r){const s=r*a-f;let u=s;for(;u<0;)u+=l;const c=Math.min(t.inWidth,h+s),d=w+r*k;let v=m,N=0,$=0;for(let t=C;t<S;t+=i){const r=I+t*e.strides[1];for(let t=p;t<x;t+=o){const s=r+t*e.strides[2];for(let t=u;t<c;t+=l){const r=g[s+t*e.strides[3]+y];if("max"===n&&r>v?v=r:"avg"===n&&(N+=r,$++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}b[d+y]="avg"===n?N/$:v}}}}return y.toTensor()}avgPool3d(e,t){return $I(e,"avgPool3d"),this.pool3d(e,t,"avg").toFloat()}avgPool3dBackprop(e,t,n){$I([e,t],"avgPool3dBackprop");const r=n.strideDepth,s=n.strideHeight,a=n.strideWidth,i=n.filterDepth,o=n.filterHeight,l=n.filterWidth,u=n.dilationDepth,c=n.dilationHeight,h=n.dilationWidth,p=n.effectiveFilterDepth,d=n.effectiveFilterHeight,f=n.effectiveFilterWidth,m=p-1-n.padInfo.front,g=f-1-n.padInfo.left,y=d-1-n.padInfo.top,b=Da(t.shape,"float32"),x=1/(i*o*l),w=this.bufferSync(e);for(let e=0;e<n.batchSize;++e)for(let t=0;t<n.inChannels;++t)for(let i=0;i<n.inDepth;++i)for(let o=0;o<n.inHeight;++o)for(let l=0;l<n.inWidth;++l){const v=i-m,k=o-y,N=l-g;let I=0;for(let i=0;i<p;i+=u){const o=(v+i)/r;if(!(o<0||o>=n.outDepth||Math.floor(o)!==o))for(let r=0;r<d;r+=c){const i=(k+r)/s;if(!(i<0||i>=n.outHeight||Math.floor(i)!==i))for(let r=0;r<f;r+=h){const s=(N+r)/a;s<0||s>=n.outWidth||Math.floor(s)!==s||(I+=w.get(e,o,i,s,t))}}}b.set(I*x,e,i,o,l,t)}return b.toTensor()}maxPool3d(e,t){return $I(e,"maxPool3d"),this.pool3d(e,t,"max").toFloat()}maxPool3dPositions(e,t){const n=Da(t.outShape,"int32"),r=t.strideDepth,s=t.strideHeight,a=t.strideWidth,i=t.dilationDepth,o=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.front,d=t.padInfo.top,f=t.padInfo.left,m=this.bufferSync(e);for(let e=0;e<t.batchSize;++e)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*r-p;let x=b;for(;x<0;)x+=i;const w=Math.min(t.inDepth,u+b);for(let r=0;r<t.outHeight;++r){const u=r*s-d;let p=u;for(;p<0;)p+=o;const v=Math.min(t.inHeight,c+u);for(let s=0;s<t.outWidth;++s){const d=s*a-f;let k=d;for(;k<0;)k+=l;const N=Math.min(t.inWidth,h+d);let I=Number.NEGATIVE_INFINITY,$=-1;for(let t=x;t<w;t+=i){const n=t-b;for(let r=p;r<v;r+=o){const s=r-u;for(let a=k;a<N;a+=l){const i=a-d,o=m.get(e,t,r,a,g);o>=I&&(I=o,$=n*c*h+s*c+i)}}}n.set($,e,y,r,s,g)}}}return n.toTensor()}maxPool3dBackprop(e,t,n,r){$I([t,n],"maxPool3dBackprop");const s=this.maxPool3dPositions(t,r),a=r.strideDepth,i=r.strideHeight,o=r.strideWidth,l=r.dilationDepth,u=r.dilationHeight,c=r.dilationWidth,h=r.effectiveFilterDepth,p=r.effectiveFilterHeight,d=r.effectiveFilterWidth,f=h-1-r.padInfo.front,m=d-1-r.padInfo.left,g=p-1-r.padInfo.top,y=Da(t.shape,"float32"),b=this.bufferSync(s),x=this.bufferSync(e);for(let e=0;e<r.batchSize;++e)for(let t=0;t<r.inChannels;++t)for(let n=0;n<r.inDepth;++n)for(let s=0;s<r.inHeight;++s)for(let w=0;w<r.inWidth;++w){const v=n-f,k=s-g,N=w-m;let I=0;for(let n=0;n<h;n+=l){const s=(v+n)/a;if(!(s<0||s>=r.outDepth||Math.floor(s)!==s))for(let a=0;a<p;a+=u){const l=(k+a)/i;if(!(l<0||l>=r.outHeight||Math.floor(l)!==l))for(let i=0;i<d;i+=c){const u=(N+i)/o;if(u<0||u>=r.outWidth||Math.floor(u)!==u)continue;const c=h*p*d-1-b.get(e,s,l,u,t)===n*p*d+a*d+i?1:0;0!==c&&(I+=x.get(e,s,l,u,t)*c)}}}y.set(I,e,n,s,w,t)}return y.toTensor()}resizeBilinear(e,t,n,r){$I(e,"resizeBilinear");const[s,a,i,o]=e.shape,l=this.readSync(e.dataId),u=new Float32Array(ne([s,t,n,o])),c=[r&&t>1?a-1:a,r&&n>1?i-1:i],h=[r&&t>1?t-1:t,r&&n>1?n-1:n];let p=0;const d=c[0]/h[0],f=c[1]/h[1];for(let r=0;r<s;r++)for(let s=0;s<t;s++){const t=d*s,c=Math.floor(t),h=t-c,m=Math.min(a-1,Math.ceil(t)),g=r*e.strides[0]+c*e.strides[1],y=r*e.strides[0]+m*e.strides[1];for(let t=0;t<n;t++){const n=f*t,r=Math.floor(n),s=n-r,a=Math.min(i-1,Math.ceil(n)),c=g+r*e.strides[2],d=y+r*e.strides[2],m=g+a*e.strides[2],b=y+a*e.strides[2];for(let e=0;e<o;e++){const t=l[c+e],n=l[d+e],r=t+(l[m+e]-t)*s,a=r+(n+(l[b+e]-n)*s-r)*h;u[p++]=a}}}return Ps(u,[s,t,n,o])}resizeBilinearBackprop(e,t,n){$I([e,t],"resizeBilinearBackprop");const[r,s,a,i]=t.shape,[,o,l]=e.shape,u=new Float32Array(r*s*a*i),c=[n&&o>1?s-1:s,n&&l>1?a-1:a],h=[n&&o>1?o-1:o,n&&l>1?l-1:l],p=c[0]/h[0],d=c[1]/h[1],f=this.readSync(e.dataId);let m=0;for(let e=0;e<r;e++){const n=e*t.strides[0];for(let e=0;e<o;e++){const r=e*p,o=Math.floor(r),c=Math.min(Math.ceil(r),s-1),h=n+o*t.strides[1],g=n+c*t.strides[1],y=r-o,b=1-y;for(let e=0;e<l;e++){const n=e*d,r=Math.floor(n),s=Math.min(Math.ceil(n),a-1),o=n-r,l=1-o,c=h+r*t.strides[2],p=h+s*t.strides[2],x=g+r*t.strides[2],w=g+s*t.strides[2],v=b*l,k=b*o,N=y*l,I=y*o;for(let e=0;e<i;e++){const t=f[m++];u[c+e]+=t*v,u[p+e]+=t*k,u[x+e]+=t*N,u[w+e]+=t*I}}}}return ah(u,[r,a,s,i],t.dtype)}resizeNearestNeighbor(e,t,n,r){$I(e,"resizeNearestNeighbor");const[s,a,i,o]=e.shape,l=this.readSync(e.dataId),u=new Float32Array(s*t*n*o),c=[r&&t>1?a-1:a,r&&n>1?i-1:i],h=[r&&t>1?t-1:t,r&&n>1?n-1:n],p=c[0]/h[0],d=c[1]/h[1];let f=0;for(let c=0;c<s;c++){const s=c*e.strides[0];for(let c=0;c<t;c++){const t=p*c,h=s+Math.min(a-1,r?Math.round(t):Math.floor(t))*e.strides[1];for(let t=0;t<n;t++){const n=d*t,s=h+Math.min(i-1,r?Math.round(n):Math.floor(n))*e.strides[2];for(let e=0;e<o;e++){const t=l[s+e];u[f++]=t}}}}return Ps(u,[s,t,n,o],e.dtype)}resizeNearestNeighborBackprop(e,t,n){$I([e,t],"resizeNearestNeighborBackprop");const[r,s,a,i]=t.shape,[,o,l]=e.shape,u=new Float32Array(r*s*a*i),c=this.readSync(e.dataId),h=[n&&o>1?s-1:s,n&&l>1?a-1:a],p=[n&&o>1?o-1:o,n&&l>1?l-1:l],d=h[0]/p[0],f=h[1]/p[1],m=1/d,g=1/f,y=2*Math.ceil(m)+2,b=2*Math.ceil(g)+2;for(let h=0;h<r;h++){const r=h*t.strides[0];for(let h=0;h<s;h++){const p=r+h*t.strides[1],x=Math.floor(h*m),w=Math.floor(x-y/2);for(let m=0;m<a;m++){const x=p+m*t.strides[2],v=Math.floor(m*g),k=Math.floor(v-b/2);for(let t=0;t<i;t++){let i=0;for(let u=0;u<y;u++){const p=u+w;if(p<0||p>=o)continue;const g=r+p*e.strides[1],y=p*d;if(h===Math.min(s-1,n?Math.round(y):Math.floor(y)))for(let r=0;r<b;r++){const s=r+k;if(s<0||s>=l)continue;const o=g+s*e.strides[2],u=s*f;m===Math.min(a-1,n?Math.round(u):Math.floor(u))&&(i+=c[o+t])}}u[x+t]=i}}}}return ah(u,t.shape,t.dtype)}localResponseNormalization4D(e,t,n,r,s){$I(e,"localResponseNormalization4D");const a=e.shape[3],i=a-1,o=this.readSync(e.dataId),l=e.size,u=new Float32Array(l);function c(e){const n=e%a;let r=e-n+Math.max(0,n-t);const s=e-n+Math.min(n+t,i);let l=0;for(;r<=s;r++){const e=o[r];l+=e*e}return l}for(let e=0;e<l;e++){const t=c(e),a=o[e]*Math.pow(n+r*t,-s);u[e]=a}return ah(u,e.shape)}LRNGrad(e,t,n,r,s,a,i){$I(e,"LRNGrad");const o=e.shape[3],l=this.readSync(e.dataId),u=this.readSync(t.dataId),c=this.readSync(n.dataId),h=new Float32Array(e.size),p=e.size;for(let e=0;e<p;e++){const t=e%o,n=e-t+Math.max(0,t-r),p=e-t+Math.min(o,t+r+1);let d=0;for(let e=n;e<p;e++)d+=Math.pow(u[e],2);d=a*d+s;for(let t=n;t<p;t++){let n=-2*a*i*u[t]*c[e]/d;e===t&&(n+=Math.pow(d,-i)),n*=l[e],h[t]+=n}}return ah(h,e.shape)}multinomial(e,t,n,r){$I(e,"multinomial");const s=t?e:Hc(e),a=s.shape[0],i=s.shape[1],o=ju([a,n],"int32"),l=this.readSync(o.dataId),u=this.readSync(s.dataId);for(let e=0;e<a;++e){const t=e*i,s=new Float32Array(i-1);s[0]=u[t];for(let e=1;e<s.length;++e)s[e]=s[e-1]+u[t+e];const a=gc.alea(r.toString()),o=e*n;for(let e=0;e<n;++e){const t=a();l[o+e]=s.length;for(let n=0;n<s.length;n++)if(t<s[n]){l[o+e]=n;break}}}return o}oneHot(e,t,n,r){$I(e,"oneHot");const s=new Float32Array(e.size*t);s.fill(r);const a=this.readSync(e.dataId);for(let r=0;r<e.size;++r)a[r]>=0&&a[r]<t&&(s[r*t+a[r]]=n);return sh(s,[e.size,t],"int32")}nonMaxSuppression(e,t,n,r,s){$I(e,"nonMaxSuppression");const a=this.readSync(e.dataId),i=this.readSync(t.dataId);return CI(a,i,n,r,s)}depthToSpace(e,t,n){Z("NHWC"===n,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${n}`)),Z(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`));const r=e.shape[0],s=e.shape[1],a=e.shape[2],i=e.shape[3],o=s*t,l=a*t,u=i/(t*t),c=this.readSync(e.dataId),h=new Float32Array(r*o*l*u);let p=0;for(let e=0;e<r;++e)for(let n=0;n<o;++n){const r=Math.floor(n/t),o=n%t;for(let n=0;n<l;++n){const l=Math.floor(n/t),d=(o*t+n%t)*u;for(let t=0;t<u;++t){const n=t+d+i*(l+a*(r+s*e));h[p++]=c[n]}}}return ah(h,[r,o,l,u])}broadcastedBinaryOp(e,t,n,r){const s=Oo(e.shape,t.shape),a=Da(s,n),i=this.readSync(e.dataId),o=this.readSync(t.dataId),l=Do(e.shape,s),u=Do(t.shape,s),c=a.values;if(l.length+u.length===0)for(let e=0;e<c.length;++e)c[e]=r(i[e%i.length],o[e%o.length]);else{const n=this.bufferSync(e),s=this.bufferSync(t);for(let h=0;h<c.length;++h){const p=a.indexToLoc(h),d=p.slice(-e.rank);l.forEach((e=>d[e]=0));const f=n.locToIndex(d),m=p.slice(-t.rank);u.forEach((e=>m[e]=0));const g=s.locToIndex(m);c[h]=r(i[f],o[g])}}return a.toTensor()}split(e,t,n){return SI(e,t,n)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}cropAndResize(e,t,n,r,s,a){const[i,o,l,u]=e.shape,c=t.shape[0],[h,p]=r,d=Da([c,h,p,u],"float32"),f=this.readSync(t.dataId),m=this.readSync(n.dataId),g=this.readSync(e.dataId),y=e.strides,b=d.strides;for(let e=0;e<c;e++){const t=4*e,n=f[t],r=f[t+1],c=f[t+2],x=f[t+3],w=m[e];if(w>=i)continue;const v=h>1?(c-n)*(o-1)/(h-1):0,k=p>1?(x-r)*(l-1)/(p-1):0;for(let t=0;t<h;t++){const i=h>1?n*(o-1)+t*v:.5*(n+c)*(o-1);if(i<0||i>o-1)for(let n=0;n<p;n++)for(let r=0;r<u;r++){const s=r+n*b[2]+t*b[1]+e*b[0];d.values[s]=a}else if("bilinear"===s){const n=Math.floor(i),s=Math.ceil(i),o=i-n;for(let i=0;i<p;i++){const c=p>1?r*(l-1)+i*k:.5*(r+x)*(l-1);if(c<0||c>l-1){for(let n=0;n<u;n++){const r=n+i*b[2]+t*b[1]+e*b[0];d.values[r]=a}continue}const h=Math.floor(c),f=Math.ceil(c),m=c-h;for(let r=0;r<u;r++){let a=r+h*y[2]+n*y[1]+w*y[0];const l=g[a];a=r+f*y[2]+n*y[1]+w*y[0];const u=g[a];a=r+h*y[2]+s*y[1]+w*y[0];const c=g[a];a=r+f*y[2]+s*y[1]+w*y[0];const p=l+(u-l)*m,x=c+(g[a]-c)*m;a=r+i*b[2]+t*b[1]+e*b[0],d.values[a]=p+(x-p)*o}}}else for(let n=0;n<p;++n){const s=p>1?r*(l-1)+n*k:.5*(r+x)*(l-1);if(s<0||s>l-1){for(let r=0;r<u;r++){const s=r+n*b[2]+t*b[1]+e*b[0];d.values[s]=a}continue}const o=Math.round(s),c=Math.round(i);for(let r=0;r<u;r++){const s=r+o*y[2]+c*y[1]+w*y[0],a=r+n*b[2]+t*b[1]+e*b[0];d.values[a]=g[s]}}}}return d.toTensor()}sparseToDense(e,t,n,r){const{sliceRank:s,numUpdates:a,sliceSize:i,strides:o,outputSize:l}=hi(0,e,n);return this.scatter(e,t,n,l,i,a,s,o,r,!1)}gatherND(e,t){const n=t.shape,r=n[n.length-1],[s,a,i,o]=li(e,t);if(0===a)return Ps([],s,e.dtype);const l=new ss([a,i],e.dtype),u=this.readSync(t.dataId),c=this.readSync(e.dataId);for(let t=0;t<a;t++){const n=[];let s=0;for(let e=0;e<r;e++){const a=u[t*r+e];s+=a*o[e],n.push(a)}if(s<0||s>=e.size/i)throw new Error(`Invalid indices: ${n} does not index into ${e.shape}`);for(let e=0;e<i;e++)l.values[t*i+e]=c[s*i+e]}return l.toTensor().reshape(s)}scatterND(e,t,n){const{sliceRank:r,numUpdates:s,sliceSize:a,strides:i,outputSize:o}=hi(0,e,n),l=No(0);return this.scatter(e,t,n,o,a,s,r,i,l,!0)}onesLike(e){if("string"===e.dtype)throw new Error("onesLike is not supported for string tensors");return Co(e.shape,1,e.dtype)}zerosLike(e){const t=me(e.dtype,ne(e.shape));return this.makeOutput(t,e.shape,e.dtype)}linspace(e,t,n){return md(e,t,n)}scatter(e,t,n,r,s,a,i,o,l,u){const c=[r/s,s],h=this.readSync(e.dataId),p=this.readSync(t.dataId);if(0===r)return Ps([],n,t.dtype);const d=new ss(c,t.dtype);d.values.fill(this.readSync(l.dataId)[0]);for(let e=0;e<a;e++){const a=[];let l=0;for(let t=0;t<i;t++){const n=h[e*i+t];a.push(n),l+=n*o[t]}if(l<0||l>=r/s)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<s;n++)u?d.values[l*s+n]+=p[e*s+n]:d.values[l*s+n]=0===t.rank?p[0]:p[e*s+n]}return d.toTensor().reshape(n)}}function DI(e,t,n){return({inputs:r,attrs:s,backend:a})=>{const{x:i}=r;if($I(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,l=o.data.get(i.dataId).values,u=ne(i.shape),c=n||i.dtype,h=me(c,u);for(let e=0;e<u;++e)h[e]=t(l[e],s);return o.makeTensorInfo(i.shape,c,h)}}function FI(e,t,n){return({inputs:r,attrs:s,backend:a})=>{const{x:i}=r;if($I(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,l=o.data.get(i.dataId).values,u=n||i.dtype,c=t(l,u,s);return o.makeTensorInfo(i.shape,u,c)}}ao("cpu",(()=>new RI),1);const OI=DI(_t,(e=>e>=0?e:Math.exp(e)-1)),_I={kernelName:_t,backendName:"cpu",kernelFunc:OI};function MI(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const LI={kernelName:Jt,backendName:"cpu",kernelFunc:MI};function zI(e){return(t,n,r,s,a)=>{const i=Oo(t,n),o=i.length,l=Te(i),u=fe(a,ne(i)),c=t.length,h=n.length,p=Te(t),d=Te(n),f=Do(t,i),m=Do(n,i);if(f.length+m.length===0)for(let t=0;t<u.length;++t)u[t]=e(r[t%r.length],s[t%s.length]);else for(let t=0;t<u.length;++t){const n=Me(t,o,l),a=n.slice(-c);f.forEach((e=>a[e]=0));const i=_e(a,c,p),g=n.slice(-h);m.forEach((e=>g[e]=0));const y=_e(g,h,d);u[t]=e(r[i],s[y])}return[u,i]}}const BI=zI(((e,t)=>e<0?t*e:e));function PI(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t;$I([r,s],"prelu");const a=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,[o,l]=BI(r.shape,s.shape,a,i,r.dtype);return n.makeTensorInfo(l,r.dtype,o)}const WI={kernelName:zn,backendName:"cpu",kernelFunc:PI},VI=DI(Un,(e=>Math.max(0,e))),UI={kernelName:Un,backendName:"cpu",kernelFunc:VI},GI=DI(Xn,(e=>Math.min(Math.max(0,e),6))),HI={kernelName:Xn,backendName:"cpu",kernelFunc:GI};function jI(e,t,n,r){if("linear"===n)return MI({inputs:{x:t},backend:e});if("relu"===n)return VI({inputs:{x:t},backend:e});if("elu"===n)return OI({inputs:{x:t},backend:e});if("relu6"===n)return GI({inputs:{x:t},backend:e});if("prelu"===n)return PI({inputs:{x:t,alpha:r},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function qI(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,o=n.makeTensorInfo(r.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",a),imag:n.makeTensorInfo(s.shape,"float32",i)},o}const KI={kernelName:ft,backendName:"cpu",kernelFunc:qI};function XI(e){const{inputs:t,backend:n}=e,{input:r}=t,s=n.data.get(r.dataId).complexTensorInfos.real,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const YI={kernelName:Wn,backendName:"cpu",kernelFunc:XI};function JI(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dtype:a}=r;if("complex64"===a){if("complex64"===s.dtype)return MI({inputs:{x:s},backend:n});const e=ju(s.shape),t=JI({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),r=qI({inputs:{real:t,imag:e},backend:n});return e.dispose(),n.disposeIntermediateTensorInfo(t),r}if("complex64"===s.dtype){const e=XI({inputs:{input:s},backend:n}),t=JI({inputs:{x:e},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(e),t}if(!be(s.dtype,a)){const e=MI({inputs:{x:s},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:a}}if("int32"===a){const e=n.data.get(s.dataId).values,t=Int32Array.from(e);return n.makeTensorInfo(s.shape,"int32",t)}if("bool"===a){const e=n.data.get(s.dataId).values,t=Qr([0],s.dtype),[r,a]=zI(((e,t)=>e!==t?1:0))(s.shape,[],e,t,"bool");return n.makeTensorInfo(a,"bool",r)}throw new Error(`Error in Cast: failed to cast ${s.dtype} to ${a}`)}const ZI={kernelName:ht,backendName:"cpu",kernelFunc:JI};function QI(e,t,n,r){return null==n?({inputs:n,backend:s})=>{const{a,b:i}=n,o=s;$I([a,i],e);const l=o.data.get(a.dataId).values,u=o.data.get(i.dataId).values,c=r||a.dtype,[h,p]=t(a.shape,i.shape,l,u,c);return o.makeTensorInfo(p,c,h)}:({inputs:e,backend:s})=>{const{a,b:i}=e,o=s;if("complex64"===a.dtype||"complex64"===i.dtype){const e=JI({inputs:{x:a},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),r=t.complexTensorInfos.real,s=t.complexTensorInfos.imag,l=o.data.get(r.dataId).values,u=o.data.get(s.dataId).values,c=JI({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),h=o.data.get(c.dataId),p=h.complexTensorInfos.real,d=h.complexTensorInfos.imag,f=o.data.get(p.dataId).values,m=o.data.get(d.dataId).values,[g,y,b]=n(a.shape,i.shape,l,u,f,m),x=o.makeTensorInfo(b,"float32",g),w=o.makeTensorInfo(b,"float32",y),v=qI({inputs:{real:x,imag:w},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(c),o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(w),v}{const e=o.data.get(a.dataId).values,n=o.data.get(i.dataId).values,s=r||a.dtype,[l,u]=t(a.shape,i.shape,e,n,s);return o.makeTensorInfo(u,s,l)}}}function e$(e){return(t,n,r,s,a,i)=>{const o=Oo(t,n),l=ne(o),u=o.length,c=Te(o),h=fe("float32",l),p=fe("float32",l),d=Do(t,o),f=Do(n,o),m=ad(r,s),g=ad(a,i),y=t.length,b=Te(t),x=n.length,w=Te(n);if(d.length+f.length===0)for(let t=0;t<h.length;t++){const n=t%m.length,r=t%g.length,s=e(m[2*n],m[2*n+1],g[2*r],g[2*r+1]);h[t]=s.real,p[t]=s.imag}else for(let t=0;t<h.length;t++){const n=Me(t,u,c),r=n.slice(-y);d.forEach((e=>r[e]=0));const s=_e(r,y,b),a=n.slice(-x);f.forEach((e=>a[e]=0));const i=_e(a,x,w),o=e(m[2*s],m[2*s+1],g[2*i],g[2*i+1]);h[t]=o.real,p[t]=o.imag}return[h,p,o]}}const t$=zI(((e,t)=>e+t)),n$=e$(((e,t,n,r)=>({real:e+n,imag:t+r}))),r$=QI(qe,t$,n$),s$={kernelName:qe,backendName:"cpu",kernelFunc:r$};function a$(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{shape:a}=r,i=ne(s.shape),o=he(a,i),l=ne(o);Z(i===l,(()=>`The new shape (${o}) has ${l} elements and the old shape (${s.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(s.dataId);const u=n.data.get(s.dataId);if(null!=u.complexTensorInfos){const e=u.complexTensorInfos.real,t=u.complexTensorInfos.imag;e.shape=o,t.shape=o}return{dataId:s.dataId,shape:o,dtype:s.dtype}}const i$={kernelName:Gn,backendName:"cpu",kernelFunc:a$};function o$(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a}=t,{transposeA:i,transposeB:o}=r;$I([s,a],"matMul");const l=s.shape.length,u=a.shape.length,c=i?s.shape[l-2]:s.shape[l-1],h=o?a.shape[u-1]:a.shape[u-2],p=i?s.shape[l-1]:s.shape[l-2],d=o?a.shape[u-2]:a.shape[u-1],f=s.shape.slice(0,-2),m=a.shape.slice(0,-2),g=ne(f),y=ne(m);Z(l>=2&&u>=2&&(g===y||1===g||1===y),(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${f}) and (${m}).`));const b=(g>y?s.shape.slice(0,-2):a.shape.slice(0,-2)).concat([p,d]);Z(c===h,(()=>`Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${s.shape} and ${a.shape} and transposeA=${i} and transposeB=${o} must match.`));const x=o?[y,d,h]:[y,h,d],w=a$({inputs:{x:s},backend:n,attrs:{shape:i?[g,c,p]:[g,p,c]}}),v=a$({inputs:{x:a},backend:n,attrs:{shape:x}}),k=i?w.shape[1]:w.shape[2],N=i?w.shape[2]:w.shape[1],I=o?v.shape[1]:v.shape[2],$=Math.max(g,y),C=n.data.get(w.dataId).values,S=n.data.get(v.dataId).values,T=Te(w.shape),E=Te(v.shape),[A,R,D]=i?[T[0],1,T[1]]:[T[0],T[1],1],[F,O,_]=o?[1,E[1],E[0]]:[E[1],1,E[0]],M=N*I,L=Da([$,N,I],w.dtype),z=L.values,B=n.blockSize;for(let e=0;e<$;e++)for(let t=0;t<N;t+=B)for(let n=0;n<I;n+=B)for(let r=0;r<k;r+=B){const s=Math.min(t+B,N),a=Math.min(n+B,I),i=Math.min(r+B,k);for(let o=t;o<s;o++)for(let t=n;t<a;t++){let n=0;for(let s=r;s<i;s++){const r=Math.min(e,g-1)*A,a=Math.min(e,y-1)*_;n+=C[r+o*R+s*D]*S[s*F+t*O+a]}z[e*M+(o*I+t)]+=n}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(v),n.makeTensorInfo(b,L.dtype,L.values)}const l$={kernelName:lt,backendName:"cpu",kernelFunc:o$},u$={kernelName:Ar,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c}=r;let h,p,d;const f=[];h=o$({inputs:{a:s,b:a},attrs:{transposeA:l,transposeB:u},backend:n}),i&&(p=r$({inputs:{a:h,b:i},backend:n}),f.push(h),h=p),c&&(d=jI(n,h,c,o),f.push(h),h=d);for(const e of f)n.disposeIntermediateTensorInfo(e);return h}};function c$(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const h$={kernelName:Ge,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;let r=new Float32Array(ne(t.shape));if("complex64"!==t.dtype)r=c$(n.data.get(t.dataId).values);else{const e=n.data.get(t.dataId),s=e.complexTensorInfos.real,a=e.complexTensorInfos.imag,i=n.data.get(s.dataId).values,o=n.data.get(a.dataId).values;for(let e=0;e<i.length;e++){const t=i[e],n=o[e];r[e]=Math.hypot(t,n)}}return n.makeOutput(r,t.shape,"float32")}},p$=DI(He,(e=>Math.acos(e))),d$={kernelName:He,backendName:"cpu",kernelFunc:p$},f$=DI(je,(e=>Math.acosh(e))),m$={kernelName:je,backendName:"cpu",kernelFunc:f$},g$=DI(Qe,(e=>Math.asin(e))),y$={kernelName:Qe,backendName:"cpu",kernelFunc:g$},b$=DI(et,(e=>Math.asinh(e))),x$={kernelName:et,backendName:"cpu",kernelFunc:b$},w$=DI(tt,(e=>Math.atan(e))),v$={kernelName:tt,backendName:"cpu",kernelFunc:w$},k$=DI(nt,(e=>Math.atanh(e))),N$={kernelName:nt,backendName:"cpu",kernelFunc:k$};function I$(e,t,n,r,s,a){const i=s.strideHeight,o=s.strideWidth,l=s.dilationHeight,u=s.dilationWidth,c=s.effectiveFilterHeight,h=s.effectiveFilterWidth,p=s.padInfo.top,d=s.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=Da(s.outShape,n),g=m.values,y=s.outShape[1]*s.outShape[2]*s.outShape[3],b=s.outShape[2]*s.outShape[3],x=s.outShape[3];for(let t=0;t<s.batchSize;++t){const n=t*y,m=t*r[0];for(let t=0;t<s.inChannels;++t)for(let y=0;y<s.outHeight;++y){const w=y*i-p,v=Math.max(0,w),k=Math.min(s.inHeight,c+w),N=n+y*b;for(let n=0;n<s.outWidth;++n){const i=n*o-d,c=Math.max(0,i),p=Math.min(s.inWidth,h+i);let y=f,b=0,w=0;for(let n=v;n<k;n+=l){const s=m+n*r[1];for(let n=c;n<p;n+=u){const i=e[s+n*r[2]+t];"max"===a&&i>y?y=i:"avg"===a&&(b+=i,w++)}if(isNaN(y))break}g[N+n*x+t]="avg"===a?b/w:y}}}return m}function $$(e,t,n,r,s=!1,a=!1){const i=Da(r.outShape,"int32"),o=r.strideHeight,l=r.strideWidth,u=r.dilationHeight,c=r.dilationWidth,h=r.effectiveFilterHeight,p=r.effectiveFilterWidth,d=r.padInfo.top,f=r.padInfo.left,m=Da(t,n,e);for(let e=0;e<r.batchSize;++e)for(let t=0;t<r.inChannels;++t)for(let n=0;n<r.outHeight;++n){const g=n*o-d;let y=g;for(;y<0;)y+=u;const b=Math.min(r.inHeight,h+g);for(let o=0;o<r.outWidth;++o){const h=o*l-f;let d=h;for(;d<0;)d+=c;const x=Math.min(r.inWidth,p+h);let w=Number.NEGATIVE_INFINITY,v=-1;for(let n=y;n<b;n+=u){const i=n-g;for(let o=d;o<x;o+=c){const l=o-h,u=m.get(e,n,o,t);u>w&&(w=u,v=s?a?((e*r.inHeight+n)*r.inWidth+o)*r.inChannels+t:(n*r.inWidth+o)*r.inChannels+t:i*p+l)}}i.set(v,e,n,o,t)}}return i}const C$={kernelName:st,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;$I(s,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=r;Z(yl(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=ol(s.shape,a,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&se(u.inShape,u.outShape))c=MI({inputs:{x:s},backend:n});else{const e=n.data.get(s.dataId).values,t=Te(s.shape),r=I$(e,s.shape,s.dtype,t,u,"avg");c=n.makeTensorInfo(u.outShape,s.dtype,r.values)}return c}},S$={kernelName:at,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,i=a;$I([s,a],"avgPoolBackprop");const{filterSize:o,strides:l,pad:u}=r,c=ol(i.shape,o,l,1,u),h=c.strideHeight,p=c.strideWidth,d=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,w=y-1-c.padInfo.top,v=Da(i.shape,"float32"),k=1/(d*f),N=n.data.get(s.dataId).values,I=Da(s.shape,"float32",N);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let r=0;r<c.inWidth;++r){const s=n-w,a=r-x;let i=0;for(let n=0;n<y;n+=m){const r=(s+n)/h;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let n=0;n<b;n+=g){const s=(a+n)/p;s<0||s>=c.outWidth||Math.floor(s)!==s||(i+=I.get(e,r,s,t))}}v.set(i*k,e,n,r,t)}return n.makeTensorInfo(v.shape,v.dtype,v.values)}},T$={kernelName:jt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,scale:a,offset:i,mean:o,variance:l}=t;Z(o.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),Z(null==i||o.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),Z(null==a||o.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),$I([s,o,l,a,i],"batchNorm");let{varianceEpsilon:u}=r;null==u&&(u=.001);const c=n.data.get(s.dataId).values,h=n.data.get(o.dataId).values,p=n.data.get(l.dataId).values,d=a?n.data.get(a.dataId).values:new Float32Array([1]),f=i?n.data.get(i.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),g=f.length,y=d.length,b=p.length,x=h.length;let w=0,v=0,k=0,N=0;for(let e=0;e<c.length;++e)m[e]=f[w++]+(c[e]-h[v++])*d[k++]/Math.sqrt(p[N++]+u),w>=g&&(w=0),v>=x&&(v=0),k>=y&&(k=0),N>=b&&(N=0);return n.makeTensorInfo(s.shape,s.dtype,m)}};function E$(e){return(t,n,r)=>{const s=fe(n,t.length);for(let n=0;n<t.length;++n)s[n]=e(t[n],r);return s}}const A$=E$((e=>Math.ceil(e))),R$=FI(pt,A$),D$={kernelName:pt,backendName:"cpu",kernelFunc:R$},F$=DI(dt,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),O$={kernelName:dt,backendName:"cpu",kernelFunc:F$};function _$(e){const{inputs:t,backend:n}=e,{input:r}=t,s=n.data.get(r.dataId).complexTensorInfos.imag,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const M$={kernelName:Qt,backendName:"cpu",kernelFunc:_$};function L$(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r,a=pe(s,t[0].shape)[0];let i=kl(t.map((e=>e.shape)),a);if(0===ne(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>ne(e.shape)>0));if(1===o.length)return o[0];if(vl(o.map((e=>e.shape)),a),"complex64"===o[0].dtype){const e=o.map((e=>XI({inputs:{input:e},backend:n}))),t=o.map((e=>_$({inputs:{input:e},backend:n}))),r=L$({inputs:e,backend:n,attrs:{axis:a}}),s=L$({inputs:t,backend:n,attrs:{axis:a}}),i=qI({inputs:{real:r,imag:s},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),i}const l=o.map((e=>{const t=ne(e.shape.slice(a));return a$({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})}));i=kl(l.map((e=>e.shape)),1);const u=fe(o[0].dtype,ne(i));if(1===l[0].shape[0]){let e=0;l.forEach((t=>{const r=n.data.get(t.dataId).values,s=ne(t.shape);u.set(r,e),e+=s}))}else{let e=0;l.forEach((t=>{const r=n.data.get(t.dataId).values;let s=0;for(let n=0;n<t.shape[0];++n){const a=n*i[1]+e;for(let e=0;e<t.shape[1];++e)u[a+e]=r[s++]}e+=t.shape[1]}))}const c=kl(o.map((e=>e.shape)),a),h=n.makeTensorInfo(c,t[0].dtype,u);return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}const z$={kernelName:mt,backendName:"cpu",kernelFunc:L$};function B$(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=r;$I([s,a],"conv2d");const h=bl(l),p=ul(s.shape,a.shape,i,u,o,c,!1,h),d=p.filterHeight,f=p.filterWidth,m=p.dilationHeight,g=p.dilationWidth,y=p.padInfo.left,b=p.padInfo.top,x="channelsLast"===p.dataFormat,w=new ss(p.outShape,s.dtype),v=Te(s.shape),k=Te(a.shape),N=v[0],I=x?v[1]:v[2],$=x?v[2]:1,C=x?1:v[1],S=w.strides[0],T=x?w.strides[1]:w.strides[2],E=x?w.strides[2]:1,A=x?1:w.strides[1],R=n.data.get(s.dataId).values,D=n.data.get(a.dataId).values,F=w.values;for(let e=0;e<p.batchSize;++e){const t=e*N,n=e*S;for(let e=0;e<p.outHeight;++e){const r=n+e*T,s=e*p.strideHeight-b;for(let e=0;e<d;++e){const n=s+e*m;if(n<0||n>=p.inHeight)continue;const a=e*k[0],i=t+n*I;for(let e=0;e<p.outWidth;++e){const t=r+e*E,n=e*p.strideWidth-y;for(let e=0;e<f;++e){const r=n+e*g;if(r<0||r>=p.inWidth)continue;const s=i+r*$;let o=a+e*k[1];for(let e=0;e<p.inChannels;++e){const n=R[s+e*C];for(let e=0;e<p.outChannels;++e)F[t+e*A]+=n*D[o+e];o+=p.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,F)}const P$={kernelName:gt,backendName:"cpu",kernelFunc:B$},W$={kernelName:yt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=r;$I([s,a],"conv2dBackpropFilter");const h=bl(l),p=ul(s.shape,c,i,1,o,u,!1,h),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=p,y="channelsLast"===p.dataFormat,b=new ss(p.filterShape,"float32"),x=p.padInfo.left,w=p.padInfo.top,v=n.data.get(s.dataId).values,k=n.data.get(a.dataId).values,N=new ss(s.shape,s.dtype,v),I=new ss(a.shape,a.dtype,k);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((w-e)/d)),n=Math.min(p.outHeight,(p.inHeight+w-e)/d);for(let r=0;r<g;++r){const s=Math.max(0,Math.ceil((x-r)/f)),a=Math.min(p.outWidth,(p.inWidth+x-r)/f);for(let i=0;i<p.inChannels;++i)for(let o=0;o<p.outChannels;++o){let l=0;for(let u=0;u<p.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*d-w;for(let e=s;e<a;++e){const n=r+e*f-x;l+=y?N.get(u,t,n,i)*I.get(u,c,e,o):N.get(u,i,t,n)*I.get(u,o,c,e)}}b.set(l,e,r,i,o)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},V$={kernelName:bt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=r;$I([s,a],"conv2dBackpropInput");const h=Te(a.shape),p=Te(s.shape);let d=bl(u);const f=ul(i,a.shape,o,1,l,c,!1,d),m=new ss(f.inShape,"float32"),g=m.values,y=n.data.get(s.dataId).values,b=n.data.get(a.dataId).values,[x,w,v]=h,{batchSize:k,filterHeight:N,filterWidth:I,inChannels:$,inHeight:C,inWidth:S,outChannels:T,outHeight:E,outWidth:A,strideHeight:R,strideWidth:D}=f;d=f.dataFormat;const F=N-1-f.padInfo.top,O=I-1-f.padInfo.left,_="channelsLast"===d,M=m.strides[0],L=_?m.strides[1]:m.strides[2],z=_?m.strides[2]:1,B=_?1:m.strides[1],P=p[0],W=_?p[1]:p[2],V=_?p[2]:1,U=_?1:p[1];for(let e=0;e<k;++e)for(let t=0;t<$;++t)for(let n=0;n<C;++n){const r=n-F,s=Math.max(0,Math.ceil(r/R)),a=Math.min(E,(N+r)/R);for(let i=0;i<S;++i){const o=i-O,l=Math.max(0,Math.ceil(o/D)),u=Math.min(A,(I+o)/D);let c=0;for(let n=s;n<a;++n){const s=n*R-r;for(let r=l;r<u;++r){const a=P*e+W*n+V*r,i=x*(N-1-s)+w*(I-1-(r*D-o))+v*t;for(let e=0;e<T;++e)c+=y[a+U*e]*b[i+e]}}g[M*e+L*n+z*i+B*t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}},U$={kernelName:xt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dilations:l}=r;$I([s,a],"conv3d");const u=cl(s.shape,a.shape,i,l,o),{filterDepth:c,filterHeight:h,filterWidth:p,dilationDepth:d,dilationHeight:f,dilationWidth:m,padInfo:g}=u,y=g.front,b=g.left,x=g.top,w=new ss(u.outShape,s.dtype),v=n.data.get(s.dataId).values,k=n.data.get(a.dataId).values,N=w.values,I=Te(s.shape),$=Te(a.shape);for(let e=0;e<u.batchSize;++e){const t=e*I[0],n=e*w.strides[0];for(let e=0;e<u.outDepth;++e){const r=n+e*w.strides[1],s=e*u.strideDepth-y;for(let e=0;e<c;++e){const n=s+e*d;if(n<0||n>=u.inDepth)continue;const a=e*$[0],i=t+n*I[1];for(let e=0;e<u.outHeight;++e){const t=r+e*w.strides[2],n=e*u.strideHeight-x;for(let e=0;e<h;++e){const r=n+e*f;if(r<0||r>=u.inHeight)continue;const s=a+e*$[1],o=i+r*I[2];for(let e=0;e<u.outWidth;++e){const n=t+e*u.outChannels,r=e*u.strideWidth-b;for(let e=0;e<p;++e){const t=r+e*m;if(t<0||t>=u.inWidth)continue;const a=s+e*$[2],i=o+t*u.inChannels;let l=a;for(let e=0;e<u.inChannels;++e){const t=v[i+e];for(let e=0;e<u.outChannels;++e)N[n+e]+=t*k[l+e];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}},G$={kernelName:wt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,pad:o,filterShape:l}=r;$I([s,a],"conv3dBackpropFilterV2");const u=Te(s.shape),c=Te(a.shape),h=cl(s.shape,l,i,1,o),p=h.strideDepth,d=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,y=h.filterWidth,b=new ss(h.filterShape,"float32"),x=b.values,[w,v,k,N]=b.strides,I=n.data.get(a.dataId).values,[$,C,S,T]=c,E=n.data.get(s.dataId).values,[A,R,D,F]=u,O=h.padInfo.front,_=h.padInfo.left,M=h.padInfo.top;for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((O-e)/p)),n=Math.min(h.outDepth,(h.inDepth+O-e)/p),r=e*w;for(let s=0;s<g;++s){const a=Math.max(0,Math.ceil((M-s)/d)),i=Math.min(h.outHeight,(h.inHeight+M-s)/d),o=s*v+r;for(let r=0;r<y;++r){const l=Math.max(0,Math.ceil((_-r)/f)),u=Math.min(h.outWidth,(h.inWidth+_-r)/f),c=r*k+o;for(let o=0;o<h.inChannels;++o){const m=o*N+c;for(let c=0;c<h.outChannels;++c){let g=0;for(let m=0;m<h.batchSize;++m){const h=m*A,y=m*$;for(let m=t;m<n;++m){const t=(e+m*p-O)*R+h,n=m*C+y;for(let e=a;e<i;++e){const a=(s+e*d-M)*D+t,i=e*S+n;for(let e=l;e<u;++e){const t=e*T+i;g+=E[(r+e*f-_)*F+a+o]*I[t+c]}}}}x[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},H$={kernelName:vt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{pad:i,strides:o,inputShape:l}=r;$I([s],"conv3dBackpropInputV2");const u=Te(s.shape),c=Te(a.shape),h=cl(l,a.shape,o,1,i),p=new ss(h.inShape,"float32"),d=p.values,[f,m,g,y]=p.strides,b=n.data.get(s.dataId).values,[x,w,v,k]=u,N=n.data.get(a.dataId).values,[I,$,C,S]=c,{batchSize:T,filterDepth:E,filterHeight:A,filterWidth:R,inChannels:D,inDepth:F,inHeight:O,inWidth:_,outChannels:M,outDepth:L,outHeight:z,outWidth:B,strideDepth:P,strideHeight:W,strideWidth:V}=h,U=E-1-h.padInfo.front,G=A-1-h.padInfo.top,H=R-1-h.padInfo.left;for(let e=0;e<T;++e)for(let t=0;t<D;++t)for(let n=0;n<F;++n){const r=n-U,s=Math.max(0,Math.ceil(r/P)),a=Math.min(L,(E+r)/P);for(let i=0;i<O;++i){const o=i-G,l=Math.max(0,Math.ceil(o/W)),u=Math.min(z,(A+o)/W);for(let c=0;c<_;++c){const h=c-H,p=Math.max(0,Math.ceil(h/V)),T=Math.min(B,(R+h)/V);let D=0;for(let n=s;n<a;++n){const s=n*P-r;for(let r=l;r<u;++r){const a=r*W-o;for(let i=p;i<T;++i){const o=x*e+w*n+v*r+k*i,l=I*(E-1-s)+$*(A-1-a)+C*(R-1-(i*V-h))+S*t;for(let e=0;e<M;++e)D+=b[o+e]*N[l+e]}}}d[f*e+m*n+g*i+y*c+t]=D}}}return n.makeTensorInfo(p.shape,p.dtype,p.values)}},j$=DI(kt,(e=>Math.cos(e))),q$={kernelName:kt,backendName:"cpu",kernelFunc:j$},K$=DI(Nt,(e=>Math.cosh(e))),X$={kernelName:Nt,backendName:"cpu",kernelFunc:K$};function Y$(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=r;$I([s,a],"depthwiseConv2DNative");const c=Te(s.shape),h=Te(a.shape);let p=l;null==p&&(p=[1,1]),Z(yl(i,p),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${p}'`));const d=ul(s.shape,a.shape,i,p,o,u,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=d,x=b.left,w=b.top,v=d.outChannels/d.inChannels,k=new ss(d.outShape,s.dtype),N=n.data.get(s.dataId).values,I=n.data.get(a.dataId).values,$=k.values;for(let e=0;e<d.batchSize;++e){const t=e*c[0],n=e*k.strides[0];for(let e=0;e<d.outHeight;++e){const r=n+e*k.strides[1],s=e*d.strideHeight-x;for(let e=0;e<f;++e){const n=s+e*g;if(n<0||n>=d.inHeight)continue;const a=e*h[0],i=t+n*c[1];for(let e=0;e<d.outWidth;++e){const t=r+e*k.strides[2],n=e*d.strideWidth-w;for(let e=0;e<m;++e){const r=n+e*y;if(r<0||r>=d.inWidth)continue;const s=a+e*h[1],o=i+r*d.inChannels;let l=t,u=s;for(let e=0;e<d.inChannels;++e){const t=N[o+e];for(let e=0;e<v;++e)$[l+e]+=t*I[u+e];l+=v,u+=v}}}}}}return n.makeTensorInfo(k.shape,k.dtype,k.values)}const J$={kernelName:St,backendName:"cpu",kernelFunc:Y$},Z$={kernelName:Tt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=r;$I([s,a],"depthwiseConv2dNativeBackpropFilter");const h=ul(s.shape,c,i,o,l,u,!0),{strideHeight:p,strideWidth:d,filterHeight:f,filterWidth:m}=h,g=new ss(h.filterShape,"float32"),y=h.padInfo.left,b=h.padInfo.top,x=h.outChannels/h.inChannels,w=n.data.get(s.dataId).values,v=new ss(s.shape,s.dtype,w),k=n.data.get(a.dataId).values,N=new ss(a.shape,a.dtype,k);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((b-e)/p)),n=Math.min(h.outHeight,(h.inHeight+b-e)/p);for(let r=0;r<m;++r){const s=Math.max(0,Math.ceil((y-r)/d)),a=Math.min(h.outWidth,(h.inWidth+y-r)/d);for(let i=0;i<h.outChannels;++i){const o=Math.trunc(i/x),l=i%x;let u=0;for(let l=0;l<h.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*p-b;for(let e=s;e<a;++e){const n=r+e*d-y;u+=v.get(l,t,n,o)*N.get(l,c,e,i)}}g.set(u,e,r,o,l)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}},Q$={kernelName:Et,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=r;$I([s,a],"depthwiseConv2DNativeBackpropInput");const h=Te(s.shape),p=Te(a.shape),d=ul(c,a.shape,i,o,l,u,!0),f=new ss(d.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(s.dataId).values,[w,v,k]=h,N=n.data.get(a.dataId).values,[I,$,C]=p,{batchSize:S,filterHeight:T,filterWidth:E,inChannels:A,inHeight:R,inWidth:D,outChannels:F,outHeight:O,outWidth:_,strideHeight:M,strideWidth:L}=d,z=T-1-d.padInfo.top,B=E-1-d.padInfo.left,P=F/A;for(let e=0;e<S;++e)for(let t=0;t<A;++t)for(let n=0;n<R;++n){const r=n-z,s=Math.max(0,Math.ceil(r/M)),a=Math.min(O,(T+r)/M);for(let i=0;i<D;++i){const o=i-B,l=Math.max(0,Math.ceil(o/L)),u=Math.min(_,(E+o)/L);let c=0;for(let n=s;n<a;++n){const s=n*M-r;for(let r=l;r<u;++r){const a=w*e+v*n+k*r,i=I*(T-1-s)+$*(E-1-(r*L-o))+C*t;for(let e=0;e<P;++e)c+=x[a+(t*P+e)]*N[i+e]}}m[g*e+y*n+b*i+t]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}},eC={kernelName:Rt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:s}=e,{strides:a,pad:i,dilations:o}=n,l=t,u=l.data.get(r.dataId).values,c=r.shape.length,h=l.data.get(s.dataId).values,p=s.shape.length,{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:v,filterHeight:k,filterWidth:N,dilationHeight:I,dilationWidth:$,outShape:C}=il(r.shape,s.shape,a,i,"NHWC",o),S=ne(C),T=C.length,E=me(r.dtype,S);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*w-x.top;for(let a=0;a<b;++a){const i=a*v-x.left;for(let o=0;o<g;++o){let l=Number.MIN_SAFE_INTEGER;for(let t=0;t<k;++t){const a=n+t*I;if(a>=0&&a<f)for(let n=0;n<N;++n){const d=i+n*$;if(d>=0&&d<m){const i=_e([e,a,d,o],c,Te(r.shape)),f=_e([t,n,o],p,Te(s.shape)),m=u[i]+h[f];m>l&&(l=m)}}}E[_e([e,t,a,o],T,Te(C))]=l}}}return{dataId:l.write(Qr(E,r.dtype),C,r.dtype),shape:C,dtype:r.dtype}}},tC={kernelName:Ft,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:s,dy:a}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=Ae(r.shape,u.data.get(r.dataId).values),h=Ae(s.shape,u.data.get(s.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:v,filterWidth:k,dilationHeight:N,dilationWidth:I,outShape:$}=il(r.shape,s.shape,i,o,"NHWC",l);Z(a.rank===$.length,(()=>`Error in ${Ft}, dy must have the same rank as output ${$.length}, but got ${a.rank}`));const C=Ae($,u.data.get(a.dataId).values),S=Fe(s.shape,s.dtype);for(let e=0;e<p;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let r=0;r<y;++r){const s=r*w-b.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=0,l=0;for(let t=0;t<v;++t){const r=n+t*N;if(r>=0&&r<d)for(let n=0;n<k;++n){const u=s+n*I;if(u>=0&&u<f){const s=c[e][r][u][a]+h[t][n][a];s>i&&(i=s,o=t,l=n)}}}S[o][l][a]+=C[e][t][r][a]}}}return{dataId:u.write(Qr(S,r.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},nC={kernelName:Dt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:s,dy:a}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=Ae(r.shape,u.data.get(r.dataId).values),h=Ae(s.shape,u.data.get(s.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:v,filterWidth:k,dilationHeight:N,dilationWidth:I,outShape:$}=il(r.shape,s.shape,i,o,"NHWC",l);Z(a.rank===$.length,(()=>`Error in ${Dt}, dy must have the same rank as output ${$.length}, but got ${a.rank}`));const C=Ae($,u.data.get(a.dataId).values),S=Fe(r.shape,r.dtype);for(let e=0;e<p;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let r=0;r<y;++r){const s=r*w-b.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,l=s<0?0:s;for(let t=0;t<v;++t){const r=n+t*N;if(r>=0&&r<d)for(let n=0;n<k;++n){const u=s+n*I;if(u>=0&&u<f){const s=c[e][r][u][a]+h[t][n][a];s>i&&(i=s,o=r,l=u)}}}S[e][o][l][a]+=C[e][t][r][a]}}}return{dataId:u.write(Qr(S,r.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},rC=zI(((e,t)=>e/t)),sC=QI(Ot,rC),aC={kernelName:Ot,backendName:"cpu",kernelFunc:sC},iC=Jp,oC=Zp,lC=Qp,uC=ed,cC=td,hC=nd,pC=DI(Lt,(e=>{const t=Math.sign(e),n=Math.abs(e),r=1/(1+iC*n);return t*(1-((((hC*r+cC)*r+uC)*r+lC)*r+oC)*r*Math.exp(-n*n))})),dC={kernelName:Lt,backendName:"cpu",kernelFunc:pC},fC=E$((e=>Math.exp(e))),mC=FI(Bt,fC),gC={kernelName:Bt,backendName:"cpu",kernelFunc:mC},yC=E$((e=>Math.expm1(e))),bC=FI(Pt,yC),xC={kernelName:Pt,backendName:"cpu",kernelFunc:bC},wC=zI(((e,t)=>e*t)),vC=e$(((e,t,n,r)=>({real:e*n-t*r,imag:e*r+t*n}))),kC=QI(Sn,wC,vC),NC={kernelName:Sn,backendName:"cpu",kernelFunc:kC};function IC(e,t,n,r,s){const a=Ii(r,t,n),i=ne(n),o=Te(r);if(a){const n=$i(t,o);return e.subarray(n,n+i)}const l=fe(s,i);for(let s=0;s<i;++s){const a=_e(Me(s,n.length,Te(n)).map(((e,n)=>e+t[n])),r.length,o);l[s]=e[a]}return l}function $C(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,size:i}=r;$I(s,"slice");const[o,l]=Ci(s,a,i);pi(s,o,l);const u=IC(n.data.get(s.dataId).values,o,l,s.shape,s.dtype);return n.makeTensorInfo(l,s.dtype,u)}const CC={kernelName:nr,backendName:"cpu",kernelFunc:$C},SC=zI(((e,t)=>e-t)),TC=e$(((e,t,n,r)=>({real:e-n,imag:t-r}))),EC=QI(mr,SC,TC),AC={kernelName:mr,backendName:"cpu",kernelFunc:EC};function RC(e,t,n){const r=e.shape,s=r[0],a=r[1],i=n.data.get(e.dataId),o=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,u=[s,a],c=ne(u),h=fe("float32",c),p=fe("float32",c);for(let e=0;e<s;e++){const r=$C({inputs:{x:o},backend:n,attrs:{begin:[e,0],size:[1,a]}}),s=$C({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,a]}}),i=qI({inputs:{real:r,imag:s},backend:n}),{real:u,imag:c}=DC(i,t,n),d=ad(u,c);for(let t=0;t<a;t++){const n=ud(d,t);h[e*a+t]=n.real,p[e*a+t]=n.imag}n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(i)}const d=n.makeTensorInfo(u,"float32",h),f=n.makeTensorInfo(u,"float32",p),m=qI({inputs:{real:d,imag:f},backend:n});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}function DC(e,t,n){const r=ne(e.shape),s=n.data.get(e.dataId),a=n.data.get(s.complexTensorInfos.real.dataId).values,i=n.data.get(s.complexTensorInfos.imag.dataId).values;if(0==((o=r)&o-1)){const s=FC(a,i,r,t,n),o=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(o,"float32",s.real),t=n.makeTensorInfo(o,"float32",s.imag),a=n.makeTensorInfo([],"float32",Zr(r,"float32")),i=MI({inputs:{x:a},backend:n}),l=aC.kernelFunc({inputs:{a:e,b:a},backend:n}),u=aC.kernelFunc({inputs:{a:t,b:i},backend:n}),c=n.data.get(l.dataId).values,h=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:c,imag:h}}return s}return id(function(e,t,n){const r=new Float32Array(2*t);for(let s=0;s<t;s++){let a=0,i=0;for(let r=0;r<t;r++){const o=pd(s*r,t,n),l=ud(e,r);a+=l.real*o.real-l.imag*o.imag,i+=l.real*o.imag+l.imag*o.real}n&&(a/=t,i/=t),cd(r,a,i,s)}return r}(ad(a,i),r,t));var o}function FC(e,t,n,r,s){if(1===n)return{real:e,imag:t};const a=ad(e,t),i=n/2,o=od(a),l=o.real,u=o.imag,c=[l.length],h=s.makeTensorInfo(c,"float32",l),p=s.makeTensorInfo(c,"float32",u),d=qI({inputs:{real:h,imag:p},backend:s}),f=ld(a),m=f.real,g=f.imag,y=[m.length],b=s.makeTensorInfo(y,"float32",m),x=s.makeTensorInfo(y,"float32",g),w=qI({inputs:{real:b,imag:x},backend:s}),v=FC(l,u,i,r,s),k=v.real,N=v.imag,I=[k.length],$=s.makeTensorInfo(I,"float32",k),C=s.makeTensorInfo(I,"float32",N),S=qI({inputs:{real:$,imag:C},backend:s}),T=FC(m,g,i,r,s),E=T.real,A=T.imag,R=[E.length],D=s.makeTensorInfo(R,"float32",E),F=s.makeTensorInfo(R,"float32",A),O=qI({inputs:{real:D,imag:F},backend:s}),_=hd(n,r),M=[_.real.length],L=s.makeTensorInfo(M,"float32",_.real),z=s.makeTensorInfo(M,"float32",_.imag),B=qI({inputs:{real:L,imag:z},backend:s}),P=kC({inputs:{a:B,b:O},backend:s}),W=r$({inputs:{a:S,b:P},backend:s}),V=EC({inputs:{a:S,b:P},backend:s}),U=XI({inputs:{input:W},backend:s}),G=XI({inputs:{input:V},backend:s}),H=_$({inputs:{input:W},backend:s}),j=_$({inputs:{input:V},backend:s}),q=L$({inputs:[U,G],backend:s,attrs:{axis:0}}),K=L$({inputs:[H,j],backend:s,attrs:{axis:0}}),X=s.data.get(q.dataId).values,Y=s.data.get(K.dataId).values;return s.disposeIntermediateTensorInfo(h),s.disposeIntermediateTensorInfo(p),s.disposeIntermediateTensorInfo(d),s.disposeIntermediateTensorInfo(b),s.disposeIntermediateTensorInfo(x),s.disposeIntermediateTensorInfo(w),s.disposeIntermediateTensorInfo($),s.disposeIntermediateTensorInfo(C),s.disposeIntermediateTensorInfo(S),s.disposeIntermediateTensorInfo(D),s.disposeIntermediateTensorInfo(F),s.disposeIntermediateTensorInfo(O),s.disposeIntermediateTensorInfo(L),s.disposeIntermediateTensorInfo(z),s.disposeIntermediateTensorInfo(B),s.disposeIntermediateTensorInfo(P),s.disposeIntermediateTensorInfo(W),s.disposeIntermediateTensorInfo(V),s.disposeIntermediateTensorInfo(U),s.disposeIntermediateTensorInfo(H),s.disposeIntermediateTensorInfo(G),s.disposeIntermediateTensorInfo(j),s.disposeIntermediateTensorInfo(q),s.disposeIntermediateTensorInfo(K),{real:X,imag:Y}}const OC={kernelName:Wt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t,s=ne(r.shape),a=r.shape[r.shape.length-1],i=a$({inputs:{x:r},backend:n,attrs:{shape:[s/a,a]}}),o=RC(i,!1,n),l=a$({inputs:{x:o},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}},_C={kernelName:Vt,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{shape:r,value:s,dtype:a}=n,i=a||$e(s),o=me(i,ne(r));return function(e,t,n){e.fill(t)}(o,s),t.makeTensorInfo(r,i,o)}},MC={kernelName:Ut,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,s=n,a=fe(r.dtype,ne(r.shape)),[i,o,l,u]=r.shape,c=s.data.get(r.dataId).values;for(let e=0;e<i;e++){const t=e*l*o*u;for(let e=0;e<o;e++){const n=e*(l*u);for(let r=0;r<l;r++){const s=r*u;for(let o=0;o<u;o++){const h=[i,e,r,o][2],p=Math.round(l-h),d=t+n+s+o;let f=c[d];p>=0&&p<l&&(f=c[t+n+p*u+o]),a[d]=f}}}}return{dataId:s.write(a,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},LC=E$((e=>Math.floor(e))),zC=FI(Gt,LC),BC={kernelName:Gt,backendName:"cpu",kernelFunc:zC},PC={kernelName:Rr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d}=r;let f=B$({inputs:{x:s,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=f;f=r$({inputs:{a:f,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=f;f=jI(n,f,d,o),n.disposeIntermediateTensorInfo(e)}return f}},WC={kernelName:Dr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d}=r;let f=Y$({inputs:{x:s,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=f;f=r$({inputs:{a:f,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=f;f=jI(n,f,d,o),n.disposeIntermediateTensorInfo(e)}return f}},VC={kernelName:Zt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t,s=ne(r.shape),a=r.shape[r.shape.length-1],i=a$({inputs:{x:r},backend:n,attrs:{shape:[s/a,a]}}),o=RC(i,!0,n),l=a$({inputs:{x:o},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}},UC=DI(en,(e=>Number.isFinite(e)?1:0),"bool"),GC={kernelName:en,backendName:"cpu",kernelFunc:UC},HC=DI(tn,(e=>Math.abs(e)===1/0?1:0),"bool"),jC={kernelName:tn,backendName:"cpu",kernelFunc:HC},qC=DI(nn,(e=>Number.isNaN(e)?1:0),"bool"),KC={kernelName:nn,backendName:"cpu",kernelFunc:qC},XC=E$((e=>Math.log(e))),YC=FI(on,XC),JC={kernelName:on,backendName:"cpu",kernelFunc:YC},ZC=DI(ln,(e=>Math.log1p(e))),QC={kernelName:ln,backendName:"cpu",kernelFunc:ZC},eS=DI(cn,(e=>e?0:1),"bool"),tS={kernelName:cn,backendName:"cpu",kernelFunc:eS};function nS(e,t,n,r){const s=fe(r,ne(n));for(let n=0;n<s.length;++n){const r=n*t;let a=e[r];for(let n=0;n<t;++n){const t=e[r+n];t>a&&(a=t)}s[n]=a}return s}function rS(e,t,n,r,s){const a=t.length,i=ne(t),o=Te(t),l=Te(s),u=fe(n,ne(s));for(let t=0;t<i;++t){const n=Me(t,a,o),s=new Array(n.length);for(let e=0;e<s.length;e++)s[e]=n[r[e]];u[_e(s,a,l)]=e[t]}return u}const sS={kernelName:mn,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{reductionIndices:s,keepDims:a}=t,i=n;let o=r.shape;const l=o.length,u=pe(s,o);let c=u;const h=Ko(c,l);let p=i.data.get(r.dataId).values;if(null!=h){const e=new Array(l);for(let t=0;t<e.length;t++)e[t]=o[h[t]];p=rS(p,o,r.dtype,h,e),c=Yo(c.length,l),o=e}$I(r,"max"),qo("max",c,l);const[d,f]=Ho(o,c),m=nS(p,ne(f),d,r.dtype),g=i.write(m,d,r.dtype);let y=d;return a&&(y=jo(d,u)),{dataId:g,shape:y,dtype:r.dtype}}},aS={kernelName:yn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;$I(s,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=r;Z(yl(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=ol(s.shape,a,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&se(u.inShape,u.outShape))c=MI({inputs:{x:s},backend:n});else{const e=n.data.get(s.dataId).values,t=Te(s.shape),r=I$(e,s.shape,s.dtype,t,u,"max");c=n.makeTensorInfo(u.outShape,s.dtype,r.values)}return c}},iS={kernelName:bn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a,output:i}=t,o=a;$I([a,i],"maxPoolBackprop");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=r,p=ol(o.shape,l,u,1,c,h),d=n.data.get(o.dataId).values,f=Da(p.outShape,o.dtype,$$(d,o.shape,o.dtype,p).values),m=p.strideHeight,g=p.strideWidth,y=p.dilationHeight,b=p.dilationWidth,x=p.effectiveFilterHeight,w=p.effectiveFilterWidth,v=w-1-p.padInfo.left,k=x-1-p.padInfo.top,N=Da(o.shape,"float32"),I=n.data.get(s.dataId).values,$=Da(s.shape,"float32",I);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let n=0;n<p.inHeight;++n)for(let r=0;r<p.inWidth;++r){const s=n-k,a=r-v;let i=0;for(let n=0;n<x;n+=y){const r=(s+n)/m;if(!(r<0||r>=p.outHeight||Math.floor(r)!==r))for(let s=0;s<w;s+=b){const o=(a+s)/g;if(o<0||o>=p.outWidth||Math.floor(o)!==o)continue;const l=x*w-1-f.get(e,r,o,t)===n*w+s?1:0;0!==l&&(i+=$.get(e,r,o,t)*l)}}N.set(i,e,n,r,t)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}},oS={kernelName:vn,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:s,strides:a,pad:i,includeBatchInIndex:o}=t,l=n;$I(r,"MaxPoolWithArgmax");const u=l.data.get(r.dataId).values,c=ol(r.shape,s,a,[1,1],i),[h,p]=function(e,t,n,r,s){const a=I$(e,0,n,Te(t),s,"max"),i=$$(e,t,n,s,!0,r);return[a.values,i.values]}(u,r.shape,r.dtype,o,c),d=l.write(h,c.outShape,r.dtype),f=l.write(p,c.outShape,r.dtype);return[{dataId:d,shape:c.outShape,dtype:r.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}},lS={kernelName:$n,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,mode:i}=r;$I(s,"mirrorPad");const o=a.map(((e,t)=>e[0]+s.shape[t]+e[1])),l=a.map((e=>e[0])),u=a.map(((e,t)=>e[0]+s.shape[t])),c="reflect"===i?0:1,h=n.data.get(s.dataId).values,p=s.shape.length,d=Te(s.shape),f=ne(o),m=o.length,g=Te(o),y=fe(s.dtype,f);for(let e=0;e<f;e++){let t=Me(e,m,g);for(let e=0;e<m;e++)t[e]<l[e]?t[e]=2*l[e]-t[e]-c:t[e]>=u[e]&&(t[e]=2*(u[e]-1)-t[e]+c);t=t.map(((e,t)=>e-l[t]));const n=_e(t,p,d);y[e]=h[n]}return{dataId:n.write(y,o,s.dtype),shape:o,dtype:s.dtype}}},uS=cp,cS={kernelName:Rn,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{boxes:r,scores:s}=e,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,padToMaxOutputSize:l}=n,u=t;$I(r,"NonMaxSuppressionPadded");const c=u.data.get(r.dataId).values,h=u.data.get(s.dataId).values,{selectedIndices:p,validOutputs:d}=uS(c,h,a,i,o,l);return[p,d]}},hS=hp,pS={kernelName:Dn,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{boxes:r,scores:s}=e,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}=n,u=t;$I(r,"NonMaxSuppressionWithScore");const c=u.data.get(r.dataId).values,h=u.data.get(s.dataId).values,p=a,d=i,f=o,m=l,{selectedIndices:g,selectedScores:y}=hS(c,h,p,d,f,m);return[g,y]}},dS=zI(((e,t)=>e!==t?1:0)),fS=QI(En,dS,null,"bool"),mS={kernelName:En,backendName:"cpu",kernelFunc:fS},gS={kernelName:_n,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,constantValue:i}=r;$I(s,"pad");const o=a.map(((e,t)=>e[0]+s.shape[t]+e[1])),l=a.map((e=>e[0])),u=n.data.get(s.dataId).values,c=ne(s.shape),h=s.shape.length,p=Te(s.shape),d=ne(o),f=o.length,m=Te(o),g=fe(s.dtype,d);0!==i&&g.fill(i);for(let e=0;e<c;e++)g[_e(Me(e,h,p).map(((e,t)=>e+l[t])),f,m)]=u[e];return{dataId:n.write(g,o,s.dtype),shape:o,dtype:s.dtype}}},yS=DI(Vn,(e=>1/e)),bS={kernelName:Vn,backendName:"cpu",kernelFunc:yS},xS={kernelName:Er,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:s,fillValue:a,center:i}=t,o=n,l=fe(r.dtype,ne(r.shape)),[u,c,h,p]=r.shape,[d,f]=Up(i,c,h),m=Math.sin(s),g=Math.cos(s),y=o.data.get(r.dataId).values;for(let e=0;e<u;e++){const t=e*h*c*p;for(let e=0;e<c;e++){const n=e*(h*p);for(let r=0;r<h;r++){const s=r*p;for(let i=0;i<p;i++){const o=[u,e,r,i],b=o[2],x=o[1];let w=(b-d)*g-(x-f)*m,v=(b-d)*m+(x-f)*g;w=Math.round(w+d),v=Math.round(v+f);let k=a;"number"!=typeof a&&(k=3===i?255:a[i]),w>=0&&w<h&&v>=0&&v<c&&(k=y[t+v*(h*p)+w*p+i]),l[t+n+s+i]=k}}}}return{dataId:o.write(l,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},wS=DI(Jn,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),vS={kernelName:Jn,backendName:"cpu",kernelFunc:wS},kS=E$((e=>1/Math.sqrt(e))),NS=FI(Zn,kS),IS={kernelName:Zn,backendName:"cpu",kernelFunc:NS},$S=Xp,CS=Yp,SS=DI(tr,(e=>e>=0?CS*e:$S*(Math.exp(e)-1))),TS={kernelName:tr,backendName:"cpu",kernelFunc:SS},ES=DI(ir,(e=>1/(1+Math.exp(-e)))),AS={kernelName:ir,backendName:"cpu",kernelFunc:ES},RS=DI(ar,(e=>e<0?-1:e>0?1:0)),DS={kernelName:ar,backendName:"cpu",kernelFunc:RS},FS=DI(rr,(e=>Math.sin(e))),OS={kernelName:rr,backendName:"cpu",kernelFunc:FS},_S=DI(sr,(e=>Math.sinh(e))),MS={kernelName:sr,backendName:"cpu",kernelFunc:_S},LS=Math.log(1.1920928955078125e-7)+2,zS=DI(or,(e=>{const t=e>-LS,n=e<LS,r=Math.exp(e);let s;return s=n?r:t?e:Math.log(1+r),s})),BS={kernelName:or,backendName:"cpu",kernelFunc:zS};function PS(e){const{inputs:t,attrs:n,backend:r}=e,{x:s}=t,{perm:a}=n;$I(s,"transpose");const i=s.shape.length,o=new Array(i);for(let e=0;e<o.length;e++)o[e]=s.shape[a[e]];const l=rS(r.data.get(s.dataId).values,s.shape,s.dtype,a,o);return{dataId:r.write(l,o,s.dtype),shape:o,dtype:s.dtype}}const WS={kernelName:kr,backendName:"cpu",kernelFunc:PS},VS={kernelName:cr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,paddings:i}=r;$I([s],"spaceToBatchND");const o=ne(a),l=[[0,0]];l.push(...i);for(let e=1+a.length;e<s.shape.length;++e)l.push([0,0]);const u=gS.kernelFunc({inputs:{x:s},backend:n,attrs:{paddings:l,constantValue:0}}),c=Gp(u.shape,a,o,!1),h=Hp(c.length,a.length,!1),p=jp(u.shape,a,o,!1),d=a$({inputs:{x:u},backend:n,attrs:{shape:c}}),f=PS({inputs:{x:d},backend:n,attrs:{perm:h}}),m=a$({inputs:{x:f},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}},US=DI(lr,(e=>Math.sqrt(e))),GS={kernelName:lr,backendName:"cpu",kernelFunc:US},HS={kernelName:fr,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,r=t;$I(n,"square");const s=r.data.get(n.dataId).values,a=new Float32Array(s.length);for(let e=0;e<s.length;++e){const t=s[e];a[e]=t*t}return{dataId:r.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},jS=zI(((e,t)=>{const n=e-t;return n*n})),qS=QI(dr,jS),KS={kernelName:dr,backendName:"cpu",kernelFunc:qS},XS=DI(Sr,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),YS={kernelName:Sr,backendName:"cpu",kernelFunc:XS},JS=DI(br,(e=>Math.tan(e))),ZS={kernelName:br,backendName:"cpu",kernelFunc:JS},QS=DI(xr,(e=>Math.tanh(e)));function eT(e,t,n,r){const s=pe(t,n)[0],a=[1,n[0],1];for(let e=0;e<s;e++)a[0]*=n[e];a[1]=n[s];for(let e=s+1;e<n.length;e++)a[2]*=n[e];const i={},o=new Int32Array(n[s]),l=new ss(a,r,e),u=[],c=1===a[0]&&1===a[2];for(let t=0;t<n[s];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<a[0];n++)for(let r=0;r<a[2];r++)e.push(l.get(n,t,r));n=e.join(",")}if(void 0!==i[n])o[t]=i[n];else{const e=Object.keys(i).length;i[n]=e,o[t]=e,u.push(t)}}const h=a.slice();h[1]=Object.keys(i).length;const p=new ss(h,r);u.forEach(((e,t)=>{for(let n=0;n<a[0];n++)for(let r=0;r<a[2];r++)p.set(l.get(n,e,r),n,t,r)}));const d=n.slice();return d[s]=h[1],{outputValues:p.values,outputShape:d,indices:o}}const tT=[u$,h$,d$,m$,s$,y$,x$,v$,N$,C$,S$,l$,T$,ZI,D$,O$,KI,z$,W$,V$,P$,G$,H$,U$,q$,X$,J$,Z$,Q$,eC,nC,tC,aC,_I,dC,gC,xC,OC,_C,MC,BC,PC,WC,LI,VC,M$,GC,jC,KC,JC,QC,tS,aS,iS,oS,sS,lS,NC,cS,pS,mS,gS,WI,YI,bS,UI,HI,i$,xS,vS,IS,TS,AS,DS,OS,MS,CC,BS,VS,GS,HS,KS,YS,AC,ZS,{kernelName:xr,backendName:"cpu",kernelFunc:QS},WS,{kernelName:Nr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:a}=t;$I(a,"unique");const i=r.data.get(a.dataId).values,{outputValues:o,outputShape:l,indices:u}=eT(i,s,a.shape,a.dtype);return[r.makeTensorInfo(l,a.dtype,o),r.makeTensorInfo([u.length],"int32",u)]}}];for(const e of tT)zr(e);const nT={},rT={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function sT(e){if(!(e in nT)){const t=function(e){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const t=function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e);return t.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete nT[e]}),!1),1===e?t.getContext("webgl",rT)||t.getContext("experimental-webgl",rT):t.getContext("webgl2",rT)}(e);if(null===t)return console.log("Could not get context for WebGL version",e),null;nT[e]=t}const t=nT[e];return t.isContextLost()?(delete nT[e],sT(e)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),nT[e])}var aT,iT,oT;function lT(e,t){return[t,e]}function uT(e){const t=ne(e);return oe(Math.ceil(t/4))}function cT(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function hT(e,t){const n=e;let r,s,a,i,o,l,u,c,h,p;return 2===Be().getNumber("WEBGL_VERSION")?(r=n.R32F,s=n.R16F,a=n.RGBA16F,i=n.RGBA32F,o=n.RED,u=4,c=1,h=n.HALF_FLOAT,p=n.FLOAT):(r=e.RGBA,s=e.RGBA,a=e.RGBA,i=n.RGBA,o=e.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,p=e.FLOAT),l=e.RGBA,{internalFormatFloat:r,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:p}}function pT(e,t){const n=t();return Be().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}function dT(e){return!!(Be().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function fT(e,t){return kT(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(aT||(aT={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(iT||(iT={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(oT||(oT={}));const mT=/ERROR: [0-9]+:([0-9]+):/g;function gT(e,t){if(pT(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function yT(e,t,n,r,s,a,i){const o=e.getAttribLocation(t,n);return-1!==o&&(pT(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,r))),pT(e,(()=>e.vertexAttribPointer(o,s,e.FLOAT,!1,a,i))),pT(e,(()=>e.enableVertexAttribArray(o))),!0)}function bT(e,t,n,r){pT(e,(()=>function(e,t,n){(function(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=t+e.TEXTURE0;if(r<e.TEXTURE0||r>n)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${n}].`)})(e,n),pT(e,(()=>e.activeTexture(e.TEXTURE0+n))),pT(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,r))),pT(e,(()=>e.uniform1i(n,r)))}function xT(e,t,n){pT(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),pT(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function wT(e,t){pT(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),pT(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function vT(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function kT(e,t,n){const r=pT(e,(()=>t()));if(null==r)throw new Error(n);return r}function NT(e,t=2){return ne(e.slice(0,e.length-t))}function IT(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function $T(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[NT(e),...IT(e)]),t}function CT(e){return e%2==0}function ST(e,t){if(se(e=e.slice(-2),t=t.slice(-2)))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],r=t.slice(-1)[0];if(n===r)return!0;if(CT(n)&&CT(r)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&CT(e[0])&&CT(t[0])}let TT,ET;function AT(e,t){return null!=e.getExtension(t)}function RT(e){try{if(null!=sT(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function DT(e){const t=hT(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const s=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(r),s}function FT(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&Z("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}const OT=Be();OT.registerFlag("HAS_WEBGL",(()=>OT.getNumber("WEBGL_VERSION")>0)),OT.registerFlag("WEBGL_VERSION",(()=>RT(2)?2:RT(1)?1:0)),OT.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),OT.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===OT.get("WEBGL_VERSION"))),OT.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),OT.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),OT.registerFlag("WEBGL_PACK",(()=>OT.getBool("HAS_WEBGL"))),OT.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>OT.getBool("WEBGL_PACK"))),OT.registerFlag("WEBGL_PACK_CLIP",(()=>OT.getBool("WEBGL_PACK"))),OT.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>!1)),OT.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>OT.getBool("WEBGL_PACK"))),OT.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>OT.getBool("WEBGL_PACK"))),OT.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>OT.getBool("WEBGL_PACK"))),OT.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>OT.getBool("WEBGL_PACK"))),OT.registerFlag("WEBGL_PACK_REDUCE",(()=>OT.getBool("WEBGL_PACK"))),OT.registerFlag("WEBGL_LAZILY_UNPACK",(()=>OT.getBool("WEBGL_PACK"))),OT.registerFlag("WEBGL_CONV_IM2COL",(()=>OT.getBool("WEBGL_PACK"))),OT.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==TT){const t=sT(e);TT=t.getParameter(t.MAX_TEXTURE_SIZE)}return TT}(OT.getNumber("WEBGL_VERSION")))),OT.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==ET){const t=sT(e);ET=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,ET)}(OT.getNumber("WEBGL_VERSION")))),OT.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=OT.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=sT(e);return t=AT(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:AT(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),OT.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>OT.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Ts())),OT.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=sT(e);if(1===e){if(!AT(t,"OES_texture_float"))return!1}else if(!AT(t,"EXT_color_buffer_float"))return!1;return DT(t)}(OT.getNumber("WEBGL_VERSION")))),OT.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!OT.getBool("WEBGL_FORCE_F16_TEXTURES")&&OT.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),OT.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>function(e){if(0===e)return!1;const t=sT(e);if(1!==e){if(AT(t,"EXT_color_buffer_float"))return DT(t);const e="EXT_color_buffer_half_float";if(AT(t,e)){const n=t.getExtension(e);return function(e,t){const n=hT(e,t),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r),e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(s),a}(t,n)}return!1}return!!AT(t,"OES_texture_float")&&!!AT(t,"WEBGL_color_buffer_float")&&DT(t)}(OT.getNumber("WEBGL_VERSION")))),OT.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=OT.getNumber("WEBGL_VERSION"))&&null!=sT(e).fenceSync;var e})),OT.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>OT.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),OT.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)}));const{simpleAbsImpl:_T,addImpl:MT,ceilImpl:LT,expImpl:zT,expm1Impl:BT,floorImpl:PT,logImpl:WT,maxImpl:VT,multiplyImpl:UT,rsqrtImpl:GT,sliceImpl:HT,subImpl:jT,transposeImpl:qT,uniqueImpl:KT}=V;class XT{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class YT{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}class JT{constructor(e,t,n){this.variableNames=["A"];const{windowSize:r,batchSize:s,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[s,a];const i="max"===t?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}function ZT(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function QT(e,t){return 1===t?[e]:ZT(e,t)}function eE(){let e,t,n,r,s,a,i,o,l,u;return 2===Be().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",r="in",s="texture",a="outputColor",i="out vec4 outputColor;",o="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",r="varying",s="texture2D",a="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:r,texture2D:s,output:a,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:l,defineRound:u}}function tE(e,t,n="index"){const r=Te(t);return r.map(((t,s)=>`int ${e[s]} = ${n} / ${t}; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * ${t}`:`index -= ${e[s]} * ${t}`};`)).join("")}function nE(e){const t=Te(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}const rE="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:sE}=g;function aE(e,t,n,r){const s=[];e.forEach((e=>{const t=ne(e.shapeInfo.logicalShape);e.shapeInfo.isUniform?s.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(s.push(`uniform sampler2D ${e.name};`),s.push(`uniform int offset${e.name};`))}));const a=s.join("\n"),i=e.map((e=>function(e,t,n=!1){let r="";r+=n?oE(e):iE(e);const s=e.shapeInfo.logicalShape,a=t.logicalShape;return s.length<=a.length&&(r+=n?function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=e.shapeInfo.logicalShape.length,i=t.logicalShape.length,o=sE(e.shapeInfo.logicalShape,t.logicalShape),l=fE(i),u=i-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":i<2&&o.length>=1?"coords = 0;":o.map((e=>`coords.${h[e+u]} = 0;`)).join("\n");let p="";p=i<2&&a>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${h[t+u]}`)).join(", ");let d="return outputValue;";const f=1===ne(e.shapeInfo.logicalShape),m=1===ne(t.logicalShape);if(1!==a||f||m){if(f&&!m)d=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const e=a-2,t=a-1;o.indexOf(e)>-1&&o.indexOf(t)>-1?d="return vec4(outputValue.x);":o.indexOf(e)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(t)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${s}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${r}(${p});\n      ${d}\n    }\n  `}(e,t):function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=t.texShape,i=e.shapeInfo.texShape,o=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&o===l&&null==e.shapeInfo.flatOffset&&se(i,a))return`\n      float ${s}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=fE(l),c=sE(e.shapeInfo.logicalShape,t.logicalShape),h=l-o;let p;const d=["x","y","z","w","u","v"];p=0===o?"":l<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${d[e+h]} = 0;`)).join("\n");let f="";return f=l<2&&o>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${d[t+h]}`)).join(", "),`\n    float ${s}() {\n      ${u} coords = getOutputCoords();\n      ${p}\n      return get${r}(${f});\n    }\n  `}(e,t)),r}(e,t,r))).join("\n"),o=t.texShape,l=eE(),u=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(l);let c,h,p=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${lE}\n    ${uE}\n    ${cE}\n  `}(l);return t.isPacked?(c=function(e,t){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===n[0]?`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `:1===n[1]?`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `:`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,t);case 2:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(se(e,t))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const r=Math.ceil(e[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[2]/2),s=r*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t);default:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[e.length-1]/2),s=r*Math.ceil(e[e.length-2]/2);let a=s,i="",o="b, r, c";for(let t=2;t<e.length-1;t++)a*=e[e.length-t-1],i=`\n      int b${t} = index / ${a};\n      index -= b${t} * ${a};\n    `+i,o=`b${t}, `+o;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${e.length}(${o});\n    }\n  `}(e,t)}}(t.logicalShape,o),h=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(l)):(c=function(e,t){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return 1===(n=t)[0]?`\n      int getOutputCoords() {\n        return int(resultUV.x * ${n[1]}.0);\n      }\n    `:1===n[1]?`\n      int getOutputCoords() {\n        return int(resultUV.y * ${n[0]}.0);\n      }\n    `:`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return resTexRC.x * ${n[1]} + resTexRC.y;\n    }\n  `;case 2:return function(e,t){return se(e,t)?`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===e[1]?`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===e[0]?`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=tE(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(e,t);case 4:return function(e,t){const n=tE(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t);case 5:return function(e,t){const n=tE(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=tE(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}var n}(t.logicalShape,o),h=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(l)),r&&(p+=hE),[p,u,h,a,c,i,n].join("\n")}function iE(e){const t=e.shapeInfo.logicalShape;switch(t.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`float ${n}() {return ${t};}`;const[r,s]=e.shapeInfo.texShape;if(1===r&&1===s)return`\n      float ${n}() {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const[a,i]=e.shapeInfo.texShape;return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${a}, ${i}, ${pE(t)});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${dE(e)}\n      }\n    `;const r=e.shapeInfo.texShape,s=r[0],a=r[1];if(1===a&&1===s)return`\n      float ${n}(int index) {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const i=pE(t);return 1===a?`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${s}.0);\n        return sampleTexture(${t}, uv);\n      }\n    `:1===s?`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);\n        return sampleTexture(${t}, uv);\n      }\n    `:`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${s}, ${a}, index + ${i});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e.shapeInfo.texShape;if(null!=s&&se(t,s)){const e=s[0];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${s[1]}.0, ${e}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:a,keptDims:i}=de(t),o=a;if(o.length<t.length){const t=["row","col"];return`\n      ${iE(mE(e,o))}\n      float ${r}(int row, int col) {\n        return ${r}(${gE(t,i)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${t[1]}, 1)));\n        ${dE(e)}\n      }\n    `;const l=s[0],u=s[1],c=pE(n);return 1===u?`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `:1===l?`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${u}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${t[1]} + col + ${c};\n    vec2 uv = uvFromFlat(${l}, ${u}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t[1]*t[2],a=t[2],{newShape:i,keptDims:o}=de(t),l=i;if(l.length<t.length){const t=["row","col","depth"];return`\n        ${iE(mE(e,l))}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${gE(t,o)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${s}, ${a}, 1)));\n        ${dE(e)}\n      }\n    `;const u=e.shapeInfo.texShape,c=u[0],h=u[1],p=e.shapeInfo.flatOffset;if(h===s&&null==p)return`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${a}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${c}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(h===a&&null==p)return`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${t[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${c}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s} + col * ${a} + depth + ${pE(n)};\n        vec2 uv = uvFromFlat(${c}, ${h}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(e);case 4:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t[3],a=t[2]*s,i=t[1]*a,{newShape:o,keptDims:l}=de(t);if(o.length<t.length){const t=["row","col","depth","depth2"];return`\n      ${iE(mE(e,o))}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${gE(t,l)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${a}, ${s}, 1)));\n        ${dE(e)}\n      }\n    `;const u=e.shapeInfo.flatOffset,c=e.shapeInfo.texShape,h=c[0],p=c[1];if(p===i&&null==u)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===s&&null==u)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${t[1]*t[2]}, ${t[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} +\n          depth * ${s} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${p}, index + ${pE(n)});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t[4],a=t[3]*s,i=t[2]*a,o=t[1]*i,{newShape:l,keptDims:u}=de(t);if(l.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${iE(mE(e,l))}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${gE(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${s})) +\n          depth3;\n        ${dE(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,p=h[0],d=h[1];if(d===o&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===s&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${s} + depth3 + ${pE(n)};\n      vec2 uv = uvFromFlat(${p}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:s,keptDims:a}=de(t);if(s.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${iE(mE(e,s))}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${gE(t,a)});\n      }\n    `}const i=t[5],o=t[4]*i,l=t[3]*o,u=t[2]*l,c=t[1]*u;if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${dE(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,d=p[0],f=p[1];if(f===c&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${pE(n)};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${t.length}-D input sampling is not yet supported`)}}function oE(e){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${eE().texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),r=e.shapeInfo.texShape,s=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=eE();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${s[0]}, ${s[1]}, index);\n      return ${a.texture2D}(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e.shapeInfo.texShape,a=s[0],i=s[1],o=eE();if(null!=s&&se(t,s))return`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${a}.0);\n\n        return ${o.texture2D}(${n}, uv);\n      }\n    `;const l=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(t[1]/2)}, ${l[0]}, ${l[1]}, row, col);\n      return ${o.texture2D}(${n}, uv);\n    }\n  `}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e.shapeInfo.texShape,a=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];if(1===t[0]){const n=[1,2],s=["b","row","col"];return`\n        ${oE(mE(e,t.slice(1)))}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${gE(s,n)});\n        }\n      `}const i=a[0],o=a[1],l=Math.ceil(t[2]/2);return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${i}, ${o}, ${l*Math.ceil(t[1]/2)}, ${l}, b, row, col);\n      return ${eE().texture2D}(${n}, uv);\n    }\n  `}(e);default:return function(e){const t=e.shapeInfo.logicalShape,n=t.length,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],o=i[0],l=i[1],u=Math.ceil(t[n-1]/2);let c=u*Math.ceil(t[n-2]/2),h="int b, int row, int col",p=`b * ${c} + (row / 2) * ${u} + (col / 2)`;for(let e=2;e<n-1;e++)h=`int b${e}, `+h,c*=t[n-e-1],p=`b${e} * ${c} + `+p;return`\n    vec4 ${s}(${h}) {\n      int index = ${p};\n      int texR = index / ${l};\n      int texC = index - texR * ${l};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${l}, ${o});\n      return ${eE().texture2D}(${r}, uv);\n    }\n  `}(e)}}const lE="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",uE="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",cE="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",hE="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function pE(e){return`offset${e}`}function dE(e){const t=e.name,n=ne(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function fE(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function mE(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function gE(e,t){return t.map((t=>e[t])).join(", ")}class yE{constructor(e,t,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,Z(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const s=e[e.length-1],a=Math.ceil(s/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,l=fE(o),u=QT("coords",o);let c,h;if(1===a){h=o+1;const e=fE(h);c=`\n        ${e} sourceLocR = ${e}(${u.join()}, 0);\n        ++${u[o-1]};\n        ${e} sourceLocG = ${e}(${u.join()}, 0);\n        ++${u[o-2]};\n        ${e} sourceLocA = ${e}(${u.join()}, 0);\n        --${u[o-1]};\n        ${e} sourceLocB = ${e}(${u.join()}, 0);\n        --${u[o-2]};`}else h=o,c=`\n        ${l} sourceLocR = coords;\n        ++${u[o-1]};\n        ${l} sourceLocG = coords;\n        ++${u[o-2]};\n        ${l} sourceLocA = coords;\n        --${u[o-1]};\n        ${l} sourceLocB = coords;\n        --${u[o-2]};`;const p=["x","y","z","w","u","v"].slice(0,h),d="."+p[h-1],f=p.map((e=>"int "+e)),m=QT("sourceLocR",h-1).concat("inIdx.r"),g=QT("sourceLocG",h-1).concat("inIdx.g"),y=QT("sourceLocB",h-1).concat("inIdx.b"),b=QT("sourceLocA",h-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,v=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,k=r?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${k}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${u[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},\n          sourceLocB${d}, sourceLocA${d}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${v};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${v};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}class bE{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=o-1-e.padInfo.top,c=l-1-e.padInfo.left,h=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class xE{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,s=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,p=e.effectiveFilterWidth,d=c-1-e.padInfo.front,f=h-1-e.padInfo.top,m=p-1-e.padInfo.left,g=1/(t*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${s}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const wE="return (a < 0.) ? b * a : a;";class vE{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=Oo(t,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const kE="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";class NE{constructor(e,t,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Oo(t,n);const s=this.outputShape.length;let a="";if(r)if(0===s||1===ne(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(a=`\n          ${fE(s)} coords = getOutputCoords();\n        `,1===s)a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=QT("coords",s);a+=`\n            bool nextRowOutOfBounds =\n              (${e[s-2]} + 1) >= ${this.outputShape[s-2]};\n            bool nextColOutOfBounds =\n              (${e[s-1]} + 1) >= ${this.outputShape[s-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}class IE{constructor(e){this.variableNames=["A"],this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(e,t){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}class $E{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(e,t){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}class CE{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}class SE{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,s=e.padInfo.left,a="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class TE{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a="channelsLast"===e.dataFormat,i=t-1-e.padInfo.top,o=n-1-e.padInfo.left,l=a?1:2,u=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class EE{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,s=e.padInfo.front,a=e.padInfo.top,i=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${s};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${i};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class AE{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,s=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=r-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${s}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class RE{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,s=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class DE{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a=t-1-e.padInfo.top,i=n-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class FE{constructor(e,t=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const s=e.padInfo.top,a=e.padInfo.left,i=e.strideHeight,o=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterHeight,h=e.filterWidth,p=4*Math.floor(e.inChannels/4),d=e.inChannels%4,f="channelsLast"===e.dataFormat,m=f?1:2,g=f?2:3,y=f?3:1;let b="",x="";n&&(b=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,x="result = activation(result);");const w=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${b}\n\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${s}, ${a});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${y}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${m}], coords[${g}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${c}; wR++) {\n          int xR = xRCorner + wR * ${l};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${h}; wC++) {\n            int xC = xCCorner + wC * ${u};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${p}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${f}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===d}) {\n\n              if (${f}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${p}) *\n                    getW(wR, wC, ${p}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${p}, xR, xC) *\n                    getW(wR, wC, ${p}, d2);\n              }\n\n            } else if (${2===d}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2)\n              );\n\n              if (${f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===d}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2),\n                getW(wR, wC, ${p} + 2, d2)\n              );\n\n              if (${f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1),\n                  getX(batch, xR, xC, ${p} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC),\n                  getX(batch, ${p} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${w}\n        ${x}\n        setOutput(result);\n      }\n    `}}class OE{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,r=e.padInfo.left,s=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${s}, ${a}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class _E{constructor(e,t=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const s=e.inHeight,a=e.inWidth,i=e.padInfo.top,o=e.padInfo.left,l=e.strideHeight,u=e.strideWidth,c=e.dilationHeight,h=e.dilationWidth,p=e.filterHeight,d=e.filterWidth,f=e.outChannels/e.inChannels;let m="",g="";n&&(m=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,g="result = activation(result);");const y=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${m}\n\n      const ivec2 strides = ivec2(${l}, ${u});\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${f};\n        int q = d2 - d1 * ${f};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${p}; wR++) {\n          int xR = xRCorner + wR * ${c};\n\n          if (xR < 0 || xR >= ${s}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${d}; wC++) {\n            int xC = xCCorner + wC * ${h};\n\n            if (xC < 0 || xC >= ${a}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${y}\n        ${g}\n        setOutput(result);\n      }\n    `}}class ME{constructor(e,t=!1,n=null,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.outShape;const s=e.inHeight,a=e.inWidth,i=e.padInfo.top,o=e.padInfo.left,l=e.strideHeight,u=e.strideWidth,c=e.dilationHeight,h=e.dilationWidth,p=e.filterHeight,d=e.filterWidth,f=d;let m="int xR; int xC; int xCOffset;";for(let e=0;e<p;e++)for(let t=0;t<d;t++)m+=`\n          vec4 xTexelR${e}C${2*t} = vec4(0.);\n          vec4 wR${e}C${t} = vec4(0.);\n          vec4 xR${e}C${t} = vec4(0.);`;for(let e=0;e<p;e++)for(let t=0;t<f;t++){const n=2*t;if(m+=`\n          xR = xRCorner + ${e*c};\n          xC = xCCorner + ${n*h};\n        `,1===u){if(n<d&&(m+=o%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${s} && xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${a}) {\n                    xTexelR${e}C${n}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${s} && xCOffset >= 0 && xCOffset < ${a}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${a}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${e}C${n} = vec4(previous.zw, xTexelR${e}C${n}.xy);\n                } else {\n                  xR${e}C${n} = vec4(0, 0, xTexelR${e}C${n}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${s} && xC >= 0 && xC < ${a}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xR${e}C${n} = xTexelR${e}C${n};\n              `,n+1<d)){const t=o%2==0?K(h):h;h%2==0&&o%2==1||h%2!=0&&o%2!=1?(m+=`\n                  xCOffset = xC + ${o%2} + ${t};\n\n                  if(xR >= 0 && xR < ${s} &&\n                    xCOffset >= 0 && xCOffset < ${a}) {\n                    xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,h>1&&(m+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${s} &&\n                      xCOffset >= 0 && xCOffset < ${a}) {\n                      xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${e}C${n} = vec4(0.);\n                    }\n                  `),m+=`\n                  xR${e}C${n+1} = vec4(\n                    xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.xy);\n                `):m+=`\n                  xCOffset = xC + ${t};\n\n                  if(xR >= 0 && xR < ${s} &&\n                    xCOffset >= 0 && xCOffset < ${a}) {\n                    xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${e}C${n+1} = xTexelR${e}C${n+2};\n                `}}else n<d&&(m+=`\n              if(xR >= 0 && xR < ${s}) {\n            `,o%2==1?(m+=`\n                xCOffset = xC + 1 - ${u};\n                if(xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${a}) {\n                  xTexelR${e}C${n+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${e}C${n+2} = vec4(0.);\n                }\n\n                xR${e}C${n} = vec4(\n                  xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.zw);\n              `,n+1<d&&(m+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${u};\n                  if(xCOffset >= 0 && xCOffset < ${a}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${e}C${n+1} = vec4(xTexelR${e}C${n+2}.xy, final.xy);\n                `)):(m+=`\n                if(xC >= 0 && xC < ${a}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + ${u};\n                if(xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${e}C${n+2} = vec4(0.);\n                }\n\n                xR${e}C${n} = vec4(\n                  xTexelR${e}C${n}.xy, xTexelR${e}C${n+2}.xy);\n              `,n+1<d&&(m+=`\n                  xR${e}C${n+1} = vec4(\n                    xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.zw);\n                `)),m+="}");n<d&&(m+=`\n            vec4 wTexelR${e}C${n} = getW(${e}, ${n}, d1, q);\n            wR${e}C${n} = vec4(wTexelR${e}C${n}.xz, wTexelR${e}C${n}.xz);\n          `,n+1<d&&(m+=`\n              vec4 wTexelR${e}C${n+1} = getW(${e}, ${n+1}, d1, q);\n              wR${e}C${n+1} =\n                vec4(wTexelR${e}C${n+1}.xz, wTexelR${e}C${n+1}.xz);`))}for(let e=0;e<p;e++)for(let t=0;t<d;t++)m+=`dotProd += xR${e}C${t} * wR${e}C${t};`;let g="",y="";n&&(g=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,y="result = activation(result);");const b=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${g}\n\n      const ivec2 strides = ivec2(${l}, ${u});\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${m}\n\n        vec4 result = dotProd;\n        ${b}\n        ${y}\n        setOutput(result);\n      }\n    `}}class LE{constructor(e,t,n,r,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,l]=e,[u]=t,[c,h]=n;this.outputShape=[u,c,h,l];const p="bilinear"===r?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[b,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${s}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${s}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}class zE{constructor(e,t,n){this.variableNames=["x"],this.outputShape=e;const r=e.length,s=t?"0.0":`getX(${BE(r,"coords")})`,a=e[e.length-1];let i="",o="";t?(i=n?"end != "+(a-1):"end != 0",o=n?"end + 1":"end - 1"):(i=n?`end + pow2 < ${a}`:"end >= pow2",o=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${fE(r)} coords = getOutputCoords();\n        int end = ${PE(r,"coords")};\n        float val = ${s};\n        int pow2 = int(pow(2.0, index));\n        if (${i}) {\n          int idx = ${o};\n          ${PE(r,"coords")} = idx;\n          val += getX(${BE(r,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.index&&(this.index=t.getUniformLocation(n,"index")),t.gl.uniform1f(this.index,e)}}}function BE(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}function PE(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}class WE{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=aT.DENSE;const t=uT(e),n=eE();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${tE(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class VE{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=aT.DENSE;const t=uT(e),n=eE();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${tE(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class UE{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}class GE{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}class HE{constructor(e){this.variableNames=["A"],this.outTexUsage=iT.DOWNLOAD;const t=eE();this.outputShape=e,this.userCode=`\n      ${rE}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class jE{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=iT.DOWNLOAD;const t=eE();this.outputShape=e,this.userCode=`\n      ${rE}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class qE{constructor(e,t,n=!1){this.variableNames=["A"];const r=eE(),[s,a]=t;this.outputShape=e;let i="result";n&&(i="floor(result * 255. + 0.5)"),this.userCode=`\n      ${nE(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${a};\n        int c = imod(flatIndex, ${a});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n        vec4 values = ${r.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${r.output} = vec4(${i}, 0., 0., 0.);\n      }\n    `}}class KE{constructor(e,t,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const r=eE(),[s,a]=t;this.outputShape=e;let i="",o="result";n&&(o="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let n=0;n<=1;n++){const o=2*t+n;i+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${e[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${t} < ${e[1]}) {\n              localCoords[1] += ${t};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${a};\n              c = imod(flatIndex, ${a});\n              uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n              values = ${r.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${o}] = values[0];\n              } else if(offset == 1) {\n                result[${o}] = values[1];\n              } else if(offset == 2) {\n                result[${o}] = values[2];\n              } else {\n                result[${o}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${nE(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${i}\n\n        ${r.output} = ${o};\n      }\n    `}}class XE{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(e){return(t,n)=>{null==this.valueLoc&&(this.valueLoc=t.getUniformLocationNoThrow(n,"value")),t.gl.uniform1f(this.valueLoc,e)}}}class YE{constructor(e,t,n){this.variableNames=["A","indices"];const r=e.slice();r[n]=t,this.outputShape=r,this.rank=r.length;const s=fE(this.rank),a=function(e,t){const n=e.length;if(n>4)throw Error(`Gather for rank ${n} is not yet supported`);if(1===n)return"int(getIndices(resRC))";const r=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let n=0;n<e.length;n++)n===t?s.push(`int(getIndices(${r[n]}))`):s.push(`${r[n]}`);return s.join()}(e,n);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `}}class JE{constructor(e,t,n){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=n;const r=fE(t.length),s=fE(n.length),a=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${r} strides = ${r}(${this.strides});\n         void main() {\n          ${s} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${a};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}function ZE(e,t,n,r,s,a){!function(e,t){const n=Be().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const i=function(e){return kT(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),o=e.TEXTURE_2D;return pT(e,(()=>e.bindTexture(o,i))),pT(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),pT(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),pT(e,(()=>e.texParameteri(o,e.TEXTURE_MIN_FILTER,e.NEAREST))),pT(e,(()=>e.texParameteri(o,e.TEXTURE_MAG_FILTER,e.NEAREST))),pT(e,(()=>e.texImage2D(o,0,r,t,n,0,s,a,null))),pT(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),i}function QE(e){return e.internalFormatFloat}function eA(e){return e.internalFormatHalfFloat}function tA(e){return e.downloadTextureFormat}function nA(e){return e.internalFormatPackedFloat}function rA(e){return e.internalFormatPackedHalfFloat}class sA{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=Be().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){nT[e]=t}(t,e)):this.gl=sT(t);let n="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(1===Be().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=fT(this.gl,e),AT(this.gl,t))this.textureHalfFloatExtension=fT(this.gl,t);else if(Be().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),AT(this.gl,r))this.colorBufferHalfFloatExtension=fT(this.gl,r);else if(Be().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",AT(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!AT(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=function(e){return function(e,t){const n=kT(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return pT(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),pT(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function(e){return function(e,t){const n=kT(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return pT(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),pT(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function(e){return kT(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=hT(this.gl,this.textureHalfFloatExtension)}get debug(){return Be().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;pT(e,(()=>e.finish())),pT(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),pT(e,(()=>e.deleteFramebuffer(this.framebuffer))),pT(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),pT(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),pT(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=lT(t,n);return ZE(e,s,a,QE(r),r.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=lT(t,n);return ZE(e,s,a,eA(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=lT(t,n);return ZE(e,s,a,tA(r),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){pT(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?pT(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):pT(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),pT(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,r){this.throwIfDisposed(),function(e,t,n,r,s,a){let i,o,l;pT(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),s instanceof Uint8Array?(i=new Uint8Array(n*r*4),o=e.UNSIGNED_BYTE,l=e.RGBA):(i=new Float32Array(n*r*4),o=e.FLOAT,l=a.internalFormatPackedFloat),i.set(s),pT(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,n,r,0,e.RGBA,o,i))),pT(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=cT(t,n);return ZE(e,s,a,rA(r),e.RGBA,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=cT(t,n);return ZE(e,s,a,nA(r),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(wT(this.gl,this.framebuffer),this.outputTexture=null),pT(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,r){const[s,a]=lT(t,n),i=new Uint8Array(t*n*4);return pT(e,(()=>e.readPixels(0,0,s,a,r.downloadTextureFormat,e.UNSIGNED_BYTE,i))),new Float32Array(i.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,r,s,a){return function(e,t,n,r,s,a,i,o){const l=e,u=new Float32Array(function(e,t){const[n,r]=cT(e,t);return n*r*4}(a,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}(this.gl,e,0,0,0,s,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const r=e,s=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,t),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const r=function(e,t,n,r){const s=e.createBuffer();pT(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,s)));const a=16*t*n;return pT(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ))),pT(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),pT(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),s}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(Be().getBool("WEBGL_FENCE_API_ENABLED")){const r=e,s=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=r.clientWaitSync(s,0,0);return e===r.ALREADY_SIGNALED||e===r.CONDITION_SATISFIED},t=s}else Be().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,Be().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const r=new Float32Array(t*n*4);return pT(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,r))),r}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl,n=function(e,t){const n=kT(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(pT(e,(()=>e.shaderSource(n,t))),pT(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw function(e,t){const n=mT.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const r=+n[1],s=e.split("\n"),a=s.length.toString().length+2,i=s.map(((e,t)=>ue((t+1).toString(),a)+e));let o=0;for(let e=0;e<i.length;e++)o=Math.max(i[e].length,o);const l=i.slice(0,r-1),u=i.slice(r-1,r),c=i.slice(r);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${ue(u[0],o)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}(t,e),r=function(e){const t=eE();return function(e,t){const n=kT(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(pT(e,(()=>e.shaderSource(n,t))),pT(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(t),s=function(e){return kT(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);return pT(t,(()=>t.attachShader(s,r))),pT(t,(()=>t.attachShader(s,n))),function(e,t){if(pT(e,(()=>e.linkProgram(t))),!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,s),this.debug&&gT(t,s),this.vertexAttrsAreBound||(this.setProgram(s),this.vertexAttrsAreBound=function(e,t,n){return pT(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),yT(e,t,"clipSpacePos",n,3,20,0)&&yT(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),s}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&pT(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&gT(this.gl,this.program),pT(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return kT(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),pT(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),bT(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[r,s]=cT(t,n);this.setOutputMatrixTextureDriver(e,r,s)}setOutputMatrixWriteRegion(e,t,n,r){this.setOutputMatrixWriteRegionDriver(n,e,r,t)}setOutputPackedMatrixWriteRegion(e,t,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&gT(this.gl,this.program),vT(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),pT(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),pT(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=fT(this.gl,2===Be().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===Be().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===Be().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await ce((()=>this.disposed||this.isQueryAvailable(e,Be().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,Be().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||ce((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),xT(this.gl,e,this.framebuffer),this.debug&&vT(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(xT(this.gl,this.outputTexture,this.framebuffer),this.debug&&vT(this.gl)):wT(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const r=this.gl;xT(r,e,this.framebuffer),this.debug&&vT(r),this.outputTexture=e,pT(r,(()=>r.viewport(0,0,t,n))),pT(r,(()=>r.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,r){this.throwIfDisposed(),pT(this.gl,(()=>this.gl.scissor(e,t,n,r)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}function aA(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const r=e.logicalShape,s=t[n],a=s.shape;if(!se(r,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${a} must match`);if(e.isUniform&&s.isUniform)return;const i=e.texShape,o=s.isUniform?null:s.texData.texShape;if(!se(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)}))}class iA{constructor(e,t,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const{filterWidth:r,inChannels:s,strideWidth:a,strideHeight:i,padInfo:o,outWidth:l,dilationWidth:u,dilationHeight:c,dataFormat:h}=n,{left:p,top:d}=o,f=s*r,m=eE(),g="channelsLast"===h,y=g?0:1,b=g?1:2;let x="";for(let n=0;n<=1;n++)for(let r=0;r<=1;r++)x+=`\n          blockIndex = rc.y + ${r};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${e[1]} && pos < ${e[0]}) {\n            offsetY = int(blockIndex / (${l})) * ${i} - ${d};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${t[y]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${l}.) * ${a}. - ${p}.);\n              d1 = offsetX + ${u} * (int(mod(float(pos), ${f}.) / ${s}.));\n\n              if(d1 < ${t[b]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${s}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+r}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+r}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${x}\n\n        ${m.output} = result;\n      }\n    `}}class oA{constructor(e,t,n,r,s){this.variableNames=["x"],this.outputShape=[];const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${l})`:1===s?`1.0/(${l})`:`exp(log(${l}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class lA{constructor(e,t,n,r,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=r,this.beta=s,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${s})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${s});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}class uA{constructor(e,t,n,r,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${l})`:1===s?`1.0/(${l})`:`exp(log(${l}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}class cA{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,r=e.dilationHeight,s=e.effectiveFilterHeight,a=e.effectiveFilterWidth,i=s-1-e.padInfo.top,o=a-1-e.padInfo.left,l=s*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${s};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class hA{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,s=e.dilationDepth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=o-1-e.padInfo.front,h=l-1-e.padInfo.top,p=u-1-e.padInfo.left,d=o*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${s}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class pA{constructor(e,t,n,r=!1,s=!1,a=!1,i=null,o=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n;const l=r?e[1]:e[2],u=Math.ceil(l/2),c=r?"i * 2, rc.y":"rc.y, i * 2",h=s?"rc.z, i * 2":"i * 2, rc.z",p=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],d=s?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let f="",m="";i&&(f=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,m="result = activation(result);");const g=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights");let y="rc.x",b="rc.x";e[0]<t[0]?y=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(b=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${f}\n\n      const float sharedDimension = ${u}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${u}; i++) {\n          int batchA = ${y};\n          int batchB = ${b};\n          vec4 a = getMatrixA(batchA, ${c});\n          vec4 b = getMatrixB(batchB, ${h});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${p[0]} * ${d[0]});\n          result += (${p[1]} * ${d[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${g}\n\n        ${m}\n\n        setOutput(result);\n      }\n    `}}class dA{constructor(e,t,n){this.variableNames=["probs"],this.outputShape=[e,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.seedLoc&&(this.seedLoc=t.getUniformLocation(n,"seed")),t.gl.uniform1f(this.seedLoc,e)}}}class fA{constructor(e,t,n,r){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}class mA{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e;const t=e.length;if(0===t)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=QT("rc",t),r=fE(t),s=function(e,t,n){if(1===e)return`rc > ${t[0]}`;let r="";for(let s=e-2;s<e;s++)r+=`${n[s]} >= ${t[s]}`,s<e-1&&(r+="||");return r}(t,e,n),a=function(e,t,n,r){if(1===e)return"";const s=r.slice(-2);return`\n    int r = ${s[0]};\n    int c = ${s[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${t};\n    bool rEdge = rp1 >= ${n};\n  `}(t,e[e.length-1],e[e.length-2],n),i=function(e,t){const n=e.length,r=function(e,t){const n=[];for(let r=0;r<=1;r++)for(let s=0;s<=1;s++){let a=`${0===r?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let n=2;n<e;n++)a=`${t[t.length-1-n]},`+a;n.push(a)}return n}(n,t);return 1===n?`getA(rc),\n            rc + 1 >= ${e[0]} ? 0. : getA(rc + 1),\n            0, 0`:`getA(${r[0]}),\n          cEdge ? 0. : getA(${r[1]}),\n          rEdge ? 0. : getA(${r[2]}),\n          rEdge || cEdge ? 0. : getA(${r[3]})`}(e,n);this.userCode=`\n        void main() {\n          ${r} rc = getOutputCoords();\n\n          if(${s}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class gA{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=fE(r),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${n}));\n        } else {\n          ${s} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${n}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class yA{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=fE(r),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=QT("rc",r),l=QT("source",r),u=`${o[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${l.slice(-2).join()})`,h=[`${s} rc = outputLoc;`,`${o[r-1]} += 1;\n       if(${u}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${o[r-2]} += 1;\n       if(${o[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${o[r-1]} += 1;\n         if(${u}) {`],p=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let e=0,t=1===r?2:4;e<t;e++)d+=`\n        ${h[e]}\n        if (${p}) {\n          result[${e}] = float(${n});\n        } else {\n          ${s} source = rc - start;\n          result[${e}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;d+=1===r?"} ":"}}",this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}class bA{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideHeight,o=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?s?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");const x=4*Math.floor(a/4),w=a%4,v=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${v}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${v}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class xA{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideDepth,o=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,p=e.effectiveFilterDepth,d=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?s?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(w="avgValue / count");const v=4*Math.floor(a/4),k=a%4,N=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${v}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${N}\n            }\n\n            int xC = xCCorner + ${v};\n            if (${1===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${2===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${3===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${N}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}class wA{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=e;this.outputShape=[r,a];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n      }\n    `,p="vec4";"all"===t?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===t&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";s%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}class vA{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var r;this.userCode=`\n      ${r=t,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${tE(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${nE(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${e[1]};\n        int cols = ${e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class kA{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t.shape;const[,r,s]=t.shape,[,a,i]=e.shape,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class NA{constructor(e,t,n,r){this.variableNames=["A"],this.outputShape=[];const[s,a,i,o]=e;this.outputShape=[s,t,n,o];const l=[r&&t>1?a-1:a,r&&n>1?i-1:i],u=[r&&t>1?t-1:t,r&&n>1?n-1:n];this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/u[0]},\n          ${l[1]/u[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class IA{constructor(e,t,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[s,a,i,o]=e;this.outputShape=[s,t,n,o];const l=[r&&t>1?a-1:a,r&&n>1?i-1:i],u=[r&&t>1?t-1:t,r&&n>1?n-1:n];this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/u[0]},\n          ${l[1]/u[1]},\n          ${l[1]/u[1]});\n      const vec3 inputShapeRC = vec3(${a}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${o-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}class $A{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t.shape;const[,r,s]=t.shape,[,a,i]=e.shape,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class CA{constructor(e,t,n,r){this.variableNames=["A"],this.outputShape=[];const[s,a,i,o]=e;this.outputShape=[s,t,n,o];const l=[r&&t>1?a-1:a,r&&n>1?i-1:i],u=[r&&t>1?t-1:t,r&&n>1?n-1:n],c=r?"0.5":"0.0";this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/u[0]},\n          ${l[1]/u[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${c})));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class SA{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const r=e.map(((n,r)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(r))).join(","),s=fE(n);this.userCode=`\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class TA{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const r=QT("rc",n),s=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,i=fE(n);function o(n){const r=e.map(((r,s)=>function(n,r){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${r[n]} - 1`:`${r[n]}`}(s,n)));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${s}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return o(e)}(r.slice())};\n          if(${s}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",o(e)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",o(e)}(r.slice())};\n            if(${s}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",o(e)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}class EA{constructor(e,t,n,r,s,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=fE(s.length),l=fE(a.length);let u="";1===n?u="i":2===n&&(u="i, j");const c=`getIndices(${u})`;let h="";1===r?h="i":2===r&&(h="i, coords[1]");const p=`getUpdates(${h})`,d=t>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${s});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}class AA{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,r=e.batchSize,s=e.inSize,a=e.numSegments,i=a*Math.ceil(s/n);this.outputShape=[r,i];const o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";s%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `);let h="";s%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class RA{constructor(e,t,n){let r,s;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)s="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let r=0;r<t.length;r++)i.push(`${n[r]}`),r<e&&a.push(`${n[r]}`);r=a.join(),s=i.join()}const a=fE(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${s}));\n        } else {\n          setOutput(getB(${s}));\n        }\n      }\n    `}}class DA{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=fE(this.rank),n=`uniform int start[${this.rank}];`,r=function(e){if(1===e)return"sourceLoc";if(e<=6)return FA.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let s;s=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${FA[t]} = start[${t}] + coords.${FA[t]};`)).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${s}\n        setOutput(getSource(${r}));\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}const FA=["x","y","z","w","u","v"];class OA{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length;const t=fE(this.rank),n=QT("coords",this.rank),r=QT("sourceLoc",this.rank),s=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${s})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${r[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}class _A{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,s=fE(n.length),a=fE(n.length);let i="";if(1===r)i="coords * strides + begin";else{let e=0;i=n.map(((t,r)=>(e++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${e-1}] * strides[${r}] + begin[${r}]`))).join(",")}this.userCode=`\n      ${s} begin = ${s}(${e});\n      ${s} strides = ${s}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}class MA{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const r=zA(t,n),s=BA(e,r,n);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);const a=LA(e,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[s].shift();return this.usedTextures[s].push(e),e}let i;return r===oT.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):r===oT.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):r===oT.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):r===oT.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):r===oT.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[s].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(e,t,n,r){if(null==this.freeTextures)return;const s=zA(n,r),a=BA(t,s,r);a in this.freeTextures||(this.freeTextures[a]=[]);const i=LA(t,s,this.gpgpu.gl,this.gpgpu.textureConfig,r),o=Be().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e),this._numBytesAllocated-=i):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[a],u=l.indexOf(e);if(u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(u,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function LA(e,t,n,r,s){const a=function(e,t){switch(e){case oT.PACKED_2X2_FLOAT32:return nA(t);case oT.PACKED_2X2_FLOAT16:return rA(t);case oT.UNPACKED_FLOAT32:return QE(t);case oT.UNPACKED_FLOAT16:return eA(t);case oT.PACKED_4X1_UNSIGNED_BYTE:return tA(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,r);let i;if(s){const[t,n]=cT(e[0],e[1]);i=t*n}else{const[t,n]=lT(e[0],e[1]);i=t*n}return i*function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;throw new Error(`Unknown internal format ${t}`)}(n,a)}function zA(e,t){if(e===iT.UPLOAD)return oT.PACKED_2X2_FLOAT32;if(e===iT.RENDER||null==e)return function(e){return Be().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?oT.PACKED_2X2_FLOAT32:oT.UNPACKED_FLOAT32:e?oT.PACKED_2X2_FLOAT16:oT.UNPACKED_FLOAT16}(t);if(e===iT.DOWNLOAD||e===iT.PIXELS)return oT.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function BA(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class PA{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[r]*t[r];this.outputShape=n,this.rank=n.length;const r=fE(this.rank),s=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let t=0;t<e.length;t++)r.push(`imod(${n[t]}, ${e[t]})`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}class WA{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const VA="return abs(x);",UA="if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",GA="if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",HA="return (x >= 0.0) ? x : (exp(x) - 1.0);",jA=`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${Xp};\n  float scale = ${Yp};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`,qA="return -x;",KA="return ceil(x);",XA="return floor(x);",YA="return exp(x);",JA="return exp(x) - 1.0;",ZA=`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${Jp};\n  float a1 = ${Zp};\n  float a2 = ${Qp};\n  float a3 = ${ed};\n  float a4 = ${td};\n  float a5 = ${nd};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`,QA="return x;",eR="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",tR="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",nR="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n";class rR{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class sR{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e;const t=e.length,n=QT("rc",t),r=fE(t),s=function(e,t){if(1===e)return"rc";let n="";for(let r=0;r<e;r++)n+=t[r],r<e-1&&(n+=",");return n}(t,n),a=n.slice(-2),i=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${s});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const{segment_util:aR}=g,iR=gd,oR=yd,lR=bd,uR=fh,cR={};function hR(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?eR:UA;if("elu"===e)return t?nR:HA;if("relu6"===e)return t?tR:GA;if("prelu"===e)return t?kE:wE;throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class pR extends G{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.warnedAboutCPUBackend=!1,this.pendingDeletes=0,this.disposed=!1,!Be().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==e){const e=sT(Be().getNumber("WEBGL_VERSION"));this.binaryCache=((t=Be().getNumber("WEBGL_VERSION"))in cR||(cR[t]={}),cR[t]),this.gpgpu=new sA(e),this.canvas=e.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=e,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=e.gl.canvas;var t;this.textureManager=new MA(this.gpgpu),this.numMBBeforeWarning=null==Be().global.screen?1024:Be().global.screen.height*Be().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new U(this,ji())}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(e,t,n){if((Be().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||Be().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={};return this.texData.set(r,{shape:t,dtype:n,values:e,usage:iT.UPLOAD,refCount:1,complexParentRefCount:0}),r}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,t,n,r){if(Be().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:r,values:t,usage:iT.UPLOAD,refCount:1,complexParentRefCount:0})}disposeIntermediateTensorInfo(e){const t=e.dataId;if(this.texData.has(t)){const e=this.texData.get(t);e.refCount--,e.refCount<1&&this.disposeData(t)}}readSync(e){const t=this.texData.get(e),{values:n,dtype:r,complexTensorInfos:s,slice:a,shape:i,isPacked:o}=t;if(null!=a){let t;t=o?new rR(i,QA):new WA(i,QA);const n=this.runWebGLProgram(t,[{dataId:e,shape:i,dtype:r}],r),s=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===r)return n;const l=null!=this.activeTimers;let u,c;return l&&(u=es()),c="complex64"===r?ad(this.readSync(s.real.dataId),this.readSync(s.imag.dataId)):this.getValuesFromTexture(e),l&&(this.downloadWaitMs+=es()-u),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:r,slice:s,dtype:a,complexTensorInfos:i,isPacked:o}=t;if(null!=s){let t;t=o?new rR(r,QA):new WA(r,QA);const n=this.runWebGLProgram(t,[{dataId:e,shape:r,dtype:a}],a),s=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(e);if(!Be().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===Be().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,u,c=null;if("complex64"!==a&&Be().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);c=this.gpgpu.createBufferFromTexture(t.texture,...uT(r))}if(this.pendingRead.set(e,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const e=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]);u=ad(e[0],e[1])}else if(null==c)u=this.getValuesFromTexture(e);else{const e=ne(r);u=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}null!=l&&this.disposeIntermediateTensorInfo(l);const h=this.convertAndCacheOnCPU(e,u),p=this.pendingRead.get(e);return this.pendingRead.delete(e),p.forEach((e=>e(h))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e),this.pendingDeletes--),h}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!dT(n)){if(Be().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:r}=this.texData.get(e),s=ne(t);if(Be().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),r=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(r.texture,...uT(t)).subarray(0,s);return this.disposeIntermediateTensorInfo(n),a}const a=Be().getBool("WEBGL_PACK")&&!0===r,i=a?$T(t):t,o=a?new jE(i):new HE(i),l=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture,u.texShape[0],u.texShape[1]).subarray(0,s);return this.disposeIntermediateTensorInfo(l),c}async time(e){const t=this.activeTimers,n=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,e();const s=te(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),a=te(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,r&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(Be().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(s);i.kernelMs=X(e),i.getExtraProfileInfo=()=>e.map(((e,t)=>({name:a[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return Be().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:es(),endMs:null}}endTimer(e){return Be().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=es(),e)}async getQueryTime(e){if(Be().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e){if(this.pendingDisposal.has(e))return;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),void this.pendingDeletes++;if(!this.texData.has(e))return;if(this.texData.get(e).complexParentRefCount>0)return void this.texData.get(e).refCount--;this.releaseGPUData(e);const{complexTensorInfos:t}=this.texData.get(e);null!=t&&(this.texData.get(t.real.dataId).complexParentRefCount--,this.disposeIntermediateTensorInfo(t.real),this.texData.get(t.imag.dataId).complexParentRefCount--,this.disposeIntermediateTensorInfo(t.imag)),this.texData.delete(e)}releaseGPUData(e){const{texture:t,dtype:n,texShape:r,usage:s,isPacked:a,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(t,r,s,a)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture}getDataInfo(e){return this.texData.get(e)}getCPUBackend(){return Be().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=ji().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(e,t=128){const n=this.getCPUBackend();return this.warnedAboutCPUBackend||null!=n||(console.warn("Your application contains ops that are small enough to be executed on the CPU backend, however the CPU backend cannot be found. Consider importing the CPU backend (@tensorflow/tfjs-backend-cpu) for better performance."),this.warnedAboutCPUBackend=!0),null!=n&&e.every((e=>null==this.texData.get(e.dataId).texture&&ne(e.shape)<t))}getGPGPUContext(){return this.gpgpu}slice(e,t,n){if(this.shouldExecuteOnCPU([e])){const r=HT(this.texData.get(e.dataId).values,t,n,e.shape,e.dtype);return this.makeOutput(n,e.dtype,r)}if(0===ne(n))return Ps([],n,e.dtype);const{isPacked:r}=this.texData.get(e.dataId),s=Ii(e.shape,t,n);if(r||!s){const r=Be().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new OA(n):new DA(n),s=r.getCustomSetupFunc(t);return this.compileAndRun(r,[e],null,s)}return this.uploadToGPU(e.dataId),this.shallowSlice(e,t,n)}shallowSlice(e,t,n){const r=this.texData.get(e.dataId),s=this.makeOutput(n,e.dtype),a=this.texData.get(s.dataId);Object.assign(a,r),a.shape=n,a.dtype=e.dtype;let i=$i(t,e.strides);r.slice&&(i+=r.slice.flatOffset),a.slice={flatOffset:i,origDataId:r.slice&&r.slice.origDataId||e.dataId};const o=this.dataRefCount.get(a.slice.origDataId)||1;return this.dataRefCount.set(a.slice.origDataId,o+1),s}stridedSlice(e,t,n,r){const s=this.tryRunOnCpuOrThrow([e],(()=>this.cpuBackend.stridedSlice(e,t,n,r)));if(s)return s;const a=fi(t,n,r);if(a.some((e=>0===e)))return Ps([],a);const i=new _A(t,r,a);return this.compileAndRun(i,[e])}reverse(e,t){const n=Be().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new TA(e.shape,t):new SA(e.shape,t);return this.compileAndRun(n,[e])}neg(e){const t=this.tryRunOnCpuOrThrow([e],(()=>this.cpuBackend.neg(e)));if(t)return t;if(Be().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,qA,e.dtype);const n=new WA(e.shape,qA);return this.compileAndRun(n,[e])}batchMatMul(e,t,n,r){const s=n?e.shape[2]:e.shape[1],a=r?t.shape[1]:t.shape[2],i=n?e.shape[1]:e.shape[2],o=Math.max(e.shape[0],t.shape[0]);if((1===s||1===a)&&i>1e3){n&&(e=ni(e,[0,2,1])),r&&(t=ni(t,[0,2,1]));const s=1===a?e:e.as3D(o,i,1),l=1===a?2:1,u=1===a?t.as3D(o,1,i):t;return ho(s,u).sum(l,!0)}const l=gs(e.dtype,t.dtype),u=new pA(e.shape,t.shape,[o,s,a],n,r);return this.compileAndRun(u,[e,t],l)}fusedBatchMatMul({a:e,b:t,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:i}){const o=n?e.shape[2]:e.shape[1],l=r?t.shape[1]:t.shape[2],u=Math.max(e.shape[0],t.shape[0]),c=gs(e.dtype,t.dtype),h=null!=s,p=null!=i,d=a?hR(a,!0):null,f=new pA(e.shape,t.shape,[u,o,l],n,r,h,d,p),m=[e,t];return s&&m.push(s),i&&m.push(i),this.compileAndRun(f,m,c)}localResponseNormalization4D(e,t,n,r,s){const a=Be().getBool("WEBGL_PACK_NORMALIZATION")?new uA(e.shape,t,n,r,s):new oA(e.shape,t,n,r,s);return this.compileAndRun(a,[e])}LRNGrad(e,t,n,r,s,a,i){const o=new lA(t.shape,r,s,a,i);return this.compileAndRun(o,[t,n,e])}tile(e,t){if("string"===e.dtype){const n=this.readSync(e.dataId).map((e=>rs(e))),r=Da(e.shape,e.dtype,n);return oR(r,t)}const n=new PA(e.shape,t);return this.compileAndRun(n,[e])}pad(e,t,n){const r=Be().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new yA(e.shape,t,n):new gA(e.shape,t,n);return this.compileAndRun(r,[e])}gather(e,t,n){const r=this.tryRunOnCpuOrThrow([e,t],(()=>this.cpuBackend.gather(e,t,n)));if(r)return r;const s=new YE(e.shape,t.size,n);return this.compileAndRun(s,[e,t])}batchToSpaceND(e,t,n){Z(e.rank<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const r=t.reduce(((e,t)=>e*t)),s=Gp(e.shape,t,r),a=Hp(s.length,t.length),i=jp(e.shape,t,r),o=qp(n,t.length),l=Kp(i,n,t.length);return ni(e.reshape(s),a).reshape(i).slice(o,l)}spaceToBatchND(e,t,n){Z(e.rank<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const r=t.reduce(((e,t)=>e*t)),s=[[0,0]];s.push(...n);for(let n=1+t.length;n<e.shape.length;++n)s.push([0,0]);const a=e.pad(s),i=Gp(a.shape,t,r,!1),o=Hp(i.length,t.length,!1),l=jp(a.shape,t,r,!1),u=ni(a.reshape(i),o);return Qa(u,l)}reduce(e,t,n){const r=e.shape[0],s=e.shape[1],a=fu(s),i=Math.ceil(s/a),o=new wA({windowSize:a,inSize:s,batchSize:r,outSize:i},t),l=this.compileAndRun(o,[e],n);return 1===l.shape[1]?l:this.reduce(l,t,n)}argReduce(e,t,n=null){let r=e.shape[0],s=e.shape[1];null!=n&&(r=n.shape[0],s=n.shape[1]);const a=fu(s),i={windowSize:a,inSize:s,batchSize:r,outSize:Math.ceil(s/a)},o=new JT(i,t,null==n),l=[e];null!=n&&l.push(n);const u=this.compileAndRun(o,l,"int32");return 1===u.shape[1]?u:this.argReduce(e,t,u)}argReducePacked(e,t,n=null){const r=null!=n?n.shape:e.shape,s=fu(r[r.length-1]),a=new yE(r,s,t,null==n),i=null==n?[e]:[e,n],o=this.compileAndRun(a,i,"int32");return o.rank===e.rank?this.argReducePacked(e,t,o):o}sum(e,t){qo("sum",t,e.rank);const[n,r]=Ho(e.shape,t),s=ne(r),a=e.as2D(-1,s),i=ys(e.dtype);return this.reduce(a,"sum",i).reshape(n)}prod(e,t){const n=this.tryRunOnCpuOrThrow([e],(()=>this.cpuBackend.prod(e,t)));if(n)return n;const[r,s]=Ho(e.shape,t),a=ne(s),i=e.as2D(-1,a),o=ys(e.dtype);return this.reduce(i,"prod",o).reshape(r)}unsortedSegmentSum(e,t,n){let r=0;const s=Ko([r],e.rank);let a=e;null!=s&&(a=ni(e,s),r=Yo(1,e.rank)[0]);const i=aR.computeOutShape(a.shape,r,n),o=ne([a.shape[r]]),l=a.as2D(-1,o),u=ys(e.dtype);let c=this.segOpCompute(l,"unsortedSegmentSum",t,u,n).reshape(i);return null!=s&&(c=ni(c,Xo(s))),c}segOpCompute(e,t,n,r,s){const a=e.shape[0],i=e.shape[1],o=aR.segOpComputeOptimalWindowSize(i,s),l=new AA({windowSize:o,inSize:i,batchSize:a,numSegments:s},t),u=this.compileAndRun(l,[e,n],r);return u.shape[1]===s?u:(n=Ic(0,s).tile([i/o]),this.segOpCompute(u,t,n,r,s))}argMinMaxReduce(e,t,n){const r=[t];if(qo("arg"+n.charAt(0).toUpperCase()+n.slice(1),r,e.rank),!Be().getBool("WEBGL_PACK_REDUCE")||e.rank<=2){const[t,s]=Ho(e.shape,r),a=ne(s),i=e.as2D(-1,a);return this.argReduce(i,n).reshape(t)}return this.argReducePacked(e,n)}argMin(e,t){return this.argMinMaxReduce(e,t,"min")}argMax(e,t){return this.argMinMaxReduce(e,t,"max")}cumsum(e,t,n,r){if(t!==e.rank-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${e.rank-1} but got axis=${t}`);const s=e.shape[t];let a=e;for(let t=0;t<=Math.ceil(Math.log2(s))-1;t++){const n=new zE(e.shape,!1,r),s=n.getCustomSetupFunc(t),i=a;a=this.compileAndRun(n,[a],a.dtype,s),i.dispose()}if(n){const t=new zE(e.shape,n,r),s=a;a=this.compileAndRun(t,[a]),s.dispose()}return a}equal(e,t){if(Be().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(equal(a, b));\n","bool");const n=new vE("return float(a == b);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")}less(e,t){const n=this.tryRunOnCpuOrThrow([e,t],(()=>this.cpuBackend.less(e,t)));if(n)return n;if(Be().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(lessThan(a, b));\n","bool");const r=new vE("return float(a < b);",e.shape,t.shape);return this.compileAndRun(r,[e,t],"bool")}lessEqual(e,t){if(Be().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(lessThanEqual(a, b));\n","bool");const n=new vE("return float(a <= b);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")}greater(e,t){const n=this.tryRunOnCpuOrThrow([e,t],(()=>this.cpuBackend.greater(e,t)));if(n)return n;if(Be().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(greaterThan(a, b));\n","bool");const r=new vE("return float(a > b);",e.shape,t.shape);return this.compileAndRun(r,[e,t],"bool")}greaterEqual(e,t){if(Be().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(greaterThanEqual(a, b));\n","bool");const n=new vE("return float(a >= b);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")}logicalNot(e){const t=new WA(e.shape,"return float(!(x >= 1.0));");return this.compileAndRun(t,[e])}logicalAnd(e,t){if(Be().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n","bool");const n=new vE("return float(a >= 1.0 && b >= 1.0);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")}logicalOr(e,t){if(Be().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n","bool");const n=new vE("return float(a >= 1.0 || b >= 1.0);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")}select(e,t,n){const r=new RA(e.rank,t.shape,t.rank);return this.compileAndRun(r,[e,t,n],gs(t.dtype,n.dtype))}where(e){rd("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return uR(e.shape,t)}topk(e,t,n){const r=e.dataSync();return lR(r,e.shape,e.dtype,t,n)}min(e,t){qo("min",t,e.rank);const[n,r]=Ho(e.shape,t),s=ne(r),a=e.as2D(-1,s);return this.reduce(a,"min",a.dtype).reshape(n)}minimum(e,t){const n=this.tryRunOnCpuOrThrow([e,t],(()=>this.cpuBackend.minimum(e,t)));if(n)return n;const r=Be().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new NE("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",e.shape,t.shape):new vE("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",e.shape,t.shape);return this.compileAndRun(r,[e,t])}mod(e,t){const n=Be().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new NE("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",e.shape,t.shape):new vE("if (b == 0.0) return NAN;\n  return mod(a, b);",e.shape,t.shape);return this.compileAndRun(n,[e,t])}maximum(e,t){const n=this.tryRunOnCpuOrThrow([e,t],(()=>this.cpuBackend.maximum(e,t)));if(n)return n;const r=Be().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new NE("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",e.shape,t.shape):new vE("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",e.shape,t.shape);return this.compileAndRun(r,[e,t])}all(e,t){qo("all",t,e.rank);const[n,r]=Ho(e.shape,t),s=ne(r),a=e.as2D(-1,s);return this.reduce(a,"all",a.dtype).reshape(n)}any(e,t){qo("any",t,e.rank);const[n,r]=Ho(e.shape,t),s=ne(r),a=e.as2D(-1,s);return this.reduce(a,"any",a.dtype).reshape(n)}floorDiv(e,t){const n="int32";if(Be().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",n);const r=new vE("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",e.shape,t.shape);return this.compileAndRun(r,[e,t],n)}packedUnaryOp(e,t,n){const r=new rR(e.shape,t);return this.compileAndRun(r,[e],n)}packedBinaryOp(e,t,n,r,s=!1){const a=new NE(n,e.shape,t.shape,s);return this.compileAndRun(a,[e,t],r)}makeComplexComponentTensorInfo(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}addN(e){if(1===e.length)return e[0];if(e.length>Be().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(e.length/2),n=this.addN(e.slice(0,t)),r=this.addN(e.slice(t));return this.addN([n,r])}const t=e.map((e=>e.dtype)).reduce(((e,t)=>gs(e,t))),n=e.map((e=>e.shape)),r=Be().getBool("WEBGL_PACK")?new YT(e[0].shape,n):new XT(e[0].shape,n);return this.compileAndRun(r,e,t)}pow(e,t){const n=Be().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new NE("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",e.shape,t.shape):new vE("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",e.shape,t.shape),r=gs(e.dtype,t.dtype);return this.compileAndRun(n,[e,t],r)}ceil(e){if(this.shouldExecuteOnCPU([e])){const t=LT(this.texData.get(e.dataId).values,e.dtype);return this.makeOutput(e.shape,e.dtype,t)}if(Be().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,KA,e.dtype);const t=new WA(e.shape,KA);return this.compileAndRun(t,[e])}floor(e){if(this.shouldExecuteOnCPU([e])){const t=PT(this.texData.get(e.dataId).values,e.dtype);return this.makeOutput(e.shape,e.dtype,t)}if(Be().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,XA,e.dtype);const t=new WA(e.shape,XA);return this.compileAndRun(t,[e])}sign(e){const t=new WA(e.shape,"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(t,[e])}isNaN(e){const t=new WA(e.shape,"return float(isnan(x));");return this.compileAndRun(t,[e],"bool")}isInf(e){const t=new WA(e.shape,"return float(isinf(x));");return this.compileAndRun(t,[e],"bool")}isFinite(e){const t=new WA(e.shape,"return float(!isnan(x) && !isinf(x));");return this.compileAndRun(t,[e],"bool")}round(e){const t=new WA(e.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(t,[e])}exp(e){if(this.shouldExecuteOnCPU([e])){const t=zT(this.texData.get(e.dataId).values,e.dtype);return this.makeOutput(e.shape,e.dtype,t)}if(Be().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,YA,e.dtype);const t=new WA(e.shape,YA);return this.compileAndRun(t,[e])}expm1(e){if(this.shouldExecuteOnCPU([e])){const t=BT(this.texData.get(e.dataId).values,e.dtype);return this.makeOutput(e.shape,e.dtype,t)}if(Be().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,JA,e.dtype);const t=new WA(e.shape,JA);return this.compileAndRun(t,[e])}softmax(e,t){const n=pe([t],e.shape),r=_u(e,n),s=jo(r.shape,n),a=Eo(e,r.reshape(s)),i=this.exp(a),o=this.sum(i,n).reshape(s);return co(i,o)}log(e){if(this.shouldExecuteOnCPU([e])){const t=WT(this.texData.get(e.dataId).values,e.dtype);return this.makeOutput(e.shape,e.dtype,t)}if(Be().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",e.dtype);const t=new WA(e.shape,"if (x < 0.0) return NAN;\n  return log(x);");return this.compileAndRun(t,[e])}log1p(e){const t=new WA(e.shape,"return log(1.0 + x);");return this.compileAndRun(t,[e])}sqrt(e){const t=new WA(e.shape,"return sqrt(x);");return this.compileAndRun(t,[e])}rsqrt(e){if(this.shouldExecuteOnCPU([e])){const t=GT(this.texData.get(e.dataId).values,e.dtype);return this.makeOutput(e.shape,e.dtype,t)}const t=new WA(e.shape,"return inversesqrt(x);");return this.compileAndRun(t,[e])}reciprocal(e){const t=new WA(e.shape,"return 1.0 / x;");return this.compileAndRun(t,[e])}relu(e){let t;return t=Be().getBool("WEBGL_PACK")?new rR(e.shape,eR):new WA(e.shape,UA),this.compileAndRun(t,[e])}relu6(e){let t;return t=Be().getBool("WEBGL_PACK")?new rR(e.shape,tR):new WA(e.shape,GA),this.compileAndRun(t,[e])}prelu(e,t){const n=Be().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new NE(kE,e.shape,t.shape):new vE(wE,e.shape,t.shape);return this.compileAndRun(n,[e,t])}elu(e){if(Be().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,nR,e.dtype);const t=new WA(e.shape,HA);return this.compileAndRun(t,[e])}eluDer(e,t){const n=Be().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new NE("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",e.shape,t.shape):new vE("return (b >= 1.0) ? a : a * (b + 1.0);",e.shape,t.shape);return this.compileAndRun(n,[e,t])}selu(e){const t=new WA(e.shape,jA);return this.compileAndRun(t,[e])}clip(e,t,n){let r;r=Be().getBool("WEBGL_PACK_CLIP")?new $E(e.shape):new IE(e.shape);const s=r.getCustomSetupFunc(t,n);return this.compileAndRun(r,[e],null,s)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=_T(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(Be().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,VA,e.dtype);const t=new WA(e.shape,VA);return this.compileAndRun(t,[e])}complexAbs(e){const t=this.texData.get(e.dataId),n=new CE(e.shape),r=[this.makeComplexComponentTensorInfo(e,t.complexTensorInfos.real),this.makeComplexComponentTensorInfo(e,t.complexTensorInfos.imag)];return this.compileAndRun(n,r)}sigmoid(e){const t=new WA(e.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(t,[e])}softplus(e){const t=new WA(e.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(t,[e])}asin(e){const t=new WA(e.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n");return this.compileAndRun(t,[e])}acos(e){const t=new WA(e.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n");return this.compileAndRun(t,[e])}atan(e){const t=new WA(e.shape,"if (isnan(x)) return x;\n  return atan(x);\n");return this.compileAndRun(t,[e])}sinh(e){const t=new WA(e.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(t,[e])}cosh(e){const t=new WA(e.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(t,[e])}tanh(e){const t=new WA(e.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(t,[e])}asinh(e){const t=new WA(e.shape,"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));");return this.compileAndRun(t,[e])}acosh(e){const t=new WA(e.shape,"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));");return this.compileAndRun(t,[e])}atanh(e){const t=new WA(e.shape,"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;");return this.compileAndRun(t,[e])}erf(e){const t=new WA(e.shape,ZA);return this.compileAndRun(t,[e])}step(e,t){const n=new WA(e.shape,function(e=0){return`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${e});\n  `}(t));return this.compileAndRun(n,[e])}conv2dByMatMul(e,t,n,r,s,a){const i=e.shape,o=this.texData.get(e.dataId),l=n.inChannels,u=i[0]*i[1]*i[2],c=n.outChannels,h="channelsLast"===n.dataFormat,p=(1===u||1===c)&&l>1e3,d=i[2]%2!=0&&!!o.isPacked;if(p||!Be().getBool("WEBGL_LAZILY_UNPACK")||!Be().getBool("WEBGL_PACK_BINARY_OPERATIONS")||!d){const o=h?i[0]*i[1]*i[2]:i[0]*i[2]*i[3],l=Qa(e,[1,o,n.inChannels]),u=Qa(t,[1,n.inChannels,n.outChannels]),c=this.fusedBatchMatMul({a:l,b:u,transposeA:!1,transposeB:!1,bias:r,activation:s,preluActivationWeights:a});return Qa(c,n.outShape)}const f=h?i[0]*i[1]*(i[2]+1):i[0]*i[2]*(i[3]+1),m={dataId:e.dataId,shape:[1,f,n.inChannels],dtype:e.dtype},g=o.shape;o.shape=o.shape.slice(),o.shape[o.shape.length-2]++,Z(ST(o.shape,m.shape),(()=>`packed reshape ${o.shape} to ${m.shape} isn't free`));const y=Qa(t,[1,n.inChannels,n.outChannels]),b=this.fusedBatchMatMul({a:m,b:y,transposeA:!1,transposeB:!1,bias:r,activation:s,preluActivationWeights:a}),x=this.texData.get(b.dataId);return Z(x.isPacked,(()=>"batchMatMul result is expected to be packed")),o.shape=g,x.shape=n.outShape,ji().makeTensorFromDataId(b.dataId,n.outShape,b.dtype)}conv2dWithIm2Row(e,t,n,r,s,a){const{filterWidth:i,filterHeight:o,inChannels:l,outWidth:u,outHeight:c,dataFormat:h}=n,p="channelsLast"===h,d=i*o*l,f=c*u,m=[d,f],g=e.squeeze([0]),y=t.reshape([1,d,-1]),b=new iA(m,g.shape,n),x=this.compileAndRun(b,[g]).reshape([1,m[0],m[1]]),w=null!=r,v=null!=a,k=s?hR(s,!0):null,N=new pA(x.shape,y.shape,[1,f,n.outChannels],!0,!1,w,k,v),I=[x,y];r&&I.push(r),v&&I.push(a);const $=this.compileAndRun(N,I);return p?$.reshape([1,c,u,n.outChannels]):$.reshape([1,n.outChannels,c,u])}fusedConv2d({input:e,filter:t,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(e,t,n,r,s,a);if(Be().getBool("WEBGL_CONV_IM2COL")&&1===e.shape[0])return this.conv2dWithIm2Row(e,t,n,r,s,a);const i=null!=r,o=null!=a,l=s?hR(s,!1):null,u=new FE(n,i,l,o),c=[e,t];return r&&c.push(r),a&&c.push(a),this.compileAndRun(u,c)}conv2d(e,t,n){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(e,t,n);if(Be().getBool("WEBGL_CONV_IM2COL")&&1===e.shape[0])return this.conv2dWithIm2Row(e,t,n);const r=new FE(n);return this.compileAndRun(r,[e,t])}conv2dDerInput(e,t,n){const r=new TE(n);return this.compileAndRun(r,[e,t])}conv2dDerFilter(e,t,n){const r=new SE(n);return this.compileAndRun(r,[e,t])}fusedDepthwiseConv2D({input:e,filter:t,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){const i=Be().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1,o=s?hR(s,i):null,l=[e,t],u=null!=r,c=null!=a;let h;return u&&l.push(r),c&&l.push(a),i?(h=new ME(n,u,o,c),this.compileAndRun(h,l)):(h=new _E(n,u,o,c),this.compileAndRun(h,l))}depthwiseConv2D(e,t,n){let r;return Be().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1?(r=new ME(n),this.compileAndRun(r,[e,t])):(r=new _E(n),this.compileAndRun(r,[e,t]))}depthwiseConv2DDerInput(e,t,n){const r=new DE(n);return this.compileAndRun(r,[e,t])}depthwiseConv2DDerFilter(e,t,n){const r=new RE(n);return this.compileAndRun(r,[e,t])}conv3d(e,t,n){const r=new OE(n);return this.compileAndRun(r,[e,t])}conv3dDerInput(e,t,n){const r=new AE(n);return this.compileAndRun(r,[e,t])}conv3dDerFilter(e,t,n){const r=new EE(n);return this.compileAndRun(r,[e,t])}unstack(e,t){const n=e.shape[t],r=new Array(e.rank-1);let s=0;for(let n=0;n<e.rank;n++)n!==t&&(r[s++]=e.shape[n]);const a=new Array(e.rank).fill(0),i=e.shape.slice();i[t]=1;const o=new Array(n);for(let n=0;n<o.length;n++)a[t]=n,o[n]=this.slice(e,a,i).reshape(r);return o}avgPool3d(e,t){const n=new xA(t,"avg",!1);return this.compileAndRun(n,[e],"float32")}avgPool3dBackprop(e,t,n){const r=new xE(n);return this.compileAndRun(r,[e],t.dtype)}maxPool3d(e,t){const n=new xA(t,"max",!1);return this.compileAndRun(n,[e],"float32")}maxPool3dBackprop(e,t,n,r){const s=new xA(r,"max",!0),a=this.compileAndRun(s,[t]),i=new hA(r),o=this.compileAndRun(i,[e,a],t.dtype);return a.dispose(),o}resizeBilinear(e,t,n,r){const s=Be().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new IA(e.shape,t,n,r):new NA(e.shape,t,n,r);return this.compileAndRun(s,[e],"float32")}resizeBilinearBackprop(e,t,n){const r=new kA(e,t,n);return this.compileAndRun(r,[e])}resizeNearestNeighbor(e,t,n,r){const s=new CA(e.shape,t,n,r);return this.compileAndRun(s,[e])}resizeNearestNeighborBackprop(e,t,n){const r=new $A(e,t,n);return this.compileAndRun(r,[e])}multinomial(e,t,n,r){const s=t?e:Hc(e),a=s.shape[0],i=s.shape[1],o=new dA(a,i,n),l=o.getCustomSetupFunc(r);return this.compileAndRun(o,[s],"int32",l)}oneHot(e,t,n,r){const s=new fA(e.size,t,n,r);return this.compileAndRun(s,[e])}diag(e){const t=new GE(e.size);return this.compileAndRun(t,[e])}cropAndResize(e,t,n,r,s,a){const i=new LE(e.shape,t.shape,r,s,a);return this.compileAndRun(i,[e,t,n],"float32")}depthToSpace(e,t,n){Z(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`));const r=e.shape[0],s="NHWC"===n?e.shape[1]:e.shape[2],a="NHWC"===n?e.shape[2]:e.shape[3],i="NHWC"===n?e.shape[3]:e.shape[1],o=s*t,l=a*t,u=i/(t*t),c=new UE("NHWC"===n?[r,o,l,u]:[r,u,o,l],t,n);return this.compileAndRun(c,[e])}split(e,t,n){return iR(e,t,n)}scatterND(e,t,n){const{sliceRank:r,numUpdates:s,sliceSize:a,strides:i,outputSize:o}=hi(0,e,n),l=[o/a,a],u=e.reshape([s,r]),c=t.reshape([s,a]);if(0===o)return fd(Ps([]),n);const h=No(0),p=new EA(s,r,u.rank,c.rank,i,l);return this.compileAndRun(p,[c,u,h]).reshape(n)}sparseToDense(e,t,n,r){const{sliceRank:s,numUpdates:a,strides:i,outputSize:o}=hi(0,e,n),l=new EA(a,s,e.rank,t.rank,i,[o,1],!1);return this.compileAndRun(l,[t,e,r]).reshape(n)}gatherND(e,t){const n=t.shape,r=n[n.length-1],[s,a,i,o]=li(e,t),l=t.reshape([a,r]),u=e.reshape([e.size/i,i]),c=new JE(r,o,[a,i]);return this.compileAndRun(c,[u,l]).reshape(s)}fill(e,t,n){if("string"===(n=n||$e(t))){const r=me(n,ne(e));return r.fill(t),ji().makeTensor(r,e,n,this)}{const r=new XE(e,t),s=r.getCustomSetupFunc(t);return this.compileAndRun(r,[],n,s)}}onesLike(e){if("string"===e.dtype)throw new Error("onesLike is not supported under string dtype");return this.fill(e.shape,1,e.dtype)}zerosLike(e){return this.fill(e.shape,"string"===e.dtype?"":0,e.dtype)}linspace(e,t,n){return md(e,t,n)}makeTensorInfo(e,t,n){const r=this.write(n,e,t);return this.texData.get(r).usage=null,{dataId:r,shape:e,dtype:t}}makeOutput(e,t,n){const{dataId:r}=this.makeTensorInfo(e,t,n);return ji().makeTensorFromDataId(r,e,t,this)}unpackTensor(e){const t=new sR(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new mA(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[NT(e.shape),...IT(e.shape)],r={dtype:e.dtype,shape:n,dataId:e.dataId},s=[NT(t),...IT(t)],a=new vA(s,n),i=this.runWebGLProgram(a,[r],e.dtype,null,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e){const t=this.texData.get(e),{isPacked:n,shape:r,dtype:s}=t,a=$T(r);let i;return i=n?new VE(a):new WE(a),{dtype:s,shape:r,dataId:this.runWebGLProgram(i,[{shape:a,dtype:s,dataId:e}],s,null,!0).dataId}}runWebGLProgram(e,t,n,r,s=!1){const a=this.makeTensorInfo(e.outputShape,n),i=this.texData.get(a.dataId);if(e.packedOutput&&(i.isPacked=!0),e.outPackingScheme===aT.DENSE){const t=uT(e.outputShape);i.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(i.usage=e.outTexUsage),0===ne(a.shape))return i.values=fe(a.dtype,0),a;const o=[],l=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&ne(t.shape)<=Be().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}else if(!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),o.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!ST(n.shape,t.shape)){const e=t,r=t.shape;t.shape=n.shape,t=this.packedReshape(t,r),o.push(t),n=this.texData.get(t.dataId),e.shape=r}return this.uploadToGPU(t.dataId),{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(a.dataId);const u={shape:a.shape,texData:i,isUniform:!1},c=function(e,t,n){let r="";t.concat(n).forEach((e=>{const t=null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0,n=e.isUniform?"uniform":e.texData.texShape;r+=`${e.shape}_${n}_${t}`}));const s=e.userCode;let a=e.constructor.name;return a+="_"+r+"_"+s,a}(e,l,u),h=this.getAndSaveBinary(c,(()=>function(e,t,n,r){const s=t.userCode,a=n.map(((e,n)=>{const r={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(r.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:r}})),i=a.map((e=>e.shapeInfo)),o={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},l=aE(a,o,s,t.packedInputs),u=e.createProgram(l);let c=null;const h=e.getUniformLocation(u,"NAN",!1);1===Be().getNumber("WEBGL_VERSION")&&(c=e.getUniformLocation(u,"INFINITY",!1));const p={};for(let n=0;n<t.variableNames.length;n++){const r=t.variableNames[n],s=!1;p[r]=e.getUniformLocation(u,r,s),p[`offset${r}`]=e.getUniformLocation(u,`offset${r}`,s)}return{program:t,source:l,webGLProgram:u,uniformLocations:p,inShapeInfos:i,outShapeInfo:o,infLoc:c,nanLoc:h}}(this.gpgpu,e,l,u))),p=null!=this.activeTimers;let d;if(p&&(d=this.startTimer()),function(e,t,n,r,s){aA(t.inShapeInfos,n),aA([t.outShapeInfo],[r]);const a=r.texData.texture,i=r.texData.texShape;r.texData.isPacked?e.setOutputPackedMatrixTexture(a,i[0],i[1]):e.setOutputMatrixTexture(a,i[0],i[1]),e.setProgram(t.webGLProgram),1===Be().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,r)=>{const s=t.program.variableNames[r],a=t.uniformLocations[s],i=t.uniformLocations[`offset${s}`];if(null!=a)if(n.isUniform)if(ne(n.shape)<2)e.gl.uniform1f(a,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(a,t)}else null!=n.texData.slice&&null!=i&&e.gl.uniform1i(i,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture,a,r)})),null!=s&&s(e,t.webGLProgram),e.executeProgram()}(this.gpgpu,h,l,u,r),o.forEach((e=>this.disposeIntermediateTensorInfo(e))),p&&(d=this.endTimer(d),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(d)})),!Be().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===s){const e=this.unpackTensor(a);return this.disposeIntermediateTensorInfo(a),e}return a}compileAndRun(e,t,n,r,s=!1){n=n||t[0].dtype;const a=this.runWebGLProgram(e,t,n,r,s);return ji().makeTensorFromDataId(a.dataId,a.shape,a.dtype)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(Be().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]})),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Xi((()=>{if(!Be().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=Be().getBool("DEBUG");Be().set("DEBUG",!1);const t=this.abs(No(1e-8)).dataSync()[0];if(Be().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:r,values:s,texture:a,usage:i,isPacked:o}=t;if(null!=a)return;const l=null!=this.activeTimers;let u;l&&(u=es());let c=t.texShape;if(null==c&&(c=function(e,t=!1){let n=Be().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map(((t,n)=>n>=e.length-2?K(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=de(e);e=t.newShape}let r=ne(e);if(e.length<=1&&r<=n)return[1,r];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=NT(e);let n=2,s=2;return e.length&&([n,s]=IT(e)),r=t*(n/2)*(s/2),oe(r).map((e=>2*e))}return oe(r)}(n,o),t.texShape=c),null!=s){const e=$T(n);let a,i=c[1],h=c[0];const p=s instanceof Uint8Array;o?([i,h]=cT(c[0],c[1]),a=new KE(e,[h,i],p)):a=new qE(e,[h,i],p);const d=this.makeTensorInfo([h,i],r);this.texData.get(d.dataId).usage=p?iT.PIXELS:iT.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(d.dataId),i,h,s);const f=!0,m=this.runWebGLProgram(a,[d],r,null,f),g=this.texData.get(m.dataId);t.texture=g.texture,t.texShape=g.texShape,t.isPacked=g.isPacked,t.usage=g.usage,this.disposeIntermediateTensorInfo(d),this.texData.delete(m.dataId),t.values=null,l&&(this.uploadWaitMs+=es()-u)}else{const e=this.acquireTexture(c,i,r,o);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:r}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,r)),n.values}acquireTexture(e,t,n,r){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,r)}computeBytes(e,t){return e[0]*e[1]*we(t)}tryRunOnCpuOrThrow(e,t){if(this.shouldExecuteOnCPU(e))try{return t()}catch(e){if(Be().getBool("IS_TEST"))throw new Error("CPU forwarding failed")}return null}}function dR(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}Es()&&ao("webgl",(()=>new pR),2);const fR={kernelName:Jt,backendName:"webgl",kernelFunc:dR};function mR(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.makeTensorInfo(r.shape,"complex64"),i=n.texData.get(a.dataId),o=dR({inputs:{x:r},backend:n});n.texData.get(o.dataId).complexParentRefCount++;const l=dR({inputs:{x:s},backend:n});return n.texData.get(l.dataId).complexParentRefCount++,i.complexTensorInfos={real:o,imag:l},a}const gR={kernelName:ft,backendName:"webgl",kernelFunc:mR};function yR(e){return({inputs:t,backend:n})=>{const{x:r}=t,s=n,a=new WA(r.shape,e);return s.runWebGLProgram(a,[r],r.dtype)}}function bR({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:r=!1,cpuKernelImpl:s,dtype:a}){return({inputs:i,backend:o})=>{const{a:l,b:u}=i,c=o;if(r&&"complex64"===l.dtype){const t=c.texData.get(l.dataId),n=c.texData.get(u.dataId),[r,s]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,r]=t,s={dataId:n.dataId,dtype:n.dtype,shape:l.shape},a={dataId:r.dataId,dtype:r.dtype,shape:u.shape},i=new vE(e,l.shape,u.shape);return c.runWebGLProgram(i,[s,a],gs(n.dtype,r.dtype))})),a=mR({inputs:{real:r,imag:s},backend:c});return c.disposeIntermediateTensorInfo(r),c.disposeIntermediateTensorInfo(s),a}const h=a||gs(l.dtype,u.dtype);if(c.shouldExecuteOnCPU([l,u])&&null!=s){const e=c.texData.get(l.dataId),t=c.texData.get(u.dataId),[n,r]=s(l.shape,u.shape,e.values,t.values,h),a=c.makeTensorInfo(r,h);return c.texData.get(a.dataId).values=n,a}let p;return p=Be().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new NE(t,l.shape,u.shape,n):new vE(e,l.shape,u.shape),c.runWebGLProgram(p,[l,u],h)}}const xR="return a + b;",wR=bR({opSnippet:xR,packedOpSnippet:xR,supportsComplex:!0,cpuKernelImpl:MT}),vR={kernelName:qe,backendName:"webgl",kernelFunc:wR},kR=bR({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),NR={kernelName:rt,backendName:"webgl",kernelFunc:kR},IR={kernelName:st,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;FT(s,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=r;Z(yl(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=ol(s.shape,a,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&se(u.inShape,u.outShape))return dR({inputs:{x:s},backend:n});const c=new bA(u,"avg",!1);return n.runWebGLProgram(c,[s],"float32")}},$R={kernelName:at,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,i=a;FT([s,a],"avgPoolBackprop");const{filterSize:o,strides:l,pad:u}=r,c=ol(i.shape,o,l,1,u),h=new bE(c);return n.runWebGLProgram(h,[s],i.dtype)}};class CR{constructor(e,t,n,r,s,a){this.outputShape=[],this.variableNames=["x","mean","variance"],Oo(e,t),Oo(e,n);let i="0.0";null!=r&&(Oo(e,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=s&&(Oo(e,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class SR{constructor(e,t,n,r,s,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Oo(e,t),Oo(e,n);let i="vec4(0.0)";null!=r&&(Oo(e,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=s&&(Oo(e,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const TR={kernelName:jt,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,mean:s,variance:a,offset:i,scale:o}=e;Z(s.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),Z(null==i||s.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),Z(null==o||s.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:l}=n;null==l&&(l=.001);const u=[r,s,a];let c=null;null!=i&&(c=i.shape,u.push(i));let h=null;null!=o&&(h=o.shape,u.push(o));const p=Be().getBool("WEBGL_PACK_NORMALIZATION")?new SR(r.shape,s.shape,a.shape,c,h,l):new CR(r.shape,s.shape,a.shape,c,h,l);return t.runWebGLProgram(p,u,u[0].dtype)}},ER=bR({opSnippet:"return float(a != b);",dtype:"bool"}),AR={kernelName:En,backendName:"webgl",kernelFunc:ER};function RR(e){const{inputs:t,backend:n}=e,{input:r}=t;return dR({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.real},backend:n})}const DR={kernelName:Wn,backendName:"webgl",kernelFunc:RR},FR={kernelName:ht,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r,attrs:s}=t,{x:a}=n,{dtype:i}=s;if("complex64"===i){if("complex64"===a.dtype)return dR({inputs:{x:a},backend:r});const t=ju(a.shape),n=e({inputs:{x:a},backend:r,attrs:{dtype:"float32"}}),s=mR({inputs:{real:n,imag:t},backend:r});return t.dispose(),r.disposeIntermediateTensorInfo(n),s}if("complex64"===a.dtype){const t=RR({inputs:{input:a},backend:r}),n=e({inputs:{x:t},backend:r,attrs:{dtype:i}});return r.disposeIntermediateTensorInfo(t),n}if(!be(a.dtype,i)){const e=dR({inputs:{x:a},backend:r});return{dataId:e.dataId,shape:e.shape,dtype:i}}if("int32"===i)return function(e,t){const n=new WA(e.shape,"return float(int(x));"),r=t.runWebGLProgram(n,[e],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}(a,r);if("bool"===i){const e=r.makeTensorInfo([],"bool",fe("bool",1)),t=ER({inputs:{a,b:e},backend:r});return r.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${i}`)}};class OR{constructor(e){this.outputShape=[],this.outputShape=kl(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const r=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${r}));`)}const r=t.length,s=t[t.length-1];n.push(`else setOutput(getT${r}(yR, yC-${s}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class _R{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=kl(e,t);const n=this.outputShape,r=n.length,s=fE(r),a=QT("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=e.map(((e,t)=>`T${t}`));const o=new Array(e.length-1);o[0]=e[0][t];for(let n=1;n<o.length;n++)o[n]=o[n-1]+e[n][t];const l=i[t],u=i.slice(-2),c=i.join();let h=`if (${l} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let e=1;e<o.length;e++){const t=o[e-1];h+=`\n        if (${l} < ${o[e]}  && ${l} >= ${o[e-1]}) {\n          return getChannel(\n            getT${e}(${MR(i,l,t)}),\n            vec2(${MR(u,l,t)}));\n        }`}const p=o.length,d=o[o.length-1];h+=`\n        return getChannel(\n          getT${p}(${MR(i,l,d)}),\n          vec2(${MR(u,l,d)}));`,this.userCode=`\n      float getValue(${i.map((e=>"int "+e))}) {\n        ${h}\n      }\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r-1]} = ${a[r-1]} + 1;\n        if (${a[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r-2]} = ${a[r-2]} + 1;\n        if (${a[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r-1]} = ${a[r-1]} - 1;\n        if (${a[r-2]} < ${n[r-2]} &&\n            ${a[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function MR(e,t,n){const r=e.indexOf(t);return e.map(((e,t)=>t===r?`${e} - ${n}`:e)).join()}function LR(e){const{inputs:t,backend:n}=e,{input:r}=t;return dR({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.imag},backend:n})}const zR={kernelName:Qt,backendName:"webgl",kernelFunc:LR};function BR(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{shape:a}=r,i=n,o=ne(s.shape),l=he(a,o),u=ne(l);Z(o===u,(()=>`The new shape (${l}) has ${u} elements and the old shape (${s.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`));const c=i.texData.get(s.dataId);return!c.isPacked||ST(s.shape,l)||null!==c.texture&&ST(c.shape,l)?(i.incRef(s.dataId),{dataId:s.dataId,shape:l,dtype:s.dtype}):function(e,t,n){const r=[NT(e.shape),...IT(e.shape)],s={dtype:e.dtype,shape:r,dataId:e.dataId},a=[NT(t),...IT(t)],i=new vA(a,r),o=n.runWebGLProgram(i,[s],e.dtype,null,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}(s,l,i)}const PR={kernelName:Gn,backendName:"webgl",kernelFunc:BR};function WR(e,t,n){const r=e[0].dtype;if("complex64"===r){const r=e.map((e=>RR({inputs:{input:e},backend:n}))),s=e.map((e=>LR({inputs:{input:e},backend:n}))),a=WR(r,t,n),i=WR(s,t,n),o=mR({inputs:{real:a,imag:i},backend:n});return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),s.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),o}if(e.length>Be().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const r=Math.floor(e.length/2),s=WR(e.slice(0,r),t,n),a=WR(e.slice(r),t,n),i=WR([s,a],t,n);return n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),i}if(Be().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const s=new _R(e.map((e=>e.shape)),t);return n.runWebGLProgram(s,e,r)}const s=kl(e.map((e=>e.shape)),t),a=e.map((e=>BR({inputs:{x:e},attrs:{shape:[-1,ne(e.shape.slice(t))]},backend:n}))),i=new OR(a.map((e=>e.shape))),o=n.runWebGLProgram(i,a,r);a.forEach((e=>n.disposeIntermediateTensorInfo(e)));const l=BR({inputs:{x:o},attrs:{shape:s},backend:n});return n.disposeIntermediateTensorInfo(o),l}const VR={kernelName:mt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r,a=pe(s,t[0].shape)[0],i=kl(t.map((e=>e.shape)),a);if(0===ne(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>ne(e.shape)>0));return 1===o.length?o[0]:(vl(o.map((e=>e.shape)),a),WR(o,a,n))}},UR=yR("if (isnan(x)) return x;\n  return cos(x);\n"),GR={kernelName:kt,backendName:"webgl",kernelFunc:UR},HR=bR({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),jR={kernelName:Ot,backendName:"webgl",kernelFunc:HR};class qR{constructor(e,t,n){this.variableNames=["real","imag"];const r=t[1];this.outputShape=t;const s=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${r}.0`:"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${s};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function KR(e,t,n){const r=n.texData.get(e.dataId),s=ne(e.shape),a=e.shape[e.shape.length-1],i=BR({inputs:{x:e},backend:n,attrs:{shape:[s/a,a]}}).shape,o=new qR("real",i,t),l=new qR("imag",i,t),u=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:i},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:i}],c=n.runWebGLProgram(o,u,"float32"),h=n.runWebGLProgram(l,u,"float32"),p=mR({inputs:{real:c,imag:h},backend:n});n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h);const d=BR({inputs:{x:p},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(d),d}const XR={kernelName:Wt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return KR(r,!1,n)}};class YR{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const JR={kernelName:Ut,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,r=t,s=new YR(n.shape);return r.runWebGLProgram(s,[n],n.dtype)}};class ZR{constructor(e){this.variableNames=["A"];const t=eE(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class QR{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=eE(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const eD={kernelName:Tr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e;let{pixels:s}=t;const{numChannels:a}=r,i="undefined"!=typeof HTMLVideoElement&&s instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&s instanceof HTMLImageElement,[l,u]=i?[s.videoWidth,s.videoHeight]:[s.width,s.height],c=[u,l],h=[u,l,a];(o||i)&&(null==tD&&(tD=document.createElement("canvas").getContext("2d")),tD.canvas.width=l,tD.canvas.height=u,tD.drawImage(s,0,0,l,u),s=tD.canvas);const p=n.makeTensorInfo(c,"int32");n.texData.get(p.dataId).usage=iT.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId),s);const d=Be().getBool("WEBGL_PACK")?new QR(h):new ZR(h),f=n.runWebGLProgram(d,[p],"int32");return n.disposeData(p.dataId),f}};let tD;const nD={kernelName:Zt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return KR(r,!0,n)}};class rD{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=e;this.outputShape=[r,a];const i=4*Math.floor(n/4),o=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${ae(e)?e.toPrecision(2):e}, ones);`}let u="";s%n>0&&(u=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${u}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===o}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}function sD(e,t,n,r){const s=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],r=fu(n);t.push({inSize:n,windowSize:r,outSize:Math.ceil(n/r)})}return t}(e.shape);let a=e;for(let i=0;i<s.length;i++){const{inSize:o,windowSize:l,outSize:u}=s[i];let c,h;c="mean"===n?0===i?new rD({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},o):new rD({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u}):new wA({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},n),h=a,a=r.runWebGLProgram(c,[a],t),h.dataId!==e.dataId&&r.disposeIntermediateTensorInfo(h)}return a}class aD{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];this.outputShape=n,this.rank=n.length;const r=fE(this.rank),s=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(t);for(let t=0;t<e.length;t++)r[e[t]]=n[t];return r.join()}(t);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${s}));\n    }\n    `}}class iD{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=fE(this.rank),s=ZT("rc",this.rank),a=new Array(this.rank);for(let e=0;e<t.length;e++)a[t[e]]=s[e];const i=`vec2(${a.slice(-2).join()})`,o=`++${s[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${s[this.rank-1]};\n      if(++${s[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function oD(e,t,n){const r=Be().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new iD(e.shape,t):new aD(e.shape,t);return n.runWebGLProgram(r,[e],e.dtype)}const lD={kernelName:mn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{reductionIndices:s,keepDims:a}=t,i=n,o=r.shape.length,l=pe(s,r.shape);let u=l;const c=Ko(u,o),h=null!=c,p=i.shouldExecuteOnCPU([r]);let d=r;if(h){if(p){const e=i.texData.get(d.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=r.shape[c[e]];const n=qT(e,r.shape,r.dtype,c,t);d=i.makeTensorInfo(t,r.dtype),i.texData.get(d.dataId).values=n}else d=oD(r,c,i);u=Yo(u.length,o)}qo("max",u,o);const[f,m]=Ho(d.shape,u);let g,y=f;if(a&&(y=jo(f,l)),p){const e=i.texData.get(d.dataId).values,t=VT(e,ne(m),y,r.dtype);g=i.makeTensorInfo(y,r.dtype),i.texData.get(g.dataId).values=t}else g=function(e,t,n,r){const s=ne(t),a=BR({inputs:{x:e},attrs:{shape:[ne(e.shape)/s,s]},backend:r}),i=sD(a,e.dtype,"max",r),o=BR({inputs:{x:i},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(i),o}(d,m,y,i);return h&&i.disposeIntermediateTensorInfo(d),g}},uD={kernelName:yn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;FT(s,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=r;Z(yl(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=ol(s.shape,a,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&se(u.inShape,u.outShape))return dR({inputs:{x:s},backend:n});const c=new bA(u,"max",!1);return n.runWebGLProgram(c,[s],s.dtype)}},cD={kernelName:bn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a,output:i}=t,o=a;FT([a,i],"maxPoolBackprop");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=r,p=ol(o.shape,l,u,1,c,h),d=new bA(p,"max",!0),f=n.runWebGLProgram(d,[o],o.dtype),m=new cA(p),g=n.runWebGLProgram(m,[s,f],o.dtype);return n.disposeIntermediateTensorInfo(f),g}},hD={kernelName:vn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:s,strides:a,pad:i,includeBatchInIndex:o}=t,l=n;Z(4===r.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`));const u=[1,1];Z(yl(a,u),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`));const c=ol(r.shape,s,a,u,i),[h,p]=function(e,t,n,r){let s=new bA(n,"max",!1);const a=r.runWebGLProgram(s,[e],"float32");return s=new bA(n,"max",!0,!0,t),[a,r.runWebGLProgram(s,[e],"float32")]}(r,o,c,l);return[h,p]}},pD={kernelName:kn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{keepDims:s,axis:a}=t,i=n,o=r.shape.length,l=pe(a,r.shape);let u=l;const c=Ko(u,o),h=null!=c,p=i.shouldExecuteOnCPU([r]),d=[];let f=r;if(h){if(p){const e=i.texData.get(f.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=r.shape[c[e]];const n=qT(e,r.shape,r.dtype,c,t);f=i.makeTensorInfo(t,r.dtype),i.texData.get(f.dataId).values=n}else f=oD(r,c,i);d.push(f),u=Yo(u.length,o)}qo("sum",u,o);const[m,g]=Ho(f.shape,u);let y=m;s&&(y=jo(m,l));const b=function(e,t,n,r){const s=ne(t),a=BR({inputs:{x:e},attrs:{shape:[ne(e.shape)/s,s]},backend:r}),i=sD(a,"float32","mean",r),o=BR({inputs:{x:i},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(i),o}(f,g,y,i);for(const e of d)i.disposeIntermediateTensorInfo(e);return b}};class dD{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=fE(r),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),l="reflect"===n?0:1;this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${s} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class fD{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=fE(r),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=QT("rc",r),l=QT("source",r),u=`${o[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${l.slice(-2).join()})`,h="reflect"===n?0:1;let p="";if(1===r){const e=`\n        ${s} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;p=`\n        ${s} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[r-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${s} source = rc;\n        ${s} lt = ${s}(lessThan(source, start));\n        ${s} gte = ${s}(greaterThanEqual(source, end));\n        ${s} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;p=`\n        ${s} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[r-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[r-2]} += 1;\n        if(${o[r-2]} < ${this.outputShape[r-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${o[r-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const mD={kernelName:$n,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r}=e,{paddings:s,mode:a}=n,i=Be().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new fD(r.shape,s,a):new dD(r.shape,s,a);return t.runWebGLProgram(i,[r],r.dtype)}};class gD{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Oo(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const yD="return a * b;",bD={kernelName:Sn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{a:r,b:s}=t,a=gs(r.dtype,s.dtype);if("complex64"===r.dtype){const e=n.texData.get(r.dataId),t=n.texData.get(s.dataId),a=new gD("return areal * breal - aimag * bimag;",r.shape,s.shape),i=new gD("return areal * bimag + aimag * breal;",r.shape,s.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:r.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:s.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:s.shape}],l=n.runWebGLProgram(a,o,"float32"),u=n.runWebGLProgram(i,o,"float32"),c=mR({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([r,s])){const e=n.texData.get(r.dataId),t=n.texData.get(s.dataId),[i,o]=UT(r.shape,s.shape,e.values,t.values,a),l=n.makeTensorInfo(o,a);return n.texData.get(l.dataId).values=i,l}let i;return i=Be().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new NE(yD,r.shape,s.shape):new vE(yD,r.shape,s.shape),n.runWebGLProgram(i,[r,s],a)}},xD={kernelName:An,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{rd("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=e,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=n,l=t;return up(l.readSync(r.dataId),l.readSync(s.dataId),a,i,o)}},wD=cp,vD={kernelName:Rn,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{rd("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=e,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,padToMaxOutputSize:l}=n,u=t,c=u.readSync(r.dataId),h=u.readSync(s.dataId),{selectedIndices:p,validOutputs:d}=wD(c,h,a,i,o,l);return[p,d]}},kD=hp,ND={kernelName:Dn,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{rd("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=e,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}=n,u=t,c=u.readSync(r.dataId),h=u.readSync(s.dataId),p=a,d=i,f=o,m=l,{selectedIndices:g,selectedScores:y}=kD(c,h,p,d,f,m);return[g,y]}};class ID{constructor(e,t,n,r){this.variableNames=["Image"],this.outputShape=[];const s=e[1],a=e[2],i=Math.sin(t).toFixed(3),o=Math.cos(t).toFixed(3);this.outputShape=e;const[l,u]=Up(r,s,a),c=l.toFixed(3),h=u.toFixed(3);let p="";p="number"==typeof n?`float outputValue = ${n.toFixed(2)};`:`\n        vec3 fill = vec3(${n.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${c}) * ${o} - (float(y) - ${h}) * ${i};\n          float coordYFloat = (float(x) - ${c}) * ${i} + (float(y) - ${h}) * ${o};\n          int coordX = int(round(coordXFloat + ${c}));\n          int coordY = int(round(coordYFloat + ${h}));\n          ${p}\n          if(coordX >= 0 && coordX < ${a} && coordY >= 0 && coordY < ${s}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const $D={kernelName:Er,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:s,fillValue:a,center:i}=t,o=n,l=new ID(r.shape,s,a,i);return o.runWebGLProgram(l,[r],r.dtype)}},CD=yR("if (isnan(x)) return x;\n  return sin(x);\n"),SD={kernelName:rr,backendName:"webgl",kernelFunc:CD},TD=yR("return x * x;"),ED={kernelName:fr,backendName:"webgl",kernelFunc:TD},AD="return (a - b) * (a - b);",RD=bR({opSnippet:AD,packedOpSnippet:AD}),DD={kernelName:dr,backendName:"webgl",kernelFunc:RD},FD="return a - b;",OD=bR({opSnippet:FD,packedOpSnippet:FD,supportsComplex:!0,cpuKernelImpl:jT}),_D={kernelName:mr,backendName:"webgl",kernelFunc:OD},MD=yR("return tan(x);"),LD=[vR,NR,IR,$R,TR,FR,gR,VR,GR,jR,XR,JR,eD,fR,nD,zR,lD,uD,cD,hD,pD,mD,bD,xD,vD,ND,AR,DR,PR,$D,SD,ED,_D,DD,{kernelName:br,backendName:"webgl",kernelFunc:MD},{kernelName:kr,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{perm:s}=t,a=n,i=r.shape.length,o=new Array(i);for(let e=0;e<o.length;e++)o[e]=r.shape[s[e]];let l;if(a.shouldExecuteOnCPU([r])){const e=a.texData.get(r.dataId).values,t=qT(e,r.shape,r.dtype,s,o);l=a.makeTensorInfo(o,r.dtype),a.texData.get(l.dataId).values=t}else l=oD(r,s,a);return l}},{kernelName:Nr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:a}=t;FT(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=r.readSync(a.dataId),{outputValues:o,outputShape:l,indices:u}=KT(i,s,a.shape,a.dtype);return[r.makeTensorInfo(l,a.dtype,o),r.makeTensorInfo([u.length],"int32",u)]}}];for(const e of LD)zr(e);const zD={"tfjs-core":Pi,"tfjs-backend-cpu":"2.7.0","tfjs-backend-webgl":"2.7.0","tfjs-data":II,"tfjs-layers":Wy,"tfjs-converter":yN,tfjs:"2.7.0"}},377:(e,t,n)=>{var r=n(832),s=n(652),a=n(801),i=n(30),o=n(618),l=n(49),u=n(971);u.alea=r,u.xor128=s,u.xorwow=a,u.xorshift7=i,u.xor4096=o,u.tychei=l,e.exports=u},832:function(e,t,n){var r;!function(e,s,a){function i(e){var t,n=this,r=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function o(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function l(e,t){var n=new i(e),r=t&&t.state,s=n.next;return s.int32=function(){return 4294967296*n.next()|0},s.double=function(){return s()+11102230246251565e-32*(2097152*s()|0)},s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=l:n.amdD&&n.amdO?void 0===(r=function(){return l}.call(t,n,t,s))||(s.exports=r):this.alea=l}(0,e=n.nmd(e),n.amdD)},49:function(e,t,n){var r;!function(e,s,a){function i(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,s=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^s,t.a=s-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function o(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function l(e,t){var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=l:n.amdD&&n.amdO?void 0===(r=function(){return l}.call(t,n,t,s))||(s.exports=r):this.tychei=l}(0,e=n.nmd(e),n.amdD)},652:function(e,t,n){var r;!function(e,s,a){function i(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function l(e,t){var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=l:n.amdD&&n.amdO?void 0===(r=function(){return l}.call(t,n,t,s))||(s.exports=r):this.xor128=l}(0,e=n.nmd(e),n.amdD)},618:function(e,t,n){var r;!function(e,s,a){function i(e){var t=this;t.next=function(){var e,n,r=t.w,s=t.X,a=t.i;return t.w=r=r+1640531527|0,n=s[a+34&127],e=s[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=s[a]=n^e,t.i=a,n+(r^r>>>16)|0},function(e,t){var n,r,s,a,i,o=[],l=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,l=Math.max(l,t.length)),s=0,a=-32;a<l;++a)t&&(r^=t.charCodeAt((a+32)%t.length)),0===a&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(i=i+1640531527|0,s=0==(n=o[127&a]^=r+i)?s+1:0);for(s>=128&&(o[127&(t&&t.length||0)]=-1),s=127,a=512;a>0;--a)r=o[s+34&127],n=o[s=s+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,o[s]=r^n;e.w=i,e.X=o,e.i=s}(t,e)}function o(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function l(e,t){null==e&&(e=+new Date);var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&(r.X&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=l:n.amdD&&n.amdO?void 0===(r=function(){return l}.call(t,n,t,s))||(s.exports=r):this.xor4096=l}(0,e=n.nmd(e),n.amdD)},30:function(e,t,n){var r;!function(e,s,a){function i(e){var t=this;t.next=function(){var e,n,r=t.x,s=t.i;return e=r[s],n=(e^=e>>>7)^e<<24,n^=(e=r[s+1&7])^e>>>10,n^=(e=r[s+3&7])^e>>>3,n^=(e=r[s+4&7])^e<<7,e=r[s+7&7],n^=(e^=e<<13)^e<<9,r[s]=n,t.i=s+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function o(e,t){return t.x=e.x.slice(),t.i=e.i,t}function l(e,t){null==e&&(e=+new Date);var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&(r.x&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=l:n.amdD&&n.amdO?void 0===(r=function(){return l}.call(t,n,t,s))||(s.exports=r):this.xorshift7=l}(0,e=n.nmd(e),n.amdD)},801:function(e,t,n){var r;!function(e,s,a){function i(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function l(e,t){var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=l:n.amdD&&n.amdO?void 0===(r=function(){return l}.call(t,n,t,s))||(s.exports=r):this.xorwow=l}(0,e=n.nmd(e),n.amdD)},971:(e,t,n)=>{var r;!function(s,a){var i,o=this,l=256,u=a.pow(l,6),c=a.pow(2,52),h=2*c,p=255;function d(e,t,n){var r=[],p=y(g((t=1==t?{entropy:!0}:t||{}).entropy?[e,b(s)]:null==e?function(){try{var e;return i&&(e=i.randomBytes)?e=e(l):(e=new Uint8Array(l),(o.crypto||o.msCrypto).getRandomValues(e)),b(e)}catch(e){var t=o.navigator,n=t&&t.plugins;return[+new Date,o,n,o.screen,b(s)]}}():e,3),r),d=new f(r),x=function(){for(var e=d.g(6),t=u,n=0;e<c;)e=(e+n)*l,t*=l,n=d.g(1);for(;e>=h;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|d.g(4)},x.quick=function(){return d.g(4)/4294967296},x.double=x,y(b(d.S),s),(t.pass||n||function(e,t,n,r){return r&&(r.S&&m(r,d),e.state=function(){return m(d,{})}),n?(a.random=e,t):e})(x,p,"global"in t?t.global:this==a,t.state)}function f(e){var t,n=e.length,r=this,s=0,a=r.i=r.j=0,i=r.S=[];for(n||(e=[n++]);s<l;)i[s]=s++;for(s=0;s<l;s++)i[s]=i[a=p&a+e[s%n]+(t=i[s])],i[a]=t;(r.g=function(e){for(var t,n=0,s=r.i,a=r.j,i=r.S;e--;)t=i[s=p&s+1],n=n*l+i[p&(i[s]=i[a=p&a+t])+(i[a]=t)];return r.i=s,r.j=a,n})(l)}function m(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function g(e,t){var n,r=[],s=typeof e;if(t&&"object"==s)for(n in e)try{r.push(g(e[n],t-1))}catch(e){}return r.length?r:"string"==s?e:e+"\0"}function y(e,t){for(var n,r=e+"",s=0;s<r.length;)t[p&s]=p&(n^=19*t[p&s])+r.charCodeAt(s++);return b(t)}function b(e){return String.fromCharCode.apply(0,e)}if(a.seedrandom=d,y(a.random(),s),e.exports){e.exports=d;try{i=n(906)}catch(e){}}else void 0===(r=function(){return d}.call(t,n,t,e))||(e.exports=r)}([],Math)},560:e=>{e.exports={normalizeFn:function(e){const{attributes:t,categories:n}=e;return e=>({xs:t.map((t=>{return n=e[t.name],r=t.min,s=t.max,void 0===r||void 0===s?n:(n-r)/(s-r);var n,r,s})),ys:n.indexOf(e.type)})}}},811:e=>{const t=({artist:e,title:t,creator:n,version:r})=>`${e} - ${t} (${n}) [${r}]`;e.exports={parseBeatmap:function(e){const n=e.split("\n").map((e=>e.trim())),r=e=>(n.find((t=>t.startsWith(e)))||"").slice(e.length);if(3!==parseInt(r("Mode:")))throw new Error("Invalid game mode");const s=r("Title:"),a=r("Artist:"),i=r("Creator:"),o=r("Version:"),l=r("BeatmapID:"),u=r("BeatmapSetID:"),c=parseFloat(r("OverallDifficulty:")),h=parseFloat(r("HPDrainRate:")),p=parseFloat(r("CircleSize:"));let d=n.indexOf("[HitObjects]"),f=n.filter(((e,t)=>""!=e&&t>d)).map((e=>{let[t,n,r,s,a,i]=e.split(",");t=parseInt(t),r=parseInt(r),s=parseInt(s);let o,l=r,u=!1;return(128&s)>0&&(u=!0,[l,o]=i.split(":"),l=parseInt(l)),{time:r,endTime:l,column:Math.floor(t*p/512),isLN:u}}));const m=t({artist:a,title:s,creator:i,version:o}),g=0===f.length?0:f[f.length-1].endTime-f[0].time,y=f.filter((e=>e.isLN)).length/Math.max(1,f.length);let b=0,x=0;if(f.length>0){let e=new Array(p);for(let t=0;t<f.length;t++){for(let n of e)n&&(f[t].time<n.endTime&&(f[t].startDuringLN=!0),f[t].endTime<n.endTime&&(f[t].endDuringLN=!0),f[t].time<n.endTime&&f[t].endTime>n.endTime&&(n.endDuringLN=!0));e[f[t].column]=f[t]}b=f.filter((e=>e.startDuringLN)).length/(f.length-1),x=f.filter((e=>e.endDuringLN)).length/(f.length-1)}let w=0,v=0;{const e=[];for(let e=0;e<p;e++){let t=f.filter((t=>t.column==e));for(let e=1;e<t.length;e++)t[e].prev=t[e-1]}for(let t=1;t<f.length;t++){const n=Math.max(0,f[t].time-f[t-1].time);for(let t=0;t<p;t++)e[t]=Math.max(n,e[t]);if(f[t].prev){const n=e[f[t].column],r=f[t].time-f[t].prev.time,s=Math.min(1,n/r);f[t].jackPercent=s,f[t].pureJackPercent=Math.max(0,2*s-1)}e[f[t].column]=0}const t=f.filter((e=>Number.isFinite(e.jackPercent)));t.length>0&&(w=t.map((e=>e.jackPercent)).reduce(((e,t)=>e+t),0)/t.length,v=t.map((e=>e.pureJackPercent)).reduce(((e,t)=>e+t),0)/t.length)}const k=f.length;let N=0,I=0,$=0,C=0,S=0,T=0;{let e=new Map;f.forEach((t=>{e.set(t.time,(e.get(t.time)||0)+1)}));let t=[...e.values()];0!==t.length&&(N=t.filter((e=>1===e)).length/t.length,I=t.filter((e=>2===e)).length/t.length,$=t.filter((e=>3===e)).length/t.length,C=t.filter((e=>4===e)).length/t.length,T=1e3*t.length/g,S=1e3*f.length/g)}return{metadata:m,title:s,artist:a,creator:i,version:o,beatmapId:l,beatmapSetId:u,overallDifficulty:c,hpDrain:h,keyCount:p,lnPercent:y,startDuringLNPercent:b,endDuringLNPercent:x,length:g,noteCount:k,noteDensity:S,chordDensity:T,jackPercent:w,pureJackPercent:v,chord1Percent:N,chord2Percent:I,chord3Percent:$,chord4Percent:C}},formatMetadata:t}},906:()=>{},993:()=>{},352:()=>{},589:()=>{},758:()=>{}},t={};function n(r){if(t[r])return t[r].exports;var s=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(s.exports,s,s.exports,n),s.loaded=!0,s.exports}n.amdD=function(){throw new Error("define cannot be used indirect")},n.amdO={},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{const e=n(765),{parseBeatmap:t}=n(811),{normalizeFn:r}=n(560),s=n(615);!async function(){const n=await e.loadLayersModel("model/model.json"),a=document.getElementById("form"),i=document.getElementById("file-input"),o=(document.getElementById("reset"),document.getElementById("output")),l=document.getElementById("output-table");a.addEventListener("reset",(()=>{o.innerHTML="",l.innerHTML=""})),i.addEventListener("change",(()=>{const a=i.files[0];if(a){var u=new FileReader;u.readAsText(a,"UTF-8"),u.onload=async function(a){try{o.innerHTML="Processing File...";const i=await t(a.target.result),u=r(s)(i).xs,c=n.predict(e.tensor(u,[1,s.attributes.length])),[h]=await c.array(),p=Math.max(...h),d=h.indexOf(p);o.innerHTML="Type: "+s.categories[d];const f=e=>e.toLocaleString(void 0,{style:"percent",minimumFractionDigits:2}),m=s.categories.map(((e,t)=>({name:e,prob:h[t],formattedProb:f(h[t])})));m.sort(((e,t)=>t.prob-e.prob)),l.innerHTML="<tr><th>Category</th><th>Probability</th></tr>"+m.map((({name:e,formattedProb:t})=>`<tr><td>${e}</td><td align='right'>${t}</td></tr>`)).join("")}catch(e){console.error(e),o.innerHTML="Error Processing File"}},u.onerror=function(e){o.innerHTML="Error Reading File"}}}))}()})()})();